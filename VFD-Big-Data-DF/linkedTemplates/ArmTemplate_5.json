{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "VFD-Big-Data-DF"
		},
		"VFD_TRG_Weather_API_Daily_properties_VFD_PL_Weather_API_Daily_parameters_location": {
			"type": "string",
			"defaultValue": "Milano"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Mida2_Atomic_DELETE_Booking_Complete')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline atomica per rimozione di una prenotazione dal file completo - riceve solo row_id",
				"activities": [
					{
						"name": "Delete Record From Complete",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_Mida2_Atomic_DELETE_Booking_Complete",
								"type": "DataFlowReference",
								"parameters": {
									"row_id": {
										"value": "@concat('''', pipeline().parameters.row_id, '''')",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SourceExistingContent": {
										"folderPath": "@pipeline().parameters.targetFolderPath",
										"fileName": "@pipeline().parameters.targetFileName"
									},
									"SinkTemp": {
										"folderPath": "@pipeline().parameters.tempFolderPath",
										"fileName": "@pipeline().parameters.tempFileName"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Copy Temp To Final",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Record From Complete",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "@pipeline().parameters.tempFolderPath",
									"fileName": "@pipeline().parameters.tempFileName"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Complete_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "@pipeline().parameters.targetFolderPath",
									"fileName": "@pipeline().parameters.targetFileName"
								}
							}
						]
					},
					{
						"name": "Delete Temp File",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy Temp To Final",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "@pipeline().parameters.tempFolderPath",
									"fileName": "@pipeline().parameters.tempFileName"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": false,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"row_id": {
						"type": "string"
					},
					"targetFolderPath": {
						"type": "string"
					},
					"targetFileName": {
						"type": "string"
					},
					"tempFolderPath": {
						"type": "string"
					},
					"tempFileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"annotations": [
					"Pipeline atomica per rimozione prenotazioni complete",
					"Riceve solo row_id come parametro",
					"Sintassi corretta per parametri e dataset"
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Mida2_Atomic_INSERT_Booking_Summary')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline atomica per inserimento di una prenotazione nel file summary - riceve solo i 9 campi summary",
				"activities": [
					{
						"name": "Check Summary File Exists",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Summary_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "@pipeline().parameters.targetFolderPath",
									"fileName": "@pipeline().parameters.targetFileName"
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "If File Exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check Summary File Exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('Check Summary File Exists').output.exists",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Create New Summary File",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "VFD_DFL_Mida2_Atomic_CREATE_Booking_Summary",
											"type": "DataFlowReference",
											"parameters": {
												"row_id": {
													"value": "@concat('''', pipeline().parameters.row_id, '''')",
													"type": "Expression"
												},
												"reservation_code": {
													"value": "@concat('''', pipeline().parameters.reservation_code, '''')",
													"type": "Expression"
												},
												"priceList": {
													"value": "@concat('''', pipeline().parameters.priceList, '''')",
													"type": "Expression"
												},
												"channel_label": {
													"value": "@concat('''', pipeline().parameters.channel_label, '''')",
													"type": "Expression"
												},
												"pax_quantity": {
													"value": "pipeline().parameters.pax_quantity",
													"type": "Expression"
												},
												"insertTimestamp": {
													"value": "@concat('''', pipeline().parameters.insertTimestamp, '''')",
													"type": "Expression"
												},
												"updateTimestamp": {
													"value": "@concat('''', pipeline().parameters.updateTimestamp, '''')",
													"type": "Expression"
												},
												"reservation_amount": {
													"value": "pipeline().parameters.reservation_amount",
													"type": "Expression"
												},
												"visitDate": {
													"value": "@concat('''', pipeline().parameters.visitDate, '''')",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"DummySource": {},
												"SinkSummary": {
													"folderPath": "@pipeline().parameters.targetFolderPath",
													"fileName": "@pipeline().parameters.targetFileName"
												}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Append To Existing File",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "VFD_DFL_Mida2_Atomic_APPEND_Booking_Summary",
											"type": "DataFlowReference",
											"parameters": {
												"row_id": {
													"value": "@concat('''', pipeline().parameters.row_id, '''')",
													"type": "Expression"
												},
												"reservation_code": {
													"value": "@concat('''', pipeline().parameters.reservation_code, '''')",
													"type": "Expression"
												},
												"priceList": {
													"value": "@concat('''', pipeline().parameters.priceList, '''')",
													"type": "Expression"
												},
												"channel_label": {
													"value": "@concat('''', pipeline().parameters.channel_label, '''')",
													"type": "Expression"
												},
												"pax_quantity": {
													"value": "pipeline().parameters.pax_quantity",
													"type": "Expression"
												},
												"insertTimestamp": {
													"value": "@concat('''', pipeline().parameters.insertTimestamp, '''')",
													"type": "Expression"
												},
												"updateTimestamp": {
													"value": "@concat('''', pipeline().parameters.updateTimestamp, '''')",
													"type": "Expression"
												},
												"reservation_amount": {
													"value": "pipeline().parameters.reservation_amount",
													"type": "Expression"
												},
												"visitDate": {
													"value": "@concat('''', pipeline().parameters.visitDate, '''')",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"DummySource": {},
												"SourceExistingContent": {
													"folderPath": "@pipeline().parameters.targetFolderPath",
													"fileName": "@pipeline().parameters.targetFileName"
												},
												"SinkTemp": {
													"folderPath": "@pipeline().parameters.tempFolderPath",
													"fileName": "@pipeline().parameters.tempFileName"
												}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								},
								{
									"name": "Copy Temp To Final",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Append To Existing File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": false,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": "@pipeline().parameters.tempFolderPath",
												"fileName": "@pipeline().parameters.tempFileName"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "VFD_DS_Curated_Mida_Bookings_Summary_Parquet",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": "@pipeline().parameters.targetFolderPath",
												"fileName": "@pipeline().parameters.targetFileName"
											}
										}
									]
								},
								{
									"name": "Delete Temp File",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Copy Temp To Final",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": "@pipeline().parameters.tempFolderPath",
												"fileName": "@pipeline().parameters.tempFileName"
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": false,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"row_id": {
						"type": "string"
					},
					"reservation_code": {
						"type": "string"
					},
					"priceList": {
						"type": "string"
					},
					"channel_label": {
						"type": "string"
					},
					"pax_quantity": {
						"type": "int"
					},
					"insertTimestamp": {
						"type": "string"
					},
					"updateTimestamp": {
						"type": "string"
					},
					"reservation_amount": {
						"type": "float"
					},
					"visitDate": {
						"type": "string"
					},
					"targetFolderPath": {
						"type": "string"
					},
					"targetFileName": {
						"type": "string"
					},
					"tempFolderPath": {
						"type": "string"
					},
					"tempFileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"annotations": [
					"Pipeline atomica per inserimento prenotazioni summary",
					"Riceve solo i 9 campi del summary",
					"Sintassi corretta uniforme per CREATE e APPEND"
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Mida2_Atomic_UPDATE_Booking_Summary')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline atomica per aggiornamento di una prenotazione nel file summary",
				"activities": [
					{
						"name": "Update Summary Record",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_Mida2_Atomic_UPDATE_Booking_Summary",
								"type": "DataFlowReference",
								"parameters": {
									"row_id": {
										"value": "@concat('''', pipeline().parameters.row_id, '''')",
										"type": "Expression"
									},
									"reservation_code": {
										"value": "@concat('''', pipeline().parameters.reservation_code, '''')",
										"type": "Expression"
									},
									"priceList": {
										"value": "@concat('''', pipeline().parameters.priceList, '''')",
										"type": "Expression"
									},
									"channel_label": {
										"value": "@concat('''', pipeline().parameters.channel_label, '''')",
										"type": "Expression"
									},
									"pax_quantity": {
										"value": "pipeline().parameters.pax_quantity",
										"type": "Expression"
									},
									"insertTimestamp": {
										"value": "@concat('''', pipeline().parameters.insertTimestamp, '''')",
										"type": "Expression"
									},
									"updateTimestamp": {
										"value": "@concat('''', pipeline().parameters.updateTimestamp, '''')",
										"type": "Expression"
									},
									"reservation_amount": {
										"value": "pipeline().parameters.reservation_amount",
										"type": "Expression"
									},
									"visitDate": {
										"value": "@concat('''', pipeline().parameters.visitDate, '''')",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"DummySource": {},
									"SourceExistingContent": {
										"folderPath": "@pipeline().parameters.targetFolderPath",
										"fileName": "@pipeline().parameters.targetFileName"
									},
									"SinkTemp": {
										"folderPath": "@pipeline().parameters.tempFolderPath",
										"fileName": "temp_update_summary.parquet"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Copy Temp To Final",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Update Summary Record",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "@pipeline().parameters.tempFolderPath",
									"fileName": "temp_update_summary.parquet"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Summary_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "@pipeline().parameters.targetFolderPath",
									"fileName": "@pipeline().parameters.targetFileName"
								}
							}
						]
					},
					{
						"name": "Delete Temp File",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy Temp To Final",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "@pipeline().parameters.tempFolderPath",
									"fileName": "temp_update_summary.parquet"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": false,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"row_id": {
						"type": "string"
					},
					"reservation_code": {
						"type": "string"
					},
					"priceList": {
						"type": "string"
					},
					"channel_label": {
						"type": "string"
					},
					"pax_quantity": {
						"type": "int"
					},
					"insertTimestamp": {
						"type": "string"
					},
					"updateTimestamp": {
						"type": "string"
					},
					"reservation_amount": {
						"type": "float"
					},
					"visitDate": {
						"type": "string"
					},
					"targetFolderPath": {
						"type": "string"
					},
					"targetFileName": {
						"type": "string"
					},
					"tempFolderPath": {
						"type": "string"
					},
					"tempFileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"annotations": [
					"Pipeline atomica per aggiornamento prenotazioni summary",
					"Sintassi corretta per tutti i parametri dataflow"
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Mida2_Atomic_DELETE_Booking_Summary')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline atomica per rimozione di una prenotazione dal file summary",
				"activities": [
					{
						"name": "Delete Record From Summary",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_Mida2_Atomic_DELETE_Booking_Summary",
								"type": "DataFlowReference",
								"parameters": {
									"row_id": {
										"value": "@concat('''', pipeline().parameters.row_id, '''')",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SourceExistingContent": {
										"folderPath": "@pipeline().parameters.targetFolderPath",
										"fileName": "@pipeline().parameters.targetFileName"
									},
									"SinkTemp": {
										"folderPath": "@pipeline().parameters.tempFolderPath",
										"fileName": "@pipeline().parameters.tempFileName"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Copy Temp To Final",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Record From Summary",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "@pipeline().parameters.tempFolderPath",
									"fileName": "@pipeline().parameters.tempFileName"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Summary_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "@pipeline().parameters.targetFolderPath",
									"fileName": "@pipeline().parameters.targetFileName"
								}
							}
						]
					},
					{
						"name": "Delete Temp File",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy Temp To Final",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "@pipeline().parameters.tempFolderPath",
									"fileName": "@pipeline().parameters.tempFileName"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": false,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"row_id": {
						"type": "string"
					},
					"targetFolderPath": {
						"type": "string"
					},
					"targetFileName": {
						"type": "string"
					},
					"tempFolderPath": {
						"type": "string"
					},
					"tempFileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"annotations": [
					"Pipeline atomica per rimozione prenotazioni summary",
					"Sintassi corretta per parametri e dataset"
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Mida2_Atomic_APPEND_Historical')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline atomica per aggiungere record al file historical con audit trail",
				"activities": [
					{
						"name": "Check Historical File Exists",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Historical_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "@pipeline().parameters.targetFolderPath",
									"fileName": "@pipeline().parameters.targetFileName"
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "If File Exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check Historical File Exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('Check Historical File Exists').output.exists",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Create New Historical File",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "VFD_DFL_Mida2_Atomic_CREATE_Historical",
											"type": "DataFlowReference",
											"parameters": {
												"guid_pk": {
													"value": "@concat('''', pipeline().parameters.guid_pk, '''')",
													"type": "Expression"
												},
												"reservation_progressiveCode": {
													"value": "@concat('''', pipeline().parameters.reservation_progressiveCode, '''')",
													"type": "Expression"
												},
												"reservation_code": {
													"value": "@concat('''', pipeline().parameters.reservation_code, '''')",
													"type": "Expression"
												},
												"reservation_status": {
													"value": "pipeline().parameters.reservation_status",
													"type": "Expression"
												},
												"invoiceRequired": {
													"value": "@concat('''', pipeline().parameters.invoiceRequired, '''')",
													"type": "Expression"
												},
												"customer": {
													"value": "pipeline().parameters.customer",
													"type": "Expression"
												},
												"visitDate": {
													"value": "@concat('''', pipeline().parameters.visitDate, '''')",
													"type": "Expression"
												},
												"reservationPayment_guid": {
													"value": "@concat('''', pipeline().parameters.reservationPayment_guid, '''')",
													"type": "Expression"
												},
												"parentPayment_guid": {
													"value": "@concat('''', pipeline().parameters.parentPayment_guid, '''')",
													"type": "Expression"
												},
												"sliced": {
													"value": "@concat('''', pipeline().parameters.sliced, '''')",
													"type": "Expression"
												},
												"reservation_guid": {
													"value": "@concat('''', pipeline().parameters.reservation_guid, '''')",
													"type": "Expression"
												},
												"group_guid": {
													"value": "@concat('''', pipeline().parameters.group_guid, '''')",
													"type": "Expression"
												},
												"group_label": {
													"value": "@concat('''', pipeline().parameters.group_label, '''')",
													"type": "Expression"
												},
												"group_email": {
													"value": "@concat('''', pipeline().parameters.group_email, '''')",
													"type": "Expression"
												},
												"paymentCode": {
													"value": "@concat('''', pipeline().parameters.paymentCode, '''')",
													"type": "Expression"
												},
												"paymentCondition": {
													"value": "pipeline().parameters.paymentCondition",
													"type": "Expression"
												},
												"reservation_amount": {
													"value": "pipeline().parameters.reservation_amount",
													"type": "Expression"
												},
												"reservation_amountTax": {
													"value": "pipeline().parameters.reservation_amountTax",
													"type": "Expression"
												},
												"status": {
													"value": "pipeline().parameters.status",
													"type": "Expression"
												},
												"status_text": {
													"value": "@concat('''', pipeline().parameters.status_text, '''')",
													"type": "Expression"
												},
												"stamp": {
													"value": "@concat('''', pipeline().parameters.stamp, '''')",
													"type": "Expression"
												},
												"notes": {
													"value": "@concat('''', pipeline().parameters.notes, '''')",
													"type": "Expression"
												},
												"transactionType": {
													"value": "@concat('''', pipeline().parameters.transactionType, '''')",
													"type": "Expression"
												},
												"transactionType_text": {
													"value": "@concat('''', pipeline().parameters.transactionType_text, '''')",
													"type": "Expression"
												},
												"paymentLimitDate": {
													"value": "@concat('''', pipeline().parameters.paymentLimitDate, '''')",
													"type": "Expression"
												},
												"paymentDate": {
													"value": "@concat('''', pipeline().parameters.paymentDate, '''')",
													"type": "Expression"
												},
												"refund": {
													"value": "@concat('''', pipeline().parameters.refund, '''')",
													"type": "Expression"
												},
												"refunded": {
													"value": "@concat('''', pipeline().parameters.refunded, '''')",
													"type": "Expression"
												},
												"convention_label": {
													"value": "@concat('''', pipeline().parameters.convention_label, '''')",
													"type": "Expression"
												},
												"receiptCode": {
													"value": "@concat('''', pipeline().parameters.receiptCode, '''')",
													"type": "Expression"
												},
												"insertTimestamp": {
													"value": "@concat('''', pipeline().parameters.insertTimestamp, '''')",
													"type": "Expression"
												},
												"updateTimestamp": {
													"value": "@concat('''', pipeline().parameters.updateTimestamp, '''')",
													"type": "Expression"
												},
												"owner": {
													"value": "@concat('''', pipeline().parameters.owner, '''')",
													"type": "Expression"
												},
												"owner_text": {
													"value": "@concat('''', pipeline().parameters.owner_text, '''')",
													"type": "Expression"
												},
												"sessionId": {
													"value": "@concat('''', pipeline().parameters.sessionId, '''')",
													"type": "Expression"
												},
												"terminal_label": {
													"value": "@concat('''', pipeline().parameters.terminal_label, '''')",
													"type": "Expression"
												},
												"terminalGroup_label": {
													"value": "@concat('''', pipeline().parameters.terminalGroup_label, '''')",
													"type": "Expression"
												},
												"gateway_guid": {
													"value": "@concat('''', pipeline().parameters.gateway_guid, '''')",
													"type": "Expression"
												},
												"gateway_label": {
													"value": "@concat('''', pipeline().parameters.gateway_label, '''')",
													"type": "Expression"
												},
												"transactionID": {
													"value": "@concat('''', pipeline().parameters.transactionID, '''')",
													"type": "Expression"
												},
												"bankAccount_guid": {
													"value": "@concat('''', pipeline().parameters.bankAccount_guid, '''')",
													"type": "Expression"
												},
												"bankAccount_label": {
													"value": "@concat('''', pipeline().parameters.bankAccount_label, '''')",
													"type": "Expression"
												},
												"channel_guid": {
													"value": "@concat('''', pipeline().parameters.channel_guid, '''')",
													"type": "Expression"
												},
												"channel_label": {
													"value": "@concat('''', pipeline().parameters.channel_label, '''')",
													"type": "Expression"
												},
												"channelType": {
													"value": "@concat('''', pipeline().parameters.channelType, '''')",
													"type": "Expression"
												},
												"detail_guid": {
													"value": "@concat('''', pipeline().parameters.detail_guid, '''')",
													"type": "Expression"
												},
												"extra_guid": {
													"value": "@concat('''', pipeline().parameters.extra_guid, '''')",
													"type": "Expression"
												},
												"priceList": {
													"value": "@concat('''', pipeline().parameters.priceList, '''')",
													"type": "Expression"
												},
												"event": {
													"value": "@concat('''', pipeline().parameters.event, '''')",
													"type": "Expression"
												},
												"detailType": {
													"value": "@concat('''', pipeline().parameters.detailType, '''')",
													"type": "Expression"
												},
												"detail_text": {
													"value": "@concat('''', pipeline().parameters.detail_text, '''')",
													"type": "Expression"
												},
												"detail_label": {
													"value": "@concat('''', pipeline().parameters.detail_label, '''')",
													"type": "Expression"
												},
												"detail_count": {
													"value": "pipeline().parameters.detail_count",
													"type": "Expression"
												},
												"paymentDetail_guid": {
													"value": "@concat('''', pipeline().parameters.paymentDetail_guid, '''')",
													"type": "Expression"
												},
												"detail_payingPartecipants": {
													"value": "pipeline().parameters.detail_payingPartecipants",
													"type": "Expression"
												},
												"detail_quantity": {
													"value": "pipeline().parameters.detail_quantity",
													"type": "Expression"
												},
												"tickets_quantity": {
													"value": "pipeline().parameters.tickets_quantity",
													"type": "Expression"
												},
												"pax_quantity": {
													"value": "pipeline().parameters.pax_quantity",
													"type": "Expression"
												},
												"costCenter_guid": {
													"value": "@concat('''', pipeline().parameters.costCenter_guid, '''')",
													"type": "Expression"
												},
												"costCenter_label": {
													"value": "@concat('''', pipeline().parameters.costCenter_label, '''')",
													"type": "Expression"
												},
												"object_receipt": {
													"value": "pipeline().parameters.object_receipt",
													"type": "Expression"
												},
												"object_taxCode": {
													"value": "@concat('''', pipeline().parameters.object_taxCode, '''')",
													"type": "Expression"
												},
												"object_taxNotes": {
													"value": "@concat('''', pipeline().parameters.object_taxNotes, '''')",
													"type": "Expression"
												},
												"object_amount": {
													"value": "pipeline().parameters.object_amount",
													"type": "Expression"
												},
												"object_taxPercentage": {
													"value": "pipeline().parameters.object_taxPercentage",
													"type": "Expression"
												},
												"amount": {
													"value": "pipeline().parameters.amount",
													"type": "Expression"
												},
												"amountNet": {
													"value": "pipeline().parameters.amountNet",
													"type": "Expression"
												},
												"amountPresale": {
													"value": "pipeline().parameters.amountPresale",
													"type": "Expression"
												},
												"amountSold": {
													"value": "pipeline().parameters.amountSold",
													"type": "Expression"
												},
												"amountPayed": {
													"value": "pipeline().parameters.amountPayed",
													"type": "Expression"
												},
												"amountPending": {
													"value": "pipeline().parameters.amountPending",
													"type": "Expression"
												},
												"amountCanceled": {
													"value": "pipeline().parameters.amountCanceled",
													"type": "Expression"
												},
												"externalId": {
													"value": "@concat('''', pipeline().parameters.externalId, '''')",
													"type": "Expression"
												},
												"amountRefunded": {
													"value": "pipeline().parameters.amountRefunded",
													"type": "Expression"
												},
												"invoiceSummary": {
													"value": "@concat('''', pipeline().parameters.invoiceSummary, '''')",
													"type": "Expression"
												},
												"eventCalendar_guid": {
													"value": "@concat('''', pipeline().parameters.eventCalendar_guid, '''')",
													"type": "Expression"
												},
												"passDetail_guid": {
													"value": "@concat('''', pipeline().parameters.passDetail_guid, '''')",
													"type": "Expression"
												},
												"paymentCostCenter_guid": {
													"value": "@concat('''', pipeline().parameters.paymentCostCenter_guid, '''')",
													"type": "Expression"
												},
												"organization_guid": {
													"value": "@concat('''', pipeline().parameters.organization_guid, '''')",
													"type": "Expression"
												},
												"venue_guid": {
													"value": "@concat('''', pipeline().parameters.venue_guid, '''')",
													"type": "Expression"
												},
												"olapUpdateTimestamp": {
													"value": "@concat('''', pipeline().parameters.olapUpdateTimestamp, '''')",
													"type": "Expression"
												},
												"row_id": {
													"value": "@concat('''', pipeline().parameters.row_id, '''')",
													"type": "Expression"
												},
												"operationType": {
													"value": "@concat('''', pipeline().parameters.operationType, '''')",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"DummySource": {},
												"SinkHistorical": {
													"folderPath": "@pipeline().parameters.targetFolderPath",
													"fileName": "@pipeline().parameters.targetFileName"
												}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Append To Existing Historical",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "VFD_DFL_Mida2_Atomic_APPEND_Historical",
											"type": "DataFlowReference",
											"parameters": {
												"guid_pk": {
													"value": "@concat('''', pipeline().parameters.guid_pk, '''')",
													"type": "Expression"
												},
												"reservation_progressiveCode": {
													"value": "@concat('''', pipeline().parameters.reservation_progressiveCode, '''')",
													"type": "Expression"
												},
												"reservation_code": {
													"value": "@concat('''', pipeline().parameters.reservation_code, '''')",
													"type": "Expression"
												},
												"reservation_status": {
													"value": "pipeline().parameters.reservation_status",
													"type": "Expression"
												},
												"invoiceRequired": {
													"value": "@concat('''', pipeline().parameters.invoiceRequired, '''')",
													"type": "Expression"
												},
												"customer": {
													"value": "pipeline().parameters.customer",
													"type": "Expression"
												},
												"visitDate": {
													"value": "@concat('''', pipeline().parameters.visitDate, '''')",
													"type": "Expression"
												},
												"reservationPayment_guid": {
													"value": "@concat('''', pipeline().parameters.reservationPayment_guid, '''')",
													"type": "Expression"
												},
												"parentPayment_guid": {
													"value": "@concat('''', pipeline().parameters.parentPayment_guid, '''')",
													"type": "Expression"
												},
												"sliced": {
													"value": "@concat('''', pipeline().parameters.sliced, '''')",
													"type": "Expression"
												},
												"reservation_guid": {
													"value": "@concat('''', pipeline().parameters.reservation_guid, '''')",
													"type": "Expression"
												},
												"group_guid": {
													"value": "@concat('''', pipeline().parameters.group_guid, '''')",
													"type": "Expression"
												},
												"group_label": {
													"value": "@concat('''', pipeline().parameters.group_label, '''')",
													"type": "Expression"
												},
												"group_email": {
													"value": "@concat('''', pipeline().parameters.group_email, '''')",
													"type": "Expression"
												},
												"paymentCode": {
													"value": "@concat('''', pipeline().parameters.paymentCode, '''')",
													"type": "Expression"
												},
												"paymentCondition": {
													"value": "pipeline().parameters.paymentCondition",
													"type": "Expression"
												},
												"reservation_amount": {
													"value": "pipeline().parameters.reservation_amount",
													"type": "Expression"
												},
												"reservation_amountTax": {
													"value": "pipeline().parameters.reservation_amountTax",
													"type": "Expression"
												},
												"status": {
													"value": "pipeline().parameters.status",
													"type": "Expression"
												},
												"status_text": {
													"value": "@concat('''', pipeline().parameters.status_text, '''')",
													"type": "Expression"
												},
												"stamp": {
													"value": "@concat('''', pipeline().parameters.stamp, '''')",
													"type": "Expression"
												},
												"notes": {
													"value": "@concat('''', pipeline().parameters.notes, '''')",
													"type": "Expression"
												},
												"transactionType": {
													"value": "@concat('''', pipeline().parameters.transactionType, '''')",
													"type": "Expression"
												},
												"transactionType_text": {
													"value": "@concat('''', pipeline().parameters.transactionType_text, '''')",
													"type": "Expression"
												},
												"paymentLimitDate": {
													"value": "@concat('''', pipeline().parameters.paymentLimitDate, '''')",
													"type": "Expression"
												},
												"paymentDate": {
													"value": "@concat('''', pipeline().parameters.paymentDate, '''')",
													"type": "Expression"
												},
												"refund": {
													"value": "@concat('''', pipeline().parameters.refund, '''')",
													"type": "Expression"
												},
												"refunded": {
													"value": "@concat('''', pipeline().parameters.refunded, '''')",
													"type": "Expression"
												},
												"convention_label": {
													"value": "@concat('''', pipeline().parameters.convention_label, '''')",
													"type": "Expression"
												},
												"receiptCode": {
													"value": "@concat('''', pipeline().parameters.receiptCode, '''')",
													"type": "Expression"
												},
												"insertTimestamp": {
													"value": "@concat('''', pipeline().parameters.insertTimestamp, '''')",
													"type": "Expression"
												},
												"updateTimestamp": {
													"value": "@concat('''', pipeline().parameters.updateTimestamp, '''')",
													"type": "Expression"
												},
												"owner": {
													"value": "@concat('''', pipeline().parameters.owner, '''')",
													"type": "Expression"
												},
												"owner_text": {
													"value": "@concat('''', pipeline().parameters.owner_text, '''')",
													"type": "Expression"
												},
												"sessionId": {
													"value": "@concat('''', pipeline().parameters.sessionId, '''')",
													"type": "Expression"
												},
												"terminal_label": {
													"value": "@concat('''', pipeline().parameters.terminal_label, '''')",
													"type": "Expression"
												},
												"terminalGroup_label": {
													"value": "@concat('''', pipeline().parameters.terminalGroup_label, '''')",
													"type": "Expression"
												},
												"gateway_guid": {
													"value": "@concat('''', pipeline().parameters.gateway_guid, '''')",
													"type": "Expression"
												},
												"gateway_label": {
													"value": "@concat('''', pipeline().parameters.gateway_label, '''')",
													"type": "Expression"
												},
												"transactionID": {
													"value": "@concat('''', pipeline().parameters.transactionID, '''')",
													"type": "Expression"
												},
												"bankAccount_guid": {
													"value": "@concat('''', pipeline().parameters.bankAccount_guid, '''')",
													"type": "Expression"
												},
												"bankAccount_label": {
													"value": "@concat('''', pipeline().parameters.bankAccount_label, '''')",
													"type": "Expression"
												},
												"channel_guid": {
													"value": "@concat('''', pipeline().parameters.channel_guid, '''')",
													"type": "Expression"
												},
												"channel_label": {
													"value": "@concat('''', pipeline().parameters.channel_label, '''')",
													"type": "Expression"
												},
												"channelType": {
													"value": "@concat('''', pipeline().parameters.channelType, '''')",
													"type": "Expression"
												},
												"detail_guid": {
													"value": "@concat('''', pipeline().parameters.detail_guid, '''')",
													"type": "Expression"
												},
												"extra_guid": {
													"value": "@concat('''', pipeline().parameters.extra_guid, '''')",
													"type": "Expression"
												},
												"priceList": {
													"value": "@concat('''', pipeline().parameters.priceList, '''')",
													"type": "Expression"
												},
												"event": {
													"value": "@concat('''', pipeline().parameters.event, '''')",
													"type": "Expression"
												},
												"detailType": {
													"value": "@concat('''', pipeline().parameters.detailType, '''')",
													"type": "Expression"
												},
												"detail_text": {
													"value": "@concat('''', pipeline().parameters.detail_text, '''')",
													"type": "Expression"
												},
												"detail_label": {
													"value": "@concat('''', pipeline().parameters.detail_label, '''')",
													"type": "Expression"
												},
												"detail_count": {
													"value": "pipeline().parameters.detail_count",
													"type": "Expression"
												},
												"paymentDetail_guid": {
													"value": "@concat('''', pipeline().parameters.paymentDetail_guid, '''')",
													"type": "Expression"
												},
												"detail_payingPartecipants": {
													"value": "pipeline().parameters.detail_payingPartecipants",
													"type": "Expression"
												},
												"detail_quantity": {
													"value": "pipeline().parameters.detail_quantity",
													"type": "Expression"
												},
												"tickets_quantity": {
													"value": "pipeline().parameters.tickets_quantity",
													"type": "Expression"
												},
												"pax_quantity": {
													"value": "pipeline().parameters.pax_quantity",
													"type": "Expression"
												},
												"costCenter_guid": {
													"value": "@concat('''', pipeline().parameters.costCenter_guid, '''')",
													"type": "Expression"
												},
												"costCenter_label": {
													"value": "@concat('''', pipeline().parameters.costCenter_label, '''')",
													"type": "Expression"
												},
												"object_receipt": {
													"value": "pipeline().parameters.object_receipt",
													"type": "Expression"
												},
												"object_taxCode": {
													"value": "@concat('''', pipeline().parameters.object_taxCode, '''')",
													"type": "Expression"
												},
												"object_taxNotes": {
													"value": "@concat('''', pipeline().parameters.object_taxNotes, '''')",
													"type": "Expression"
												},
												"object_amount": {
													"value": "pipeline().parameters.object_amount",
													"type": "Expression"
												},
												"object_taxPercentage": {
													"value": "pipeline().parameters.object_taxPercentage",
													"type": "Expression"
												},
												"amount": {
													"value": "pipeline().parameters.amount",
													"type": "Expression"
												},
												"amountNet": {
													"value": "pipeline().parameters.amountNet",
													"type": "Expression"
												},
												"amountPresale": {
													"value": "pipeline().parameters.amountPresale",
													"type": "Expression"
												},
												"amountSold": {
													"value": "pipeline().parameters.amountSold",
													"type": "Expression"
												},
												"amountPayed": {
													"value": "pipeline().parameters.amountPayed",
													"type": "Expression"
												},
												"amountPending": {
													"value": "pipeline().parameters.amountPending",
													"type": "Expression"
												},
												"amountCanceled": {
													"value": "pipeline().parameters.amountCanceled",
													"type": "Expression"
												},
												"externalId": {
													"value": "@concat('''', pipeline().parameters.externalId, '''')",
													"type": "Expression"
												},
												"amountRefunded": {
													"value": "pipeline().parameters.amountRefunded",
													"type": "Expression"
												},
												"invoiceSummary": {
													"value": "@concat('''', pipeline().parameters.invoiceSummary, '''')",
													"type": "Expression"
												},
												"eventCalendar_guid": {
													"value": "@concat('''', pipeline().parameters.eventCalendar_guid, '''')",
													"type": "Expression"
												},
												"passDetail_guid": {
													"value": "@concat('''', pipeline().parameters.passDetail_guid, '''')",
													"type": "Expression"
												},
												"paymentCostCenter_guid": {
													"value": "@concat('''', pipeline().parameters.paymentCostCenter_guid, '''')",
													"type": "Expression"
												},
												"organization_guid": {
													"value": "@concat('''', pipeline().parameters.organization_guid, '''')",
													"type": "Expression"
												},
												"venue_guid": {
													"value": "@concat('''', pipeline().parameters.venue_guid, '''')",
													"type": "Expression"
												},
												"olapUpdateTimestamp": {
													"value": "@concat('''', pipeline().parameters.olapUpdateTimestamp, '''')",
													"type": "Expression"
												},
												"row_id": {
													"value": "@concat('''', pipeline().parameters.row_id, '''')",
													"type": "Expression"
												},
												"operationType": {
													"value": "@concat('''', pipeline().parameters.operationType, '''')",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"DummySource": {},
												"SourceExistingHistorical": {
													"folderPath": "@pipeline().parameters.targetFolderPath",
													"fileName": "@pipeline().parameters.targetFileName"
												},
												"SinkTemp": {
													"folderPath": "@pipeline().parameters.tempFolderPath",
													"fileName": "@pipeline().parameters.tempFileName"
												}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								},
								{
									"name": "Copy Temp To Final",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Append To Existing Historical",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": false,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": "@pipeline().parameters.tempFolderPath",
												"fileName": "@pipeline().parameters.tempFileName"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "VFD_DS_Curated_Mida_Historical_Parquet",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": "@pipeline().parameters.targetFolderPath",
												"fileName": "@pipeline().parameters.targetFileName"
											}
										}
									]
								},
								{
									"name": "Delete Temp File",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Copy Temp To Final",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": "@pipeline().parameters.tempFolderPath",
												"fileName": "@pipeline().parameters.tempFileName"
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": false,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"guid_pk": {
						"type": "string"
					},
					"reservation_progressiveCode": {
						"type": "string"
					},
					"reservation_code": {
						"type": "string"
					},
					"reservation_status": {
						"type": "int"
					},
					"invoiceRequired": {
						"type": "string"
					},
					"customer": {
						"type": "float"
					},
					"visitDate": {
						"type": "string"
					},
					"reservationPayment_guid": {
						"type": "string"
					},
					"parentPayment_guid": {
						"type": "string"
					},
					"sliced": {
						"type": "string"
					},
					"reservation_guid": {
						"type": "string"
					},
					"group_guid": {
						"type": "string"
					},
					"group_label": {
						"type": "string"
					},
					"group_email": {
						"type": "string"
					},
					"paymentCode": {
						"type": "string"
					},
					"paymentCondition": {
						"type": "float"
					},
					"reservation_amount": {
						"type": "float"
					},
					"reservation_amountTax": {
						"type": "float"
					},
					"status": {
						"type": "int"
					},
					"status_text": {
						"type": "string"
					},
					"stamp": {
						"type": "string"
					},
					"notes": {
						"type": "string"
					},
					"transactionType": {
						"type": "string"
					},
					"transactionType_text": {
						"type": "string"
					},
					"paymentLimitDate": {
						"type": "string"
					},
					"paymentDate": {
						"type": "string"
					},
					"refund": {
						"type": "string"
					},
					"refunded": {
						"type": "string"
					},
					"convention_label": {
						"type": "string"
					},
					"receiptCode": {
						"type": "string"
					},
					"insertTimestamp": {
						"type": "string"
					},
					"updateTimestamp": {
						"type": "string"
					},
					"owner": {
						"type": "string"
					},
					"owner_text": {
						"type": "string"
					},
					"sessionId": {
						"type": "string"
					},
					"terminal_label": {
						"type": "string"
					},
					"terminalGroup_label": {
						"type": "string"
					},
					"gateway_guid": {
						"type": "string"
					},
					"gateway_label": {
						"type": "string"
					},
					"transactionID": {
						"type": "string"
					},
					"bankAccount_guid": {
						"type": "string"
					},
					"bankAccount_label": {
						"type": "string"
					},
					"channel_guid": {
						"type": "string"
					},
					"channel_label": {
						"type": "string"
					},
					"channelType": {
						"type": "string"
					},
					"detail_guid": {
						"type": "string"
					},
					"extra_guid": {
						"type": "string"
					},
					"priceList": {
						"type": "string"
					},
					"event": {
						"type": "string"
					},
					"detailType": {
						"type": "string"
					},
					"detail_text": {
						"type": "string"
					},
					"detail_label": {
						"type": "string"
					},
					"detail_count": {
						"type": "int"
					},
					"paymentDetail_guid": {
						"type": "string"
					},
					"detail_payingPartecipants": {
						"type": "int"
					},
					"detail_quantity": {
						"type": "int"
					},
					"tickets_quantity": {
						"type": "int"
					},
					"pax_quantity": {
						"type": "int"
					},
					"costCenter_guid": {
						"type": "string"
					},
					"costCenter_label": {
						"type": "string"
					},
					"object_receipt": {
						"type": "int"
					},
					"object_taxCode": {
						"type": "string"
					},
					"object_taxNotes": {
						"type": "string"
					},
					"object_amount": {
						"type": "float"
					},
					"object_taxPercentage": {
						"type": "float"
					},
					"amount": {
						"type": "float"
					},
					"amountNet": {
						"type": "float"
					},
					"amountPresale": {
						"type": "float"
					},
					"amountSold": {
						"type": "float"
					},
					"amountPayed": {
						"type": "float"
					},
					"amountPending": {
						"type": "float"
					},
					"amountCanceled": {
						"type": "float"
					},
					"externalId": {
						"type": "string"
					},
					"amountRefunded": {
						"type": "float"
					},
					"invoiceSummary": {
						"type": "string"
					},
					"eventCalendar_guid": {
						"type": "string"
					},
					"passDetail_guid": {
						"type": "string"
					},
					"paymentCostCenter_guid": {
						"type": "string"
					},
					"organization_guid": {
						"type": "string"
					},
					"venue_guid": {
						"type": "string"
					},
					"olapUpdateTimestamp": {
						"type": "string"
					},
					"row_id": {
						"type": "string"
					},
					"operationType": {
						"type": "string"
					},
					"targetFolderPath": {
						"type": "string"
					},
					"targetFileName": {
						"type": "string"
					},
					"tempFolderPath": {
						"type": "string"
					},
					"tempFileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"annotations": [
					"Pipeline atomica per append a historical con audit trail",
					"Sintassi corretta uniforme per CREATE e APPEND dataflow",
					"Tutti gli 83 parametri con mappatura corretta"
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Mida2_Atomic_LOOKUP_Summary')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline atomica per cercare record nel file summary usando row_id",
				"activities": [
					{
						"name": "Lookup Summary Record",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_Mida2_Atomic_LOOKUP_Summary",
								"type": "DataFlowReference",
								"parameters": {
									"row_id": {
										"value": "@concat('''', pipeline().parameters.row_id, '''')",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SourceSummaryFile": {
										"folderPath": "@pipeline().parameters.sourceFolderPath",
										"fileName": "@pipeline().parameters.sourceFileName"
									},
									"SinkTemp": {
										"folderPath": "@pipeline().parameters.outputFolderPath",
										"fileName": "@pipeline().parameters.outputFileName"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Check If Record Found",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Lookup Summary Record",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "@pipeline().parameters.outputFolderPath",
									"fileName": "@pipeline().parameters.outputFileName"
								}
							},
							"fieldList": [
								"exists",
								"size"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Set Output Variable",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Check If Record Found",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "recordFound",
							"value": {
								"value": "@if(greater(activity('Check If Record Found').output.size, 0), true, false)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Record Found Copy Fields",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set Output Variable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('recordFound')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Set Summary Fields",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "summaryFields",
										"value": {
											"value": "@concat('Record found for row_id: ', pipeline().parameters.row_id)",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"row_id": {
						"type": "string"
					},
					"sourceFolderPath": {
						"type": "string"
					},
					"sourceFileName": {
						"type": "string"
					},
					"outputFolderPath": {
						"type": "string"
					},
					"outputFileName": {
						"type": "string"
					}
				},
				"variables": {
					"recordFound": {
						"type": "Boolean",
						"defaultValue": false
					},
					"summaryFields": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"annotations": [
					"Pipeline per lookup in summary",
					"Cerca record per row_id nei file summary",
					"Sintassi corretta per parametri dataflow"
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Mida2_Atomic_LOOKUP_Historical')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline atomica per cercare record nel file historical usando row_id",
				"activities": [
					{
						"name": "Lookup Historical Record",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_Mida2_Atomic_LOOKUP_Historical",
								"type": "DataFlowReference",
								"parameters": {
									"row_id": {
										"value": "@concat('''', pipeline().parameters.row_id, '''')",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SourceHistorical": {
										"folderPath": "@pipeline().parameters.sourceFolderPath",
										"fileName": "@pipeline().parameters.sourceFileName"
									},
									"SinkTemp": {
										"folderPath": "@pipeline().parameters.outputFolderPath",
										"fileName": "@pipeline().parameters.outputFileName"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Check If Record Found",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Lookup Historical Record",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "@pipeline().parameters.outputFolderPath",
									"fileName": "@pipeline().parameters.outputFileName"
								}
							},
							"fieldList": [
								"exists",
								"size"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Set Output Variable",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Check If Record Found",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "recordFound",
							"value": {
								"value": "@if(greater(activity('Check If Record Found').output.size, 0), true, false)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"row_id": {
						"type": "string"
					},
					"sourceFolderPath": {
						"type": "string"
					},
					"sourceFileName": {
						"type": "string"
					},
					"outputFolderPath": {
						"type": "string"
					},
					"outputFileName": {
						"type": "string"
					}
				},
				"variables": {
					"recordFound": {
						"type": "Boolean",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"annotations": [
					"Pipeline per lookup in historical",
					"Cerca record per row_id e salva risultato in file temp",
					"Sintassi corretta per parametri dataflow"
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Affluences_Historical_Recovery')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline per il recupero storico dei dati Affluences dall'1 novembre 2024 al 15 maggio 2025",
				"activities": [
					{
						"name": "SetStartDate",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "currentDate",
							"value": {
								"value": "@formatDateTime('2025-06-07', 'yyyy-MM-dd')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetEndDate",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "endDate",
							"value": {
								"value": "@formatDateTime('2025-06-09', 'yyyy-MM-dd')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ProcessUntilEndDate",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "SetStartDate",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetEndDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(variables('currentDate'), variables('endDate'))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "ExecuteDailyPipeline",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "VFD_PL_Affluences_Daily_v2",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"date": {
												"value": "@variables('currentDate')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "CalculateNextDate",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "ExecuteDailyPipeline",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "tempDate",
										"value": {
											"value": "@formatDateTime(addDays(variables('currentDate'), 1), 'yyyy-MM-dd')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "UpdateCurrentDate",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "CalculateNextDate",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "currentDate",
										"value": {
											"value": "@variables('tempDate')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "WaitForCooldown",
									"type": "Wait",
									"dependsOn": [
										{
											"activity": "UpdateCurrentDate",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 10
									}
								}
							],
							"timeout": "7.00:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"currentDate": {
						"type": "String"
					},
					"endDate": {
						"type": "String"
					},
					"tempDate": {
						"type": "String"
					},
					"progressMessage": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Affluences"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_DuomoWiFi_Daily')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline wrapper per esecuzione giornaliera automatica - usa SEMPRE la data di ieri",
				"activities": [
					{
						"name": "Set_Yesterday_Date",
						"description": "Imposta la data di ieri per entrambi i parametri",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "yesterday_date",
							"value": {
								"value": "@formatDateTime(addDays(utcNow(), -1), 'yyyy-MM-dd')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute_WiFi_Extract_Transform",
						"description": "Esegue la pipeline principale con la data di ieri",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Set_Yesterday_Date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "VFD_PL_DuomoWiFi_Extract_Transform",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"p_dateStart": {
									"value": "@variables('yesterday_date')",
									"type": "Expression"
								},
								"p_dateStop": {
									"value": "@variables('yesterday_date')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"yesterday_date": {
						"type": "String"
					}
				},
				"folder": {
					"name": "WiFi"
				},
				"annotations": [
					"Daily Execution",
					"Wrapper Pipeline",
					"No Parameters"
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_DuomoWiFi_Reprocessing')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SetFirstDate",
						"description": "Imposta per la prima volta la currentDate in base a startDate",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "currentDate",
							"value": {
								"value": "@formatDateTime(pipeline().parameters.startDate, 'yyyy-MM-dd')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "RepeatUntilEndDate",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "SetFirstDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(variables('currentDate'),pipeline().parameters.endDate)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "ProcessCurrentDate",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "VFD_PL_DuomoWiFi_Extract_Transform",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"p_dateStart": {
												"value": "@variables('currentDate')",
												"type": "Expression"
											},
											"p_dateStop": {
												"value": "@variables('currentDate')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "CalculateNextDate",
									"description": "Usa una variabile temp per calcolare il valore di currentDate + 1",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "ProcessCurrentDate",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nextDate",
										"value": {
											"value": "@formatDateTime(addDays(variables('currentDate'), 1), 'yyyy-MM-dd')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetCurrentDate",
									"description": "Imposta il valore di currentDate con nextDate",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "CalculateNextDate",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "currentDate",
										"value": {
											"value": "@variables('nextDate')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "WaitForCooldown",
									"type": "Wait",
									"dependsOn": [
										{
											"activity": "SetCurrentDate",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 10
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"startDate": {
						"type": "string"
					},
					"endDate": {
						"type": "string"
					}
				},
				"variables": {
					"currentDate": {
						"type": "String"
					},
					"nextDate": {
						"type": "String"
					}
				},
				"folder": {
					"name": "WiFi"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Mida_Seals_FTP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline per acquisire i dati di emissioni biglietti (Seals) da FTP a Data Lake",
				"activities": [
					{
						"name": "ListFTPFiles",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Mida_Seals_FTPServer_Folder",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "FtpReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false,
								"useBinaryTransfer": true,
								"disableChunking": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ForEachFTPFile",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ListFTPFiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListFTPFiles').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetFileName",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileName",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetYear",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetFileName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "year",
										"value": {
											"value": "@substring(item().name, 25, 4)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetMonth",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetYear",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "month",
										"value": {
											"value": "@substring(item().name, 29, 2)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetDay",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetMonth",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "day",
										"value": {
											"value": "@substring(item().name, 31, 2)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetFolderPathVar",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetDay",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "folderPathVar",
										"value": {
											"value": "@concat('Mida/Seals/', variables('year'), '/', variables('month'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "CheckIfExistsOnADLS",
									"type": "GetMetadata",
									"dependsOn": [
										{
											"activity": "SetFolderPathVar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "VFD_DS_Raw_Mida_Seals_Excel",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": {
													"value": "@variables('folderPathVar')",
													"type": "Expression"
												},
												"fileName": {
													"value": "@variables('fileName')",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "IfNotExists",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "CheckIfExistsOnADLS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(activity('CheckIfExistsOnADLS').output.exists)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "CopyFromFTP",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "FtpReadSettings",
															"recursive": true,
															"useBinaryTransfer": true,
															"disableChunking": false
														},
														"formatSettings": {
															"type": "BinaryReadSettings"
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "VFD_DS_Mida_Seals_FTPServer_Binary",
														"type": "DatasetReference",
														"parameters": {
															"fileName": {
																"value": "@variables('fileName')",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "VFD_DS_Raw_Mida_Seals_Binary",
														"type": "DatasetReference",
														"parameters": {
															"folderPath": {
																"value": "@variables('folderPathVar')",
																"type": "Expression"
															},
															"fileName": "@variables('fileName')"
														}
													}
												]
											},
											{
												"name": "Raw to Curated Pipeline",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "CopyFromFTP",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "VFD_PL_Mida_Seals_Raw_Curated",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"folderPath": {
															"value": "@variables('folderPathVar')",
															"type": "Expression"
														},
														"fileName": {
															"value": "@variables('fileName')",
															"type": "Expression"
														},
														"year": {
															"value": "@variables('year')",
															"type": "Expression"
														},
														"month": {
															"value": "@variables('month')",
															"type": "Expression"
														},
														"day": {
															"value": "@variables('day')",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"fileName": {
						"type": "String"
					},
					"year": {
						"type": "String"
					},
					"month": {
						"type": "String"
					},
					"folderPathVar": {
						"type": "String"
					},
					"day": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Mida/Seals"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Mida_Validations_FTP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline per acquisire i dati di vidimazioni (Validations) da FTP a Data Lake",
				"activities": [
					{
						"name": "ListFTPFiles",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Mida_Validations_FTPServer_Folder",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "FtpReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false,
								"useBinaryTransfer": true,
								"disableChunking": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ForEachFTPFile",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ListFTPFiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListFTPFiles').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetFileName",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileName",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetYear",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetFileName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "year",
										"value": {
											"value": "@substring(item().name, 27, 4)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetMonth",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetYear",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "month",
										"value": {
											"value": "@substring(item().name, 31, 2)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetDay",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetMonth",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "day",
										"value": {
											"value": "@substring(item().name, 33, 2)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetFolderPathVar",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetDay",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "folderPathVar",
										"value": {
											"value": "@concat('Mida/Validations/', variables('year'), '/', variables('month'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "CheckIfExistsOnADLS",
									"type": "GetMetadata",
									"dependsOn": [
										{
											"activity": "SetFolderPathVar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "VFD_DS_Raw_Mida_Validations_Excel",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": {
													"value": "@variables('folderPathVar')",
													"type": "Expression"
												},
												"fileName": {
													"value": "@variables('fileName')",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "IfNotExists",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "CheckIfExistsOnADLS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(activity('CheckIfExistsOnADLS').output.exists)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "CopyFromFTP",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "FtpReadSettings",
															"recursive": true,
															"useBinaryTransfer": true,
															"disableChunking": false
														},
														"formatSettings": {
															"type": "BinaryReadSettings"
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "VFD_DS_Mida_Validations_FTPServer_Binary",
														"type": "DatasetReference",
														"parameters": {
															"fileName": {
																"value": "@variables('fileName')",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "VFD_DS_Raw_Mida_Validations_Binary",
														"type": "DatasetReference",
														"parameters": {
															"folderPath": {
																"value": "@variables('folderPathVar')",
																"type": "Expression"
															},
															"fileName": {
																"value": "@variables('fileName')",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "Raw to Curated Pipeline",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "CopyFromFTP",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "VFD_PL_Mida_Validations_Raw_Curated",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"folderPath": {
															"value": "@variables('folderPathVar')",
															"type": "Expression"
														},
														"fileName": {
															"value": "@variables('fileName')",
															"type": "Expression"
														},
														"year": {
															"value": "@variables('year')",
															"type": "Expression"
														},
														"month": {
															"value": "@variables('month')",
															"type": "Expression"
														},
														"day": {
															"value": "@variables('day')",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"fileName": {
						"type": "String"
					},
					"year": {
						"type": "String"
					},
					"month": {
						"type": "String"
					},
					"folderPathVar": {
						"type": "String"
					},
					"day": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Mida/Validations"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Weather_API_Daily')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline per acquisire dati meteo da Visual Crossing API e processarli",
				"activities": [
					{
						"name": "SetDataInizio",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "data_inizio",
							"value": {
								"value": "@coalesce(pipeline().parameters.data_inizio, formatDateTime(addDays(utcNow(), -1), 'yyyy-MM-dd'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetDataFine",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "data_fine",
							"value": {
								"value": "@coalesce(pipeline().parameters.data_fine, formatDateTime(addDays(utcNow(), -1), 'yyyy-MM-dd'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetLocation",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "location",
							"value": {
								"value": "@coalesce(pipeline().parameters.location, 'Milano')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetYear",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetDataInizio",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "year",
							"value": {
								"value": "@substring(variables('data_inizio'), 0, 4)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetMonth",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetYear",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "month",
							"value": {
								"value": "@substring(variables('data_inizio'), 5, 2)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetFolderPath",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetMonth",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "folderPath",
							"value": {
								"value": "@concat('Weather/', variables('year'), '/', variables('month'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetFileName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetDataFine",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetFolderPath",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileName",
							"value": {
								"value": "@concat('weather_', replace(variables('data_inizio'), '-', ''), '_', replace(variables('data_fine'), '-', ''), '.csv')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CheckIfExistsInRaw",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "SetFileName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Raw_Weather_CSV",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@variables('folderPath')",
										"type": "Expression"
									},
									"fileName": {
										"value": "@variables('fileName')",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "IfNotExistsInRaw",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckIfExistsInRaw",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(activity('CheckIfExistsInRaw').output.exists)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "CopyFromAPI",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET"
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".csv"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "VFD_DS_VisualCrossing_HTTP_CSV",
											"type": "DatasetReference",
											"parameters": {
												"data_inizio": "@variables('data_inizio')",
												"data_fine": "@variables('data_fine')",
												"location": "@variables('location')"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "VFD_DS_Raw_Weather_CSV",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": {
													"value": "@variables('folderPath')",
													"type": "Expression"
												},
												"fileName": {
													"value": "@variables('fileName')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Raw to Curated Pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "IfNotExistsInRaw",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "VFD_PL_Weather_Raw_Curated",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"folderPath": {
									"value": "@variables('folderPath')",
									"type": "Expression"
								},
								"fileName": {
									"value": "@variables('fileName')",
									"type": "Expression"
								},
								"year": {
									"value": "@variables('year')",
									"type": "Expression"
								},
								"month": {
									"value": "@variables('month')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"data_inizio": {
						"type": "String"
					},
					"data_fine": {
						"type": "String"
					},
					"location": {
						"type": "String",
						"defaultValue": "Milano"
					}
				},
				"variables": {
					"data_inizio": {
						"type": "String"
					},
					"data_fine": {
						"type": "String"
					},
					"location": {
						"type": "String"
					},
					"year": {
						"type": "String"
					},
					"month": {
						"type": "String"
					},
					"folderPath": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Visual Crossing/Weather"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_TRG_Affluences_Daily')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "VFD_PL_Affluences_Daily_v2",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2025-06-11T06:00:00",
						"timeZone": "W. Europe Standard Time"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_TRG_Mida_Bookings_FTP_Schedule')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "VFD_PL_Mida",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2025-07-11T04:00:00",
						"timeZone": "W. Europe Standard Time"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_TRG_Weather_API_Daily')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "VFD_PL_Weather_API_Daily",
							"type": "PipelineReference"
						},
						"parameters": {
							"location": "[parameters('VFD_TRG_Weather_API_Daily_properties_VFD_PL_Weather_API_Daily_parameters_location')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2025-07-05T06:00:00",
						"timeZone": "W. Europe Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/VFD_PL_Weather_API_Daily')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_TRG_WiFi_Daily')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "VFD_PL_DuomoWiFi_Daily",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2025-07-11T16:00:00",
						"timeZone": "W. Europe Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								4
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/VFD_PL_DuomoWiFi_Daily')]"
			]
		}
	]
}