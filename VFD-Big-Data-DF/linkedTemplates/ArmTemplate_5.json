{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "VFD-Big-Data-DF"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Affluences_Daily_v2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline v2 per acquisire i dati giornalieri Affluences con architettura Raw->Processed->Curated",
				"activities": [
					{
						"name": "SetProcessDate",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "processDate",
							"value": {
								"value": "@if(empty(pipeline().parameters.date), formatDateTime(addDays(utcnow(), -1), 'yyyy-MM-dd'), pipeline().parameters.date)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetYear",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetProcessDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "year",
							"value": {
								"value": "@substring(variables('processDate'), 0, 4)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetMonth",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetYear",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "month",
							"value": {
								"value": "@substring(variables('processDate'), 5, 2)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetDateFormatted",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetMonth",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "dateFormatted",
							"value": {
								"value": "@replace(variables('processDate'), '-', '')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetYearMonth",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetDateFormatted",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "yearMonth",
							"value": {
								"value": "@concat(variables('year'), variables('month'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEachSite",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetYearMonth",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@createArray(json('{\"name\":\"Terrazze\",\"uuid\":\"5a2757bc-e1c6-4d5e-9db3-edfc4e9c9307\"}'), json('{\"name\":\"AscensoreNord\",\"uuid\":\"ca2dae61-4a99-4cb7-8051-26cb852ea408\"}'), json('{\"name\":\"AscensoreSud\",\"uuid\":\"aa6c22f1-84b6-441a-bbb0-bd429e63536d\"}'), json('{\"name\":\"SalitaPiedi\",\"uuid\":\"8358df5f-0186-4a11-87ad-11fc19cda749\"}'), json('{\"name\":\"DiscesaPiedi\",\"uuid\":\"639bc326-010a-402f-ba5f-3c75e2740d9d\"}'))",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "CallAPI",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 2,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET"
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "VFD_DS_Affluences_API",
											"type": "DatasetReference",
											"parameters": {
												"siteUUID": {
													"value": "@item().uuid",
													"type": "Expression"
												},
												"date": {
													"value": "@variables('processDate')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "VFD_DS_Raw_Affluences_JSON",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": {
													"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
													"type": "Expression"
												},
												"fileName": {
													"value": "@concat('VFD_Affluences_', variables('dateFormatted'), '_', item().uuid, '.json')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "TransformToProcessed",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ForEachSite",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_Affluences_JSON_to_Processed",
								"type": "DataFlowReference",
								"parameters": {
									"year": {
										"value": "'@{variables('year')}'",
										"type": "Expression"
									},
									"month": {
										"value": "'@{variables('month')}'",
										"type": "Expression"
									},
									"dateFormatted": {
										"value": "'@{variables('dateFormatted')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SourceJSON": {
										"folderPath": {
											"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
											"type": "Expression"
										},
										"fileName": {
											"value": "@concat('VFD_Affluences_', variables('dateFormatted'), '_*.json')",
											"type": "Expression"
										}
									},
									"SinkProcessed": {
										"folderPath": {
											"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
											"type": "Expression"
										},
										"fileName": "VFD_DFL_Affluences_JSON_to_Processed_output.parquet"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					},
					{
						"name": "CopyProcessedToFinal",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "TransformToProcessed",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Processed_Affluences_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_Affluences_JSON_to_Processed_output.parquet"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Processed_Affluences_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
										"type": "Expression"
									},
									"fileName": {
										"value": "@concat('VFD_Affluences_', variables('dateFormatted'), '.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "DeleteProcessedTemp",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "CopyProcessedToFinal",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Processed_Affluences_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_Affluences_JSON_to_Processed_output.parquet"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": false
							}
						}
					},
					{
						"name": "CreateCuratedDaily",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DeleteProcessedTemp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_Affluences_Daily_to_Curated",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceProcessed": {
										"folderPath": {
											"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
											"type": "Expression"
										},
										"fileName": {
											"value": "@concat('VFD_Affluences_', variables('dateFormatted'), '.parquet')",
											"type": "Expression"
										}
									},
									"SinkCuratedDaily": {
										"folderPath": {
											"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
											"type": "Expression"
										},
										"fileName": "VFD_DFL_Affluences_Daily_to_Curated_output.parquet"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					},
					{
						"name": "CopyCuratedDailyToFinal",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CreateCuratedDaily",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Curated_Affluences_Daily_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_Affluences_Daily_to_Curated_output.parquet"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Curated_Affluences_Daily_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
										"type": "Expression"
									},
									"fileName": {
										"value": "@concat('VFD_Affluences_Daily_', variables('dateFormatted'), '.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "DeleteCuratedDailyTemp",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "CopyCuratedDailyToFinal",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Curated_Affluences_Daily_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_Affluences_Daily_to_Curated_output.parquet"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": false
							}
						}
					},
					{
						"name": "UpdateMonthlyAggregation",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DeleteCuratedDailyTemp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_Affluences_Monthly_Aggregation",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceNewData": {
										"folderPath": {
											"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
											"type": "Expression"
										},
										"fileName": {
											"value": "@concat('VFD_Affluences_', variables('dateFormatted'), '.parquet')",
											"type": "Expression"
										}
									},
									"SourceExistingMonthly": {
										"folderPath": {
											"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
											"type": "Expression"
										},
										"fileName": {
											"value": "@concat('VFD_Affluences_Monthly_', variables('yearMonth'), '.parquet')",
											"type": "Expression"
										}
									},
									"SinkMonthly": {
										"folderPath": {
											"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
											"type": "Expression"
										},
										"fileName": "VFD_DFL_Affluences_Monthly_Aggregation_output.parquet"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					},
					{
						"name": "CopyMonthlyToFinal",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "UpdateMonthlyAggregation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Curated_Affluences_Monthly_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_Affluences_Monthly_Aggregation_output.parquet"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Curated_Affluences_Monthly_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
										"type": "Expression"
									},
									"fileName": {
										"value": "@concat('VFD_Affluences_Monthly_', variables('yearMonth'), '.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "DeleteMonthlyTemp",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "CopyMonthlyToFinal",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Curated_Affluences_Monthly_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_Affluences_Monthly_Aggregation_output.parquet"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"date": {
						"type": "string"
					}
				},
				"variables": {
					"processDate": {
						"type": "String"
					},
					"year": {
						"type": "String"
					},
					"month": {
						"type": "String"
					},
					"dateFormatted": {
						"type": "String"
					},
					"yearMonth": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Affluences"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_DuomoWiFi_Extract_Transform')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline principale per l'estrazione e trasformazione dei dati WiFi del Duomo",
				"activities": [
					{
						"name": "ExtractConnections",
						"description": "Estrae le connessioni WiFi dall'API Cloud4Wi",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "AuthRequest",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET",
									"additionalHeaders": {
										"value": "Authorization: Bearer @{activity('AuthRequest').output.token}",
										"type": "Expression"
									},
									"requestTimeout": "00:01:40"
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Cloud4Wi_Connections_HTTP",
								"type": "DatasetReference",
								"parameters": {
									"dateStart": {
										"value": "@pipeline().parameters.p_dateStart",
										"type": "Expression"
									},
									"dateStop": {
										"value": "@pipeline().parameters.p_dateStop",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Raw_DuomoWiFi_Connections_JSON",
								"type": "DatasetReference",
								"parameters": {
									"year": {
										"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
										"type": "Expression"
									},
									"month": {
										"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
										"type": "Expression"
									},
									"fileName": {
										"value": "@concat('VFD_Wifi_connections_', substring(pipeline().parameters.p_dateStart, 0, 4), substring(pipeline().parameters.p_dateStart, 5, 2), substring(pipeline().parameters.p_dateStart, 8, 2), '.json')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "LookupUsernames",
						"description": "Estrae la lista di username unici dal file delle connessioni",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ExtractConnections",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:05:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "VFD_DS_Raw_DuomoWiFi_Connections_JSON",
								"type": "DatasetReference",
								"parameters": {
									"year": {
										"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)\n",
										"type": "Expression"
									},
									"month": {
										"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)\n",
										"type": "Expression"
									},
									"fileName": {
										"value": "@concat('VFD_Wifi_connections_', \n    substring(pipeline().parameters.p_dateStart, 0, 4),\n    substring(pipeline().parameters.p_dateStart, 5, 2), \n    substring(pipeline().parameters.p_dateStart, 8, 2),\n    '.json')",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachUsername",
						"description": "Itera su ogni username per estrarre i dati utente",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookupUsernames",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupUsernames').output.value[0].connections",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 10,
							"activities": [
								{
									"name": "ExtractUserData",
									"description": "Estrae i dati di un singolo utente",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 3,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET",
												"additionalHeaders": {
													"value": "Authorization: Bearer @{activity('AuthRequest').output.token}",
													"type": "Expression"
												},
												"requestTimeout": "00:01:40"
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "VFD_DS_Cloud4Wi_Users_HTTP",
											"type": "DatasetReference",
											"parameters": {
												"username": {
													"value": "@item().customerId",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "VFD_DS_Raw_DuomoWiFi_Users_JSON",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@concat('VFD_Wifi_user_', item().username, '.json')",
													"type": "Expression"
												},
												"year": {
													"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
													"type": "Expression"
												},
												"month": {
													"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "TransformConnectionsRawToProcessed",
						"description": "Trasforma le connessioni da JSON Raw a Parquet Processed",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ForEachUsername",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_DuomoWiFi_Connections_Raw_Processed",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceConnectionsJSON": {
										"year": {
											"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
											"type": "Expression"
										},
										"month": {
											"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
											"type": "Expression"
										},
										"fileName": {
											"value": "@concat('VFD_Wifi_connections_', substring(pipeline().parameters.p_dateStart, 0, 4), substring(pipeline().parameters.p_dateStart, 5, 2), substring(pipeline().parameters.p_dateStart, 8, 2), '.json')",
											"type": "Expression"
										}
									},
									"SinkConnectionsParquet": {
										"year": {
											"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
											"type": "Expression"
										},
										"month": {
											"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
											"type": "Expression"
										},
										"fileName": "VFD_DFL_DuomoWiFi_Connections_Raw_Processed_output.parquet"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					},
					{
						"name": "CopyConnectionsProcessedToFinal",
						"description": "Copia il file temporaneo al nome finale",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "TransformConnectionsRawToProcessed",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Processed_DuomoWiFi_Connections_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"year": {
										"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
										"type": "Expression"
									},
									"month": {
										"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_DuomoWiFi_Connections_Raw_Processed_output.parquet"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Processed_DuomoWiFi_Connections_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"year": {
										"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
										"type": "Expression"
									},
									"month": {
										"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
										"type": "Expression"
									},
									"fileName": {
										"value": "@concat('VFD_Wifi_connections_', substring(pipeline().parameters.p_dateStart, 0, 4), substring(pipeline().parameters.p_dateStart, 5, 2), substring(pipeline().parameters.p_dateStart, 8, 2), '.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "DeleteTempConnectionsFile",
						"description": "Elimina il file temporaneo delle connessioni",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "CopyConnectionsProcessedToFinal",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:05:00",
							"retry": 1,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Processed_DuomoWiFi_Connections_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"year": {
										"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
										"type": "Expression"
									},
									"month": {
										"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_DuomoWiFi_Connections_Raw_Processed_output.parquet"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "TransformUsersRawToProcessed",
						"description": "Consolida tutti i file JSON degli utenti in un singolo Parquet",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DeleteTempConnectionsFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_DuomoWiFi_Users_Raw_Processed",
								"type": "DataFlowReference",
								"parameters": {
									"year": {
										"value": "'@{substring(pipeline().parameters.p_dateStart, 0, 4)}'",
										"type": "Expression"
									},
									"month": {
										"value": "'@{substring(pipeline().parameters.p_dateStart, 5, 2)}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SourceUsersJSON": {
										"fileName": "dummy.json",
										"year": {
											"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
											"type": "Expression"
										},
										"month": {
											"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
											"type": "Expression"
										}
									},
									"SinkUsersParquet": {
										"year": {
											"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
											"type": "Expression"
										},
										"month": {
											"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
											"type": "Expression"
										},
										"fileName": "VFD_DFL_DuomoWiFi_Users_Raw_Processed_output.parquet"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					},
					{
						"name": "CopyUsersProcessedToFinal",
						"description": "Copia il file temporaneo degli utenti al nome finale",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "TransformUsersRawToProcessed",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Processed_DuomoWiFi_Users_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"year": {
										"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
										"type": "Expression"
									},
									"month": {
										"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_DuomoWiFi_Users_Raw_Processed_output.parquet"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Processed_DuomoWiFi_Users_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"year": {
										"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
										"type": "Expression"
									},
									"month": {
										"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
										"type": "Expression"
									},
									"fileName": {
										"value": "@concat('VFD_Wifi_Users_', substring(pipeline().parameters.p_dateStart, 0, 4), substring(pipeline().parameters.p_dateStart, 5, 2), substring(pipeline().parameters.p_dateStart, 8, 2), '.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "DeleteTempUsersFile",
						"description": "Elimina il file temporaneo degli utenti",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "CopyUsersProcessedToFinal",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:05:00",
							"retry": 1,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Processed_DuomoWiFi_Users_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"year": {
										"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
										"type": "Expression"
									},
									"month": {
										"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_DuomoWiFi_Users_Raw_Processed_output.parquet"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "TransformProcessedToCurated",
						"description": "Esegue join tra connessioni e utenti per dataset finale arricchito",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DeleteTempUsersFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_DuomoWiFi_Processed_Curated",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceConnections": {
										"year": {
											"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
											"type": "Expression"
										},
										"month": {
											"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
											"type": "Expression"
										},
										"fileName": {
											"value": "@concat('VFD_Wifi_connections_', substring(pipeline().parameters.p_dateStart, 0, 4), substring(pipeline().parameters.p_dateStart, 5, 2), substring(pipeline().parameters.p_dateStart, 8, 2), '.parquet')",
											"type": "Expression"
										}
									},
									"SourceUsers": {
										"year": {
											"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
											"type": "Expression"
										},
										"month": {
											"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
											"type": "Expression"
										},
										"fileName": {
											"value": "@concat('VFD_Wifi_Users_', substring(pipeline().parameters.p_dateStart, 0, 4), substring(pipeline().parameters.p_dateStart, 5, 2), substring(pipeline().parameters.p_dateStart, 8, 2), '.parquet')",
											"type": "Expression"
										}
									},
									"SinkEnrichedData": {
										"year": {
											"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
											"type": "Expression"
										},
										"month": {
											"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
											"type": "Expression"
										},
										"fileName": "VFD_DFL_DuomoWiFi_Processed_Curated_output.parquet"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					},
					{
						"name": "CopyCuratedToFinal",
						"description": "Copia il file temporaneo arricchito al nome finale",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "TransformProcessedToCurated",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Curated_DuomoWiFi_Enriched_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"year": {
										"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
										"type": "Expression"
									},
									"month": {
										"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_DuomoWiFi_Processed_Curated_output.parquet"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Curated_DuomoWiFi_Enriched_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"year": {
										"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
										"type": "Expression"
									},
									"month": {
										"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
										"type": "Expression"
									},
									"fileName": {
										"value": "@concat('VFD_Wifi_connections_', substring(pipeline().parameters.p_dateStart, 0, 4), substring(pipeline().parameters.p_dateStart, 5, 2), substring(pipeline().parameters.p_dateStart, 8, 2), '.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "DeleteTempEnrichedFile",
						"description": "Elimina il file temporaneo arricchito",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "CopyCuratedToFinal",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:05:00",
							"retry": 1,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Curated_DuomoWiFi_Enriched_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"year": {
										"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
										"type": "Expression"
									},
									"month": {
										"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_DuomoWiFi_Processed_Curated_output.parquet"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "AuthRequest",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": "https://explore.cloud4wi.com/v1/sts/login/services",
							"body": {
								"clientKey": "ck-ffe407c5-e967-44db-a6b0-d6c178b6ee08",
								"clientSecret": "CWCVPKZCNDYTVKPBZTDSENQKJLLCPKGH"
							}
						}
					},
					{
						"name": "LogoutRequest",
						"description": "Richiesta di logout per annullare il token, il body è impostato con dei valori solamente perché DataFactory non accetta un body vuoto in una richiesta post",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "DeleteTempEnrichedFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Authorization": {
									"value": "Bearer @{activity('AuthRequest').output.token}",
									"type": "Expression"
								}
							},
							"url": "https://explore.cloud4wi.com/v1/sts/logout",
							"body": {
								"Sample": "Sample"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_dateStart": {
						"type": "string",
						"defaultValue": "2025-06-26"
					},
					"p_dateStop": {
						"type": "string",
						"defaultValue": "2025-06-26"
					}
				},
				"folder": {
					"name": "WiFi"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_MIDA_SQL_Master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline madre: scansiona 3 FTP folder, scarica file mancanti, chiama pipeline figlie",
				"activities": [
					{
						"name": "ScanBookingsFTP",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Mida_Bookings_FTPServer_Folder",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "FtpReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false,
								"useBinaryTransfer": true,
								"disableChunking": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ScanSealsFTP",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Mida_Seals_FTPServer_Folder",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "FtpReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false,
								"useBinaryTransfer": true,
								"disableChunking": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ScanValidationsFTP",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Mida_Validations_FTPServer_Folder",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "FtpReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false,
								"useBinaryTransfer": true,
								"disableChunking": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ProcessBookingsFiles",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ScanBookingsFTP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ScanBookingsFTP').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetBookingsFileName",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "bookingsFileName",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "ParseBookingsDate",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetBookingsFileName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "bookingsDate",
										"value": {
											"value": "@substring(variables('bookingsFileName'), 37, 8)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetBookingsFolderPath",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "ParseBookingsDate",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "bookingsFolderPath",
										"value": {
											"value": "@concat('Mida/Bookings/', substring(variables('bookingsDate'), 0, 4), '/', substring(variables('bookingsDate'), 4, 2))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "CheckBookingsExists",
									"type": "GetMetadata",
									"dependsOn": [
										{
											"activity": "SetBookingsFolderPath",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "VFD_DS_Raw_Mida_Bookings_Excel",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": "@variables('bookingsFolderPath')",
												"fileName": "@variables('bookingsFileName')"
											}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "IfBookingsNotExists",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "CheckBookingsExists",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(activity('CheckBookingsExists').output.exists)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "DownloadBookingsFromFTP",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "FtpReadSettings",
															"recursive": false,
															"useBinaryTransfer": true,
															"disableChunking": false
														},
														"formatSettings": {
															"type": "BinaryReadSettings"
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "VFD_DS_Mida_Bookings_FTPServer_Binary",
														"type": "DatasetReference",
														"parameters": {
															"fileName": "@variables('bookingsFileName')"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "VFD_DS_Raw_Mida_Bookings_Binary",
														"type": "DatasetReference",
														"parameters": {
															"folderPath": "@variables('bookingsFolderPath')",
															"fileName": "@variables('bookingsFileName')"
														}
													}
												]
											}
										]
									}
								},
								{
									"name": "ProcessBookingsPipeline",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "IfBookingsNotExists",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "VFD_PL_Process_Bookings_SQL",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"folderPath": {
												"value": "@variables('bookingsFolderPath')",
												"type": "Expression"
											},
											"fileName": {
												"value": "@variables('bookingsFileName')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "ProcessSealsFiles",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ScanSealsFTP",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ProcessBookingsFiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ScanSealsFTP').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetSealsFileName",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "sealsFileName",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "ParseSealsDate",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetSealsFileName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "sealsDate",
										"value": {
											"value": "@substring(variables('sealsFileName'), 25, 8)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetSealsFolderPath",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "ParseSealsDate",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "sealsFolderPath",
										"value": {
											"value": "@concat('Mida/Seals/', substring(variables('sealsDate'), 0, 4), '/', substring(variables('sealsDate'), 4, 2))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "CheckSealsExists",
									"type": "GetMetadata",
									"dependsOn": [
										{
											"activity": "SetSealsFolderPath",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "VFD_DS_Raw_Mida_Seals_Excel",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": "@variables('sealsFolderPath')",
												"fileName": "@variables('sealsFileName')"
											}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "IfSealsNotExists",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "CheckSealsExists",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(activity('CheckSealsExists').output.exists)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "DownloadSealsFromFTP",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "FtpReadSettings",
															"recursive": false,
															"useBinaryTransfer": true,
															"disableChunking": false
														},
														"formatSettings": {
															"type": "BinaryReadSettings"
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "VFD_DS_Mida_Seals_FTPServer_Binary",
														"type": "DatasetReference",
														"parameters": {
															"fileName": "@variables('sealsFileName')"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "VFD_DS_Raw_Mida_Seals_Binary",
														"type": "DatasetReference",
														"parameters": {
															"folderPath": "@variables('sealsFolderPath')",
															"fileName": "@variables('sealsFileName')"
														}
													}
												]
											}
										]
									}
								},
								{
									"name": "ProcessSealsPipeline",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "IfSealsNotExists",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "VFD_PL_Process_Seals_SQL",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"folderPath": {
												"value": "@variables('sealsFolderPath')",
												"type": "Expression"
											},
											"fileName": {
												"value": "@variables('sealsFileName')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "ProcessValidationsFiles",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ScanValidationsFTP",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ProcessSealsFiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ScanValidationsFTP').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetValidationsFileName",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "validationsFileName",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "ParseValidationsDate",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetValidationsFileName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "validationsDate",
										"value": {
											"value": "@substring(variables('validationsFileName'), 27, 8)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetValidationsFolderPath",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "ParseValidationsDate",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "validationsFolderPath",
										"value": {
											"value": "@concat('Mida/Validations/', substring(variables('validationsDate'), 0, 4), '/', substring(variables('validationsDate'), 4, 2))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "CheckValidationsExists",
									"type": "GetMetadata",
									"dependsOn": [
										{
											"activity": "SetValidationsFolderPath",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "VFD_DS_Raw_Mida_Validations_Excel",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": "@variables('validationsFolderPath')",
												"fileName": "@variables('validationsFileName')"
											}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "IfValidationsNotExists",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "CheckValidationsExists",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(activity('CheckValidationsExists').output.exists)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "DownloadValidationsFromFTP",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "FtpReadSettings",
															"recursive": false,
															"useBinaryTransfer": true,
															"disableChunking": false
														},
														"formatSettings": {
															"type": "BinaryReadSettings"
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "VFD_DS_Mida_Validations_FTPServer_Binary",
														"type": "DatasetReference",
														"parameters": {
															"fileName": "@variables('validationsFileName')"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "VFD_DS_Raw_Mida_Validations_Binary",
														"type": "DatasetReference",
														"parameters": {
															"folderPath": "@variables('validationsFolderPath')",
															"fileName": "@variables('validationsFileName')"
														}
													}
												]
											}
										]
									}
								},
								{
									"name": "ProcessValidationsPipeline",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "IfValidationsNotExists",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "VFD_PL_Process_Validations_SQL",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"folderPath": {
												"value": "@variables('validationsFolderPath')",
												"type": "Expression"
											},
											"fileName": {
												"value": "@variables('validationsFileName')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"bookingsFileName": {
						"type": "String"
					},
					"bookingsDate": {
						"type": "String"
					},
					"bookingsFolderPath": {
						"type": "String"
					},
					"sealsFileName": {
						"type": "String"
					},
					"sealsDate": {
						"type": "String"
					},
					"sealsFolderPath": {
						"type": "String"
					},
					"validationsFileName": {
						"type": "String"
					},
					"validationsDate": {
						"type": "String"
					},
					"validationsFolderPath": {
						"type": "String"
					}
				},
				"folder": {
					"name": "MIDA_SQL"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Mida')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Process Bookings",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "VFD_PL_Mida_Bookings_FTP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"concurrency": 1,
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Mida"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Mida2_Atomic_APPEND_Historical')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline atomica per aggiungere record al file historical con audit trail",
				"activities": [
					{
						"name": "Check Historical File Exists",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Historical_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "@pipeline().parameters.targetFolderPath",
									"fileName": "@pipeline().parameters.targetFileName"
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "If File Exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check Historical File Exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('Check Historical File Exists').output.exists",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Create New Historical File",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "VFD_DFL_Mida2_Atomic_CREATE_Historical",
											"type": "DataFlowReference",
											"parameters": {
												"guid_pk": {
													"value": "@concat('''', pipeline().parameters.guid_pk, '''')",
													"type": "Expression"
												},
												"reservation_progressiveCode": {
													"value": "@concat('''', pipeline().parameters.reservation_progressiveCode, '''')",
													"type": "Expression"
												},
												"reservation_code": {
													"value": "@concat('''', pipeline().parameters.reservation_code, '''')",
													"type": "Expression"
												},
												"reservation_status": {
													"value": "@pipeline().parameters.reservation_status",
													"type": "Expression"
												},
												"invoiceRequired": {
													"value": "@concat('''', pipeline().parameters.invoiceRequired, '''')",
													"type": "Expression"
												},
												"customer": {
													"value": "@pipeline().parameters.customer",
													"type": "Expression"
												},
												"visitDate": {
													"value": "@concat('''', pipeline().parameters.visitDate, '''')",
													"type": "Expression"
												},
												"reservationPayment_guid": {
													"value": "@concat('''', pipeline().parameters.reservationPayment_guid, '''')",
													"type": "Expression"
												},
												"parentPayment_guid": {
													"value": "@concat('''', pipeline().parameters.parentPayment_guid, '''')",
													"type": "Expression"
												},
												"sliced": {
													"value": "@concat('''', pipeline().parameters.sliced, '''')",
													"type": "Expression"
												},
												"reservation_guid": {
													"value": "@concat('''', pipeline().parameters.reservation_guid, '''')",
													"type": "Expression"
												},
												"group_guid": {
													"value": "@concat('''', pipeline().parameters.group_guid, '''')",
													"type": "Expression"
												},
												"group_label": {
													"value": "@concat('''', pipeline().parameters.group_label, '''')",
													"type": "Expression"
												},
												"group_email": {
													"value": "@concat('''', pipeline().parameters.group_email, '''')",
													"type": "Expression"
												},
												"paymentCode": {
													"value": "@concat('''', pipeline().parameters.paymentCode, '''')",
													"type": "Expression"
												},
												"paymentCondition": {
													"value": "@pipeline().parameters.paymentCondition",
													"type": "Expression"
												},
												"reservation_amount": {
													"value": "@pipeline().parameters.reservation_amount",
													"type": "Expression"
												},
												"reservation_amountTax": {
													"value": "@pipeline().parameters.reservation_amountTax",
													"type": "Expression"
												},
												"status": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												},
												"status_text": {
													"value": "@concat('''', pipeline().parameters.status_text, '''')",
													"type": "Expression"
												},
												"stamp": {
													"value": "@concat('''', pipeline().parameters.stamp, '''')",
													"type": "Expression"
												},
												"notes": {
													"value": "@concat('''', pipeline().parameters.notes, '''')",
													"type": "Expression"
												},
												"transactionType": {
													"value": "@concat('''', pipeline().parameters.transactionType, '''')",
													"type": "Expression"
												},
												"transactionType_text": {
													"value": "@concat('''', pipeline().parameters.transactionType_text, '''')",
													"type": "Expression"
												},
												"paymentLimitDate": {
													"value": "@concat('''', pipeline().parameters.paymentLimitDate, '''')",
													"type": "Expression"
												},
												"paymentDate": {
													"value": "@concat('''', pipeline().parameters.paymentDate, '''')",
													"type": "Expression"
												},
												"refund": {
													"value": "@concat('''', pipeline().parameters.refund, '''')",
													"type": "Expression"
												},
												"refunded": {
													"value": "@concat('''', pipeline().parameters.refunded, '''')",
													"type": "Expression"
												},
												"convention_label": {
													"value": "@concat('''', pipeline().parameters.convention_label, '''')",
													"type": "Expression"
												},
												"receiptCode": {
													"value": "@concat('''', pipeline().parameters.receiptCode, '''')",
													"type": "Expression"
												},
												"insertTimestamp": {
													"value": "@concat('''', pipeline().parameters.insertTimestamp, '''')",
													"type": "Expression"
												},
												"updateTimestamp": {
													"value": "@concat('''', pipeline().parameters.updateTimestamp, '''')",
													"type": "Expression"
												},
												"owner": {
													"value": "@concat('''', pipeline().parameters.owner, '''')",
													"type": "Expression"
												},
												"owner_text": {
													"value": "@concat('''', pipeline().parameters.owner_text, '''')",
													"type": "Expression"
												},
												"sessionId": {
													"value": "@concat('''', pipeline().parameters.sessionId, '''')",
													"type": "Expression"
												},
												"terminal_label": {
													"value": "@concat('''', pipeline().parameters.terminal_label, '''')",
													"type": "Expression"
												},
												"terminalGroup_label": {
													"value": "@concat('''', pipeline().parameters.terminalGroup_label, '''')",
													"type": "Expression"
												},
												"gateway_guid": {
													"value": "@concat('''', pipeline().parameters.gateway_guid, '''')",
													"type": "Expression"
												},
												"gateway_label": {
													"value": "@concat('''', pipeline().parameters.gateway_label, '''')",
													"type": "Expression"
												},
												"transactionID": {
													"value": "@concat('''', pipeline().parameters.transactionID, '''')",
													"type": "Expression"
												},
												"bankAccount_guid": {
													"value": "@concat('''', pipeline().parameters.bankAccount_guid, '''')",
													"type": "Expression"
												},
												"bankAccount_label": {
													"value": "@concat('''', pipeline().parameters.bankAccount_label, '''')",
													"type": "Expression"
												},
												"channel_guid": {
													"value": "@concat('''', pipeline().parameters.channel_guid, '''')",
													"type": "Expression"
												},
												"channel_label": {
													"value": "@concat('''', pipeline().parameters.channel_label, '''')",
													"type": "Expression"
												},
												"channelType": {
													"value": "@concat('''', pipeline().parameters.channelType, '''')",
													"type": "Expression"
												},
												"detail_guid": {
													"value": "@concat('''', pipeline().parameters.detail_guid, '''')",
													"type": "Expression"
												},
												"extra_guid": {
													"value": "@concat('''', pipeline().parameters.extra_guid, '''')",
													"type": "Expression"
												},
												"priceList": {
													"value": "@concat('''', pipeline().parameters.priceList, '''')",
													"type": "Expression"
												},
												"event": {
													"value": "@concat('''', pipeline().parameters.event, '''')",
													"type": "Expression"
												},
												"detailType": {
													"value": "@concat('''', pipeline().parameters.detailType, '''')",
													"type": "Expression"
												},
												"detail_text": {
													"value": "@concat('''', pipeline().parameters.detail_text, '''')",
													"type": "Expression"
												},
												"detail_label": {
													"value": "@concat('''', pipeline().parameters.detail_label, '''')",
													"type": "Expression"
												},
												"detail_count": {
													"value": "@pipeline().parameters.detail_count",
													"type": "Expression"
												},
												"paymentDetail_guid": {
													"value": "@concat('''', pipeline().parameters.paymentDetail_guid, '''')",
													"type": "Expression"
												},
												"detail_payingPartecipants": {
													"value": "@pipeline().parameters.detail_payingPartecipants",
													"type": "Expression"
												},
												"detail_quantity": {
													"value": "@pipeline().parameters.detail_quantity",
													"type": "Expression"
												},
												"tickets_quantity": {
													"value": "@pipeline().parameters.tickets_quantity",
													"type": "Expression"
												},
												"pax_quantity": {
													"value": "@pipeline().parameters.pax_quantity",
													"type": "Expression"
												},
												"costCenter_guid": {
													"value": "@concat('''', pipeline().parameters.costCenter_guid, '''')",
													"type": "Expression"
												},
												"costCenter_label": {
													"value": "@concat('''', pipeline().parameters.costCenter_label, '''')",
													"type": "Expression"
												},
												"object_receipt": {
													"value": "@pipeline().parameters.object_receipt",
													"type": "Expression"
												},
												"object_taxCode": {
													"value": "@concat('''', pipeline().parameters.object_taxCode, '''')",
													"type": "Expression"
												},
												"object_taxNotes": {
													"value": "@concat('''', pipeline().parameters.object_taxNotes, '''')",
													"type": "Expression"
												},
												"object_amount": {
													"value": "@pipeline().parameters.object_amount",
													"type": "Expression"
												},
												"object_taxPercentage": {
													"value": "@pipeline().parameters.object_taxPercentage",
													"type": "Expression"
												},
												"amount": {
													"value": "@pipeline().parameters.amount",
													"type": "Expression"
												},
												"amountNet": {
													"value": "@pipeline().parameters.amountNet",
													"type": "Expression"
												},
												"amountPresale": {
													"value": "@pipeline().parameters.amountPresale",
													"type": "Expression"
												},
												"amountSold": {
													"value": "@pipeline().parameters.amountSold",
													"type": "Expression"
												},
												"amountPayed": {
													"value": "@pipeline().parameters.amountPayed",
													"type": "Expression"
												},
												"amountPending": {
													"value": "@pipeline().parameters.amountPending",
													"type": "Expression"
												},
												"amountCanceled": {
													"value": "@pipeline().parameters.amountCanceled",
													"type": "Expression"
												},
												"externalId": {
													"value": "@concat('''', pipeline().parameters.externalId, '''')",
													"type": "Expression"
												},
												"amountRefunded": {
													"value": "@pipeline().parameters.amountRefunded",
													"type": "Expression"
												},
												"invoiceSummary": {
													"value": "@concat('''', pipeline().parameters.invoiceSummary, '''')",
													"type": "Expression"
												},
												"eventCalendar_guid": {
													"value": "@concat('''', pipeline().parameters.eventCalendar_guid, '''')",
													"type": "Expression"
												},
												"passDetail_guid": {
													"value": "@concat('''', pipeline().parameters.passDetail_guid, '''')",
													"type": "Expression"
												},
												"paymentCostCenter_guid": {
													"value": "@concat('''', pipeline().parameters.paymentCostCenter_guid, '''')",
													"type": "Expression"
												},
												"organization_guid": {
													"value": "@concat('''', pipeline().parameters.organization_guid, '''')",
													"type": "Expression"
												},
												"venue_guid": {
													"value": "@concat('''', pipeline().parameters.venue_guid, '''')",
													"type": "Expression"
												},
												"olapUpdateTimestamp": {
													"value": "@concat('''', pipeline().parameters.olapUpdateTimestamp, '''')",
													"type": "Expression"
												},
												"row_id": {
													"value": "@concat('''', pipeline().parameters.row_id, '''')",
													"type": "Expression"
												},
												"operationType": {
													"value": "@concat('''', pipeline().parameters.operationType, '''')",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"DummySource": {},
												"SinkHistorical": {
													"folderPath": "@pipeline().parameters.targetFolderPath",
													"fileName": "@pipeline().parameters.targetFileName"
												}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Append To Existing Historical",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "VFD_DFL_Mida2_Atomic_APPEND_Historical",
											"type": "DataFlowReference",
											"parameters": {
												"guid_pk": {
													"value": "@concat('''', pipeline().parameters.guid_pk, '''')",
													"type": "Expression"
												},
												"reservation_progressiveCode": {
													"value": "@concat('''', pipeline().parameters.reservation_progressiveCode, '''')",
													"type": "Expression"
												},
												"reservation_code": {
													"value": "@concat('''', pipeline().parameters.reservation_code, '''')",
													"type": "Expression"
												},
												"reservation_status": {
													"value": "@pipeline().parameters.reservation_status",
													"type": "Expression"
												},
												"invoiceRequired": {
													"value": "@concat('''', pipeline().parameters.invoiceRequired, '''')",
													"type": "Expression"
												},
												"customer": {
													"value": "@pipeline().parameters.customer",
													"type": "Expression"
												},
												"visitDate": {
													"value": "@concat('''', pipeline().parameters.visitDate, '''')",
													"type": "Expression"
												},
												"reservationPayment_guid": {
													"value": "@concat('''', pipeline().parameters.reservationPayment_guid, '''')",
													"type": "Expression"
												},
												"parentPayment_guid": {
													"value": "@concat('''', pipeline().parameters.parentPayment_guid, '''')",
													"type": "Expression"
												},
												"sliced": {
													"value": "@concat('''', pipeline().parameters.sliced, '''')",
													"type": "Expression"
												},
												"reservation_guid": {
													"value": "@concat('''', pipeline().parameters.reservation_guid, '''')",
													"type": "Expression"
												},
												"group_guid": {
													"value": "@concat('''', pipeline().parameters.group_guid, '''')",
													"type": "Expression"
												},
												"group_label": {
													"value": "@concat('''', pipeline().parameters.group_label, '''')",
													"type": "Expression"
												},
												"group_email": {
													"value": "@concat('''', pipeline().parameters.group_email, '''')",
													"type": "Expression"
												},
												"paymentCode": {
													"value": "@concat('''', pipeline().parameters.paymentCode, '''')",
													"type": "Expression"
												},
												"paymentCondition": {
													"value": "@pipeline().parameters.paymentCondition",
													"type": "Expression"
												},
												"reservation_amount": {
													"value": "@pipeline().parameters.reservation_amount",
													"type": "Expression"
												},
												"reservation_amountTax": {
													"value": "@pipeline().parameters.reservation_amountTax",
													"type": "Expression"
												},
												"status": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												},
												"status_text": {
													"value": "@concat('''', pipeline().parameters.status_text, '''')",
													"type": "Expression"
												},
												"stamp": {
													"value": "@concat('''', pipeline().parameters.stamp, '''')",
													"type": "Expression"
												},
												"notes": {
													"value": "@concat('''', pipeline().parameters.notes, '''')",
													"type": "Expression"
												},
												"transactionType": {
													"value": "@concat('''', pipeline().parameters.transactionType, '''')",
													"type": "Expression"
												},
												"transactionType_text": {
													"value": "@concat('''', pipeline().parameters.transactionType_text, '''')",
													"type": "Expression"
												},
												"paymentLimitDate": {
													"value": "@concat('''', pipeline().parameters.paymentLimitDate, '''')",
													"type": "Expression"
												},
												"paymentDate": {
													"value": "@concat('''', pipeline().parameters.paymentDate, '''')",
													"type": "Expression"
												},
												"refund": {
													"value": "@concat('''', pipeline().parameters.refund, '''')",
													"type": "Expression"
												},
												"refunded": {
													"value": "@concat('''', pipeline().parameters.refunded, '''')",
													"type": "Expression"
												},
												"convention_label": {
													"value": "@concat('''', pipeline().parameters.convention_label, '''')",
													"type": "Expression"
												},
												"receiptCode": {
													"value": "@concat('''', pipeline().parameters.receiptCode, '''')",
													"type": "Expression"
												},
												"insertTimestamp": {
													"value": "@concat('''', pipeline().parameters.insertTimestamp, '''')",
													"type": "Expression"
												},
												"updateTimestamp": {
													"value": "@concat('''', pipeline().parameters.updateTimestamp, '''')",
													"type": "Expression"
												},
												"owner": {
													"value": "@concat('''', pipeline().parameters.owner, '''')",
													"type": "Expression"
												},
												"owner_text": {
													"value": "@concat('''', pipeline().parameters.owner_text, '''')",
													"type": "Expression"
												},
												"sessionId": {
													"value": "@concat('''', pipeline().parameters.sessionId, '''')",
													"type": "Expression"
												},
												"terminal_label": {
													"value": "@concat('''', pipeline().parameters.terminal_label, '''')",
													"type": "Expression"
												},
												"terminalGroup_label": {
													"value": "@concat('''', pipeline().parameters.terminalGroup_label, '''')",
													"type": "Expression"
												},
												"gateway_guid": {
													"value": "@concat('''', pipeline().parameters.gateway_guid, '''')",
													"type": "Expression"
												},
												"gateway_label": {
													"value": "@concat('''', pipeline().parameters.gateway_label, '''')",
													"type": "Expression"
												},
												"transactionID": {
													"value": "@concat('''', pipeline().parameters.transactionID, '''')",
													"type": "Expression"
												},
												"bankAccount_guid": {
													"value": "@concat('''', pipeline().parameters.bankAccount_guid, '''')",
													"type": "Expression"
												},
												"bankAccount_label": {
													"value": "@concat('''', pipeline().parameters.bankAccount_label, '''')",
													"type": "Expression"
												},
												"channel_guid": {
													"value": "@concat('''', pipeline().parameters.channel_guid, '''')",
													"type": "Expression"
												},
												"channel_label": {
													"value": "@concat('''', pipeline().parameters.channel_label, '''')",
													"type": "Expression"
												},
												"channelType": {
													"value": "@concat('''', pipeline().parameters.channelType, '''')",
													"type": "Expression"
												},
												"detail_guid": {
													"value": "@concat('''', pipeline().parameters.detail_guid, '''')",
													"type": "Expression"
												},
												"extra_guid": {
													"value": "@concat('''', pipeline().parameters.extra_guid, '''')",
													"type": "Expression"
												},
												"priceList": {
													"value": "@concat('''', pipeline().parameters.priceList, '''')",
													"type": "Expression"
												},
												"event": {
													"value": "@concat('''', pipeline().parameters.event, '''')",
													"type": "Expression"
												},
												"detailType": {
													"value": "@concat('''', pipeline().parameters.detailType, '''')",
													"type": "Expression"
												},
												"detail_text": {
													"value": "@concat('''', pipeline().parameters.detail_text, '''')",
													"type": "Expression"
												},
												"detail_label": {
													"value": "@concat('''', pipeline().parameters.detail_label, '''')",
													"type": "Expression"
												},
												"detail_count": {
													"value": "@pipeline().parameters.detail_count",
													"type": "Expression"
												},
												"paymentDetail_guid": {
													"value": "@concat('''', pipeline().parameters.paymentDetail_guid, '''')",
													"type": "Expression"
												},
												"detail_payingPartecipants": {
													"value": "@pipeline().parameters.detail_payingPartecipants",
													"type": "Expression"
												},
												"detail_quantity": {
													"value": "@pipeline().parameters.detail_quantity",
													"type": "Expression"
												},
												"tickets_quantity": {
													"value": "@pipeline().parameters.tickets_quantity",
													"type": "Expression"
												},
												"pax_quantity": {
													"value": "@pipeline().parameters.pax_quantity",
													"type": "Expression"
												},
												"costCenter_guid": {
													"value": "@concat('''', pipeline().parameters.costCenter_guid, '''')",
													"type": "Expression"
												},
												"costCenter_label": {
													"value": "@concat('''', pipeline().parameters.costCenter_label, '''')",
													"type": "Expression"
												},
												"object_receipt": {
													"value": "@pipeline().parameters.object_receipt",
													"type": "Expression"
												},
												"object_taxCode": {
													"value": "@concat('''', pipeline().parameters.object_taxCode, '''')",
													"type": "Expression"
												},
												"object_taxNotes": {
													"value": "@concat('''', pipeline().parameters.object_taxNotes, '''')",
													"type": "Expression"
												},
												"object_amount": {
													"value": "@pipeline().parameters.object_amount",
													"type": "Expression"
												},
												"object_taxPercentage": {
													"value": "@pipeline().parameters.object_taxPercentage",
													"type": "Expression"
												},
												"amount": {
													"value": "@pipeline().parameters.amount",
													"type": "Expression"
												},
												"amountNet": {
													"value": "@pipeline().parameters.amountNet",
													"type": "Expression"
												},
												"amountPresale": {
													"value": "@pipeline().parameters.amountPresale",
													"type": "Expression"
												},
												"amountSold": {
													"value": "@pipeline().parameters.amountSold",
													"type": "Expression"
												},
												"amountPayed": {
													"value": "@pipeline().parameters.amountPayed",
													"type": "Expression"
												},
												"amountPending": {
													"value": "@pipeline().parameters.amountPending",
													"type": "Expression"
												},
												"amountCanceled": {
													"value": "@pipeline().parameters.amountCanceled",
													"type": "Expression"
												},
												"externalId": {
													"value": "@concat('''', pipeline().parameters.externalId, '''')",
													"type": "Expression"
												},
												"amountRefunded": {
													"value": "@pipeline().parameters.amountRefunded",
													"type": "Expression"
												},
												"invoiceSummary": {
													"value": "@concat('''', pipeline().parameters.invoiceSummary, '''')",
													"type": "Expression"
												},
												"eventCalendar_guid": {
													"value": "@concat('''', pipeline().parameters.eventCalendar_guid, '''')",
													"type": "Expression"
												},
												"passDetail_guid": {
													"value": "@concat('''', pipeline().parameters.passDetail_guid, '''')",
													"type": "Expression"
												},
												"paymentCostCenter_guid": {
													"value": "@concat('''', pipeline().parameters.paymentCostCenter_guid, '''')",
													"type": "Expression"
												},
												"organization_guid": {
													"value": "@concat('''', pipeline().parameters.organization_guid, '''')",
													"type": "Expression"
												},
												"venue_guid": {
													"value": "@concat('''', pipeline().parameters.venue_guid, '''')",
													"type": "Expression"
												},
												"olapUpdateTimestamp": {
													"value": "@concat('''', pipeline().parameters.olapUpdateTimestamp, '''')",
													"type": "Expression"
												},
												"row_id": {
													"value": "@concat('''', pipeline().parameters.row_id, '''')",
													"type": "Expression"
												},
												"operationType": {
													"value": "@concat('''', pipeline().parameters.operationType, '''')",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"DummySource": {},
												"SourceExistingHistorical": {
													"folderPath": "@pipeline().parameters.targetFolderPath",
													"fileName": "@pipeline().parameters.targetFileName"
												},
												"SinkTemp": {
													"folderPath": "@pipeline().parameters.tempFolderPath",
													"fileName": "@pipeline().parameters.tempFileName"
												}
											},
											"linkedServiceParameters": {
												"SourceExistingHistorical": {
													"schemaLinkedService": {
														"folderPath": "Mida2/Bookings/Historical/2025/01",
														"fileName": "VFD_Mida_Historical_20250101.parquet"
													}
												}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								},
								{
									"name": "Copy Temp To Final",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Append To Existing Historical",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": false,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": "@pipeline().parameters.tempFolderPath",
												"fileName": "@pipeline().parameters.tempFileName"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "VFD_DS_Curated_Mida_Historical_Parquet",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": "@pipeline().parameters.targetFolderPath",
												"fileName": "@pipeline().parameters.targetFileName"
											}
										}
									]
								},
								{
									"name": "Delete Temp File",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Copy Temp To Final",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": "@pipeline().parameters.tempFolderPath",
												"fileName": "@pipeline().parameters.tempFileName"
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": false,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"guid_pk": {
						"type": "string"
					},
					"reservation_progressiveCode": {
						"type": "string"
					},
					"reservation_code": {
						"type": "string"
					},
					"reservation_status": {
						"type": "int"
					},
					"invoiceRequired": {
						"type": "string"
					},
					"customer": {
						"type": "float"
					},
					"visitDate": {
						"type": "string"
					},
					"reservationPayment_guid": {
						"type": "string"
					},
					"parentPayment_guid": {
						"type": "string"
					},
					"sliced": {
						"type": "string"
					},
					"reservation_guid": {
						"type": "string"
					},
					"group_guid": {
						"type": "string"
					},
					"group_label": {
						"type": "string"
					},
					"group_email": {
						"type": "string"
					},
					"paymentCode": {
						"type": "string"
					},
					"paymentCondition": {
						"type": "float"
					},
					"reservation_amount": {
						"type": "float"
					},
					"reservation_amountTax": {
						"type": "float"
					},
					"status": {
						"type": "int"
					},
					"status_text": {
						"type": "string"
					},
					"stamp": {
						"type": "string"
					},
					"notes": {
						"type": "string"
					},
					"transactionType": {
						"type": "string"
					},
					"transactionType_text": {
						"type": "string"
					},
					"paymentLimitDate": {
						"type": "string"
					},
					"paymentDate": {
						"type": "string"
					},
					"refund": {
						"type": "string"
					},
					"refunded": {
						"type": "string"
					},
					"convention_label": {
						"type": "string"
					},
					"receiptCode": {
						"type": "string"
					},
					"insertTimestamp": {
						"type": "string"
					},
					"updateTimestamp": {
						"type": "string"
					},
					"owner": {
						"type": "string"
					},
					"owner_text": {
						"type": "string"
					},
					"sessionId": {
						"type": "string"
					},
					"terminal_label": {
						"type": "string"
					},
					"terminalGroup_label": {
						"type": "string"
					},
					"gateway_guid": {
						"type": "string"
					},
					"gateway_label": {
						"type": "string"
					},
					"transactionID": {
						"type": "string"
					},
					"bankAccount_guid": {
						"type": "string"
					},
					"bankAccount_label": {
						"type": "string"
					},
					"channel_guid": {
						"type": "string"
					},
					"channel_label": {
						"type": "string"
					},
					"channelType": {
						"type": "string"
					},
					"detail_guid": {
						"type": "string"
					},
					"extra_guid": {
						"type": "string"
					},
					"priceList": {
						"type": "string"
					},
					"event": {
						"type": "string"
					},
					"detailType": {
						"type": "string"
					},
					"detail_text": {
						"type": "string"
					},
					"detail_label": {
						"type": "string"
					},
					"detail_count": {
						"type": "int"
					},
					"paymentDetail_guid": {
						"type": "string"
					},
					"detail_payingPartecipants": {
						"type": "int"
					},
					"detail_quantity": {
						"type": "int"
					},
					"tickets_quantity": {
						"type": "int"
					},
					"pax_quantity": {
						"type": "int"
					},
					"costCenter_guid": {
						"type": "string"
					},
					"costCenter_label": {
						"type": "string"
					},
					"object_receipt": {
						"type": "int"
					},
					"object_taxCode": {
						"type": "string"
					},
					"object_taxNotes": {
						"type": "string"
					},
					"object_amount": {
						"type": "float"
					},
					"object_taxPercentage": {
						"type": "float"
					},
					"amount": {
						"type": "float"
					},
					"amountNet": {
						"type": "float"
					},
					"amountPresale": {
						"type": "float"
					},
					"amountSold": {
						"type": "float"
					},
					"amountPayed": {
						"type": "float"
					},
					"amountPending": {
						"type": "float"
					},
					"amountCanceled": {
						"type": "float"
					},
					"externalId": {
						"type": "string"
					},
					"amountRefunded": {
						"type": "float"
					},
					"invoiceSummary": {
						"type": "string"
					},
					"eventCalendar_guid": {
						"type": "string"
					},
					"passDetail_guid": {
						"type": "string"
					},
					"paymentCostCenter_guid": {
						"type": "string"
					},
					"organization_guid": {
						"type": "string"
					},
					"venue_guid": {
						"type": "string"
					},
					"olapUpdateTimestamp": {
						"type": "string"
					},
					"row_id": {
						"type": "string"
					},
					"operationType": {
						"type": "string"
					},
					"targetFolderPath": {
						"type": "string"
					},
					"targetFileName": {
						"type": "string"
					},
					"tempFolderPath": {
						"type": "string"
					},
					"tempFileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"annotations": [
					"Pipeline atomica per append a historical con audit trail",
					"Sintassi corretta uniforme per CREATE e APPEND dataflow",
					"Tutti gli 83 parametri con mappatura corretta"
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Mida2_Atomic_DELETE_Booking_Complete')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline atomica per rimozione di una prenotazione dal file completo - riceve solo row_id",
				"activities": [
					{
						"name": "Delete Record From Complete",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_Mida2_Atomic_DELETE_Booking_Complete",
								"type": "DataFlowReference",
								"parameters": {
									"row_id": {
										"value": "@concat('''', pipeline().parameters.row_id, '''')",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SourceExistingContent": {
										"folderPath": "@pipeline().parameters.targetFolderPath",
										"fileName": "@pipeline().parameters.targetFileName"
									},
									"SinkTemp": {
										"folderPath": "@pipeline().parameters.tempFolderPath",
										"fileName": "@pipeline().parameters.tempFileName"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Copy Temp To Final",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Record From Complete",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "@pipeline().parameters.tempFolderPath",
									"fileName": "@pipeline().parameters.tempFileName"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Complete_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "@pipeline().parameters.targetFolderPath",
									"fileName": "@pipeline().parameters.targetFileName"
								}
							}
						]
					},
					{
						"name": "Delete Temp File",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy Temp To Final",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "@pipeline().parameters.tempFolderPath",
									"fileName": "@pipeline().parameters.tempFileName"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": false,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"row_id": {
						"type": "string"
					},
					"targetFolderPath": {
						"type": "string"
					},
					"targetFileName": {
						"type": "string"
					},
					"tempFolderPath": {
						"type": "string"
					},
					"tempFileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"annotations": [
					"Pipeline atomica per rimozione prenotazioni complete",
					"Riceve solo row_id come parametro",
					"Sintassi corretta per parametri e dataset"
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Mida2_Atomic_DELETE_Booking_Summary')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline atomica per rimozione di una prenotazione dal file summary",
				"activities": [
					{
						"name": "Delete Record From Summary",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_Mida2_Atomic_DELETE_Booking_Summary",
								"type": "DataFlowReference",
								"parameters": {
									"row_id": {
										"value": "@concat('''', pipeline().parameters.row_id, '''')",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SourceExistingContent": {
										"folderPath": "@pipeline().parameters.targetFolderPath",
										"fileName": "@pipeline().parameters.targetFileName"
									},
									"SinkTemp": {
										"folderPath": "@pipeline().parameters.tempFolderPath",
										"fileName": "@pipeline().parameters.tempFileName"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Copy Temp To Final",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Record From Summary",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "@pipeline().parameters.tempFolderPath",
									"fileName": "@pipeline().parameters.tempFileName"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Summary_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "@pipeline().parameters.targetFolderPath",
									"fileName": "@pipeline().parameters.targetFileName"
								}
							}
						]
					},
					{
						"name": "Delete Temp File",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy Temp To Final",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "@pipeline().parameters.tempFolderPath",
									"fileName": "@pipeline().parameters.tempFileName"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": false,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"row_id": {
						"type": "string"
					},
					"targetFolderPath": {
						"type": "string"
					},
					"targetFileName": {
						"type": "string"
					},
					"tempFolderPath": {
						"type": "string"
					},
					"tempFileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"annotations": [
					"Pipeline atomica per rimozione prenotazioni summary",
					"Sintassi corretta per parametri e dataset"
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Mida2_Atomic_INSERT_Booking_Complete')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "pipeline atomica per inserimento di una prenotazione nel file completo - riceve tutti i campi come parametri",
				"activities": [
					{
						"name": "Check Complete File Exists",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Complete_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "@pipeline().parameters.targetFolderPath",
									"fileName": "@pipeline().parameters.targetFileName"
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "If File Exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check Complete File Exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('Check Complete File Exists').output.exists",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Create New Complete File",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "VFD_DFL_Mida2_Atomic_CREATE_Booking_Complete",
											"type": "DataFlowReference",
											"parameters": {
												"guid_pk": {
													"value": "@concat('''', pipeline().parameters.guid_pk, '''')",
													"type": "Expression"
												},
												"reservation_progressiveCode": {
													"value": "@concat('''', pipeline().parameters.reservation_progressiveCode, '''')",
													"type": "Expression"
												},
												"reservation_code": {
													"value": "@concat('''', pipeline().parameters.reservation_code, '''')",
													"type": "Expression"
												},
												"reservation_status": {
													"value": "@pipeline().parameters.reservation_status",
													"type": "Expression"
												},
												"invoiceRequired": {
													"value": "@concat('''', pipeline().parameters.invoiceRequired, '''')",
													"type": "Expression"
												},
												"customer": {
													"value": "@pipeline().parameters.customer",
													"type": "Expression"
												},
												"visitDate": {
													"value": "@concat('''', pipeline().parameters.visitDate, '''')",
													"type": "Expression"
												},
												"reservationPayment_guid": {
													"value": "@concat('''', pipeline().parameters.reservationPayment_guid, '''')",
													"type": "Expression"
												},
												"parentPayment_guid": {
													"value": "@concat('''', pipeline().parameters.parentPayment_guid, '''')",
													"type": "Expression"
												},
												"sliced": {
													"value": "@concat('''', pipeline().parameters.sliced, '''')",
													"type": "Expression"
												},
												"reservation_guid": {
													"value": "@concat('''', pipeline().parameters.reservation_guid, '''')",
													"type": "Expression"
												},
												"group_guid": {
													"value": "@concat('''', pipeline().parameters.group_guid, '''')",
													"type": "Expression"
												},
												"group_label": {
													"value": "@concat('''', pipeline().parameters.group_label, '''')",
													"type": "Expression"
												},
												"group_email": {
													"value": "@concat('''', pipeline().parameters.group_email, '''')",
													"type": "Expression"
												},
												"paymentCode": {
													"value": "@concat('''', pipeline().parameters.paymentCode, '''')",
													"type": "Expression"
												},
												"paymentCondition": {
													"value": "@pipeline().parameters.paymentCondition",
													"type": "Expression"
												},
												"reservation_amount": {
													"value": "@pipeline().parameters.reservation_amount",
													"type": "Expression"
												},
												"reservation_amountTax": {
													"value": "@pipeline().parameters.reservation_amountTax",
													"type": "Expression"
												},
												"status": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												},
												"status_text": {
													"value": "@concat('''', pipeline().parameters.status_text, '''')",
													"type": "Expression"
												},
												"stamp": {
													"value": "@concat('''', pipeline().parameters.stamp, '''')",
													"type": "Expression"
												},
												"notes": {
													"value": "@concat('''', pipeline().parameters.notes, '''')",
													"type": "Expression"
												},
												"transactionType": {
													"value": "@concat('''', pipeline().parameters.transactionType, '''')",
													"type": "Expression"
												},
												"transactionType_text": {
													"value": "@concat('''', pipeline().parameters.transactionType_text, '''')",
													"type": "Expression"
												},
												"paymentLimitDate": {
													"value": "@concat('''', pipeline().parameters.paymentLimitDate, '''')",
													"type": "Expression"
												},
												"paymentDate": {
													"value": "@concat('''', pipeline().parameters.paymentDate, '''')",
													"type": "Expression"
												},
												"refund": {
													"value": "@concat('''', pipeline().parameters.refund, '''')",
													"type": "Expression"
												},
												"refunded": {
													"value": "@concat('''', pipeline().parameters.refunded, '''')",
													"type": "Expression"
												},
												"convention_label": {
													"value": "@concat('''', pipeline().parameters.convention_label, '''')",
													"type": "Expression"
												},
												"receiptCode": {
													"value": "@concat('''', pipeline().parameters.receiptCode, '''')",
													"type": "Expression"
												},
												"insertTimestamp": {
													"value": "@concat('''', pipeline().parameters.insertTimestamp, '''')",
													"type": "Expression"
												},
												"updateTimestamp": {
													"value": "@concat('''', pipeline().parameters.updateTimestamp, '''')",
													"type": "Expression"
												},
												"owner": {
													"value": "@concat('''', pipeline().parameters.owner, '''')",
													"type": "Expression"
												},
												"owner_text": {
													"value": "@concat('''', pipeline().parameters.owner_text, '''')",
													"type": "Expression"
												},
												"sessionId": {
													"value": "@concat('''', pipeline().parameters.sessionId, '''')",
													"type": "Expression"
												},
												"terminal_label": {
													"value": "@concat('''', pipeline().parameters.terminal_label, '''')",
													"type": "Expression"
												},
												"terminalGroup_label": {
													"value": "@concat('''', pipeline().parameters.terminalGroup_label, '''')",
													"type": "Expression"
												},
												"gateway_guid": {
													"value": "@concat('''', pipeline().parameters.gateway_guid, '''')",
													"type": "Expression"
												},
												"gateway_label": {
													"value": "@concat('''', pipeline().parameters.gateway_label, '''')",
													"type": "Expression"
												},
												"transactionID": {
													"value": "@concat('''', pipeline().parameters.transactionID, '''')",
													"type": "Expression"
												},
												"bankAccount_guid": {
													"value": "@concat('''', pipeline().parameters.bankAccount_guid, '''')",
													"type": "Expression"
												},
												"bankAccount_label": {
													"value": "@concat('''', pipeline().parameters.bankAccount_label, '''')",
													"type": "Expression"
												},
												"channel_guid": {
													"value": "@concat('''', pipeline().parameters.channel_guid, '''')",
													"type": "Expression"
												},
												"channel_label": {
													"value": "@concat('''', pipeline().parameters.channel_label, '''')",
													"type": "Expression"
												},
												"channelType": {
													"value": "@concat('''', pipeline().parameters.channelType, '''')",
													"type": "Expression"
												},
												"detail_guid": {
													"value": "@concat('''', pipeline().parameters.detail_guid, '''')",
													"type": "Expression"
												},
												"extra_guid": {
													"value": "@concat('''', pipeline().parameters.extra_guid, '''')",
													"type": "Expression"
												},
												"priceList": {
													"value": "@concat('''', pipeline().parameters.priceList, '''')",
													"type": "Expression"
												},
												"event": {
													"value": "@concat('''', pipeline().parameters.event, '''')",
													"type": "Expression"
												},
												"detailType": {
													"value": "@concat('''', pipeline().parameters.detailType, '''')",
													"type": "Expression"
												},
												"detail_text": {
													"value": "@concat('''', pipeline().parameters.detail_text, '''')",
													"type": "Expression"
												},
												"detail_label": {
													"value": "@concat('''', pipeline().parameters.detail_label, '''')",
													"type": "Expression"
												},
												"detail_count": {
													"value": "@pipeline().parameters.detail_count",
													"type": "Expression"
												},
												"paymentDetail_guid": {
													"value": "@concat('''', pipeline().parameters.paymentDetail_guid, '''')",
													"type": "Expression"
												},
												"detail_payingPartecipants": {
													"value": "@pipeline().parameters.detail_payingPartecipants",
													"type": "Expression"
												},
												"detail_quantity": {
													"value": "@pipeline().parameters.detail_quantity",
													"type": "Expression"
												},
												"tickets_quantity": {
													"value": "@pipeline().parameters.tickets_quantity",
													"type": "Expression"
												},
												"pax_quantity": {
													"value": "@pipeline().parameters.pax_quantity",
													"type": "Expression"
												},
												"costCenter_guid": {
													"value": "@concat('''', pipeline().parameters.costCenter_guid, '''')",
													"type": "Expression"
												},
												"costCenter_label": {
													"value": "@concat('''', pipeline().parameters.costCenter_label, '''')",
													"type": "Expression"
												},
												"object_receipt": {
													"value": "@pipeline().parameters.object_receipt",
													"type": "Expression"
												},
												"object_taxCode": {
													"value": "@concat('''', pipeline().parameters.object_taxCode, '''')",
													"type": "Expression"
												},
												"object_taxNotes": {
													"value": "@concat('''', pipeline().parameters.object_taxNotes, '''')",
													"type": "Expression"
												},
												"object_amount": {
													"value": "@pipeline().parameters.object_amount",
													"type": "Expression"
												},
												"object_taxPercentage": {
													"value": "@pipeline().parameters.object_taxPercentage",
													"type": "Expression"
												},
												"amount": {
													"value": "@pipeline().parameters.amount",
													"type": "Expression"
												},
												"amountNet": {
													"value": "@pipeline().parameters.amountNet",
													"type": "Expression"
												},
												"amountPresale": {
													"value": "@pipeline().parameters.amountPresale",
													"type": "Expression"
												},
												"amountSold": {
													"value": "@pipeline().parameters.amountSold",
													"type": "Expression"
												},
												"amountPayed": {
													"value": "@pipeline().parameters.amountPayed",
													"type": "Expression"
												},
												"amountPending": {
													"value": "@pipeline().parameters.amountPending",
													"type": "Expression"
												},
												"amountCanceled": {
													"value": "@pipeline().parameters.amountCanceled",
													"type": "Expression"
												},
												"externalId": {
													"value": "@concat('''', pipeline().parameters.externalId, '''')",
													"type": "Expression"
												},
												"amountRefunded": {
													"value": "@pipeline().parameters.amountRefunded",
													"type": "Expression"
												},
												"invoiceSummary": {
													"value": "@concat('''', pipeline().parameters.invoiceSummary, '''')",
													"type": "Expression"
												},
												"eventCalendar_guid": {
													"value": "@concat('''', pipeline().parameters.eventCalendar_guid, '''')",
													"type": "Expression"
												},
												"passDetail_guid": {
													"value": "@concat('''', pipeline().parameters.passDetail_guid, '''')",
													"type": "Expression"
												},
												"paymentCostCenter_guid": {
													"value": "@concat('''', pipeline().parameters.paymentCostCenter_guid, '''')",
													"type": "Expression"
												},
												"organization_guid": {
													"value": "@concat('''', pipeline().parameters.organization_guid, '''')",
													"type": "Expression"
												},
												"venue_guid": {
													"value": "@concat('''', pipeline().parameters.venue_guid, '''')",
													"type": "Expression"
												},
												"olapUpdateTimestamp": {
													"value": "@concat('''', pipeline().parameters.olapUpdateTimestamp, '''')",
													"type": "Expression"
												},
												"row_id": {
													"value": "@concat('''', pipeline().parameters.row_id, '''')",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"DummySource": {},
												"SinkComplete": {
													"folderPath": "@pipeline().parameters.targetFolderPath",
													"fileName": "@pipeline().parameters.targetFileName"
												}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Append To Existing File",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "VFD_DFL_Mida2_Atomic_APPEND_Booking_Complete",
											"type": "DataFlowReference",
											"parameters": {
												"guid_pk": {
													"value": "@concat('''', pipeline().parameters.guid_pk, '''')",
													"type": "Expression"
												},
												"reservation_progressiveCode": {
													"value": "@concat('''', pipeline().parameters.reservation_progressiveCode, '''')",
													"type": "Expression"
												},
												"reservation_code": {
													"value": "@concat('''', pipeline().parameters.reservation_code, '''')",
													"type": "Expression"
												},
												"reservation_status": {
													"value": "@pipeline().parameters.reservation_status",
													"type": "Expression"
												},
												"invoiceRequired": {
													"value": "@concat('''', pipeline().parameters.invoiceRequired, '''')",
													"type": "Expression"
												},
												"customer": {
													"value": "@pipeline().parameters.customer",
													"type": "Expression"
												},
												"visitDate": {
													"value": "@concat('''', pipeline().parameters.visitDate, '''')",
													"type": "Expression"
												},
												"reservationPayment_guid": {
													"value": "@concat('''', pipeline().parameters.reservationPayment_guid, '''')",
													"type": "Expression"
												},
												"parentPayment_guid": {
													"value": "@concat('''', pipeline().parameters.parentPayment_guid, '''')",
													"type": "Expression"
												},
												"sliced": {
													"value": "@concat('''', pipeline().parameters.sliced, '''')",
													"type": "Expression"
												},
												"reservation_guid": {
													"value": "@concat('''', pipeline().parameters.reservation_guid, '''')",
													"type": "Expression"
												},
												"group_guid": {
													"value": "@concat('''', pipeline().parameters.group_guid, '''')",
													"type": "Expression"
												},
												"group_label": {
													"value": "@concat('''', pipeline().parameters.group_label, '''')",
													"type": "Expression"
												},
												"group_email": {
													"value": "@concat('''', pipeline().parameters.group_email, '''')",
													"type": "Expression"
												},
												"paymentCode": {
													"value": "@concat('''', pipeline().parameters.paymentCode, '''')",
													"type": "Expression"
												},
												"paymentCondition": {
													"value": "@pipeline().parameters.paymentCondition",
													"type": "Expression"
												},
												"reservation_amount": {
													"value": "@pipeline().parameters.reservation_amount",
													"type": "Expression"
												},
												"reservation_amountTax": {
													"value": "@pipeline().parameters.reservation_amountTax",
													"type": "Expression"
												},
												"status": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												},
												"status_text": {
													"value": "@concat('''', pipeline().parameters.status_text, '''')",
													"type": "Expression"
												},
												"stamp": {
													"value": "@concat('''', pipeline().parameters.stamp, '''')",
													"type": "Expression"
												},
												"notes": {
													"value": "@concat('''', pipeline().parameters.notes, '''')",
													"type": "Expression"
												},
												"transactionType": {
													"value": "@concat('''', pipeline().parameters.transactionType, '''')",
													"type": "Expression"
												},
												"transactionType_text": {
													"value": "@concat('''', pipeline().parameters.transactionType_text, '''')",
													"type": "Expression"
												},
												"paymentLimitDate": {
													"value": "@concat('''', pipeline().parameters.paymentLimitDate, '''')",
													"type": "Expression"
												},
												"paymentDate": {
													"value": "@concat('''', pipeline().parameters.paymentDate, '''')",
													"type": "Expression"
												},
												"refund": {
													"value": "@concat('''', pipeline().parameters.refund, '''')",
													"type": "Expression"
												},
												"refunded": {
													"value": "@concat('''', pipeline().parameters.refunded, '''')",
													"type": "Expression"
												},
												"convention_label": {
													"value": "@concat('''', pipeline().parameters.convention_label, '''')",
													"type": "Expression"
												},
												"receiptCode": {
													"value": "@concat('''', pipeline().parameters.receiptCode, '''')",
													"type": "Expression"
												},
												"insertTimestamp": {
													"value": "@concat('''', pipeline().parameters.insertTimestamp, '''')",
													"type": "Expression"
												},
												"updateTimestamp": {
													"value": "@concat('''', pipeline().parameters.updateTimestamp, '''')",
													"type": "Expression"
												},
												"owner": {
													"value": "@concat('''', pipeline().parameters.owner, '''')",
													"type": "Expression"
												},
												"owner_text": {
													"value": "@concat('''', pipeline().parameters.owner_text, '''')",
													"type": "Expression"
												},
												"sessionId": {
													"value": "@concat('''', pipeline().parameters.sessionId, '''')",
													"type": "Expression"
												},
												"terminal_label": {
													"value": "@concat('''', pipeline().parameters.terminal_label, '''')",
													"type": "Expression"
												},
												"terminalGroup_label": {
													"value": "@concat('''', pipeline().parameters.terminalGroup_label, '''')",
													"type": "Expression"
												},
												"gateway_guid": {
													"value": "@concat('''', pipeline().parameters.gateway_guid, '''')",
													"type": "Expression"
												},
												"gateway_label": {
													"value": "@concat('''', pipeline().parameters.gateway_label, '''')",
													"type": "Expression"
												},
												"transactionID": {
													"value": "@concat('''', pipeline().parameters.transactionID, '''')",
													"type": "Expression"
												},
												"bankAccount_guid": {
													"value": "@concat('''', pipeline().parameters.bankAccount_guid, '''')",
													"type": "Expression"
												},
												"bankAccount_label": {
													"value": "@concat('''', pipeline().parameters.bankAccount_label, '''')",
													"type": "Expression"
												},
												"channel_guid": {
													"value": "@concat('''', pipeline().parameters.channel_guid, '''')",
													"type": "Expression"
												},
												"channel_label": {
													"value": "@concat('''', pipeline().parameters.channel_label, '''')",
													"type": "Expression"
												},
												"channelType": {
													"value": "@concat('''', pipeline().parameters.channelType, '''')",
													"type": "Expression"
												},
												"detail_guid": {
													"value": "@concat('''', pipeline().parameters.detail_guid, '''')",
													"type": "Expression"
												},
												"extra_guid": {
													"value": "@concat('''', pipeline().parameters.extra_guid, '''')",
													"type": "Expression"
												},
												"priceList": {
													"value": "@concat('''', pipeline().parameters.priceList, '''')",
													"type": "Expression"
												},
												"event": {
													"value": "@concat('''', pipeline().parameters.event, '''')",
													"type": "Expression"
												},
												"detailType": {
													"value": "@concat('''', pipeline().parameters.detailType, '''')",
													"type": "Expression"
												},
												"detail_text": {
													"value": "@concat('''', pipeline().parameters.detail_text, '''')",
													"type": "Expression"
												},
												"detail_label": {
													"value": "@concat('''', pipeline().parameters.detail_label, '''')",
													"type": "Expression"
												},
												"detail_count": {
													"value": "@pipeline().parameters.detail_count",
													"type": "Expression"
												},
												"paymentDetail_guid": {
													"value": "@concat('''', pipeline().parameters.paymentDetail_guid, '''')",
													"type": "Expression"
												},
												"detail_payingPartecipants": {
													"value": "@pipeline().parameters.detail_payingPartecipants",
													"type": "Expression"
												},
												"detail_quantity": {
													"value": "@pipeline().parameters.detail_quantity",
													"type": "Expression"
												},
												"tickets_quantity": {
													"value": "@pipeline().parameters.tickets_quantity",
													"type": "Expression"
												},
												"pax_quantity": {
													"value": "@pipeline().parameters.pax_quantity",
													"type": "Expression"
												},
												"costCenter_guid": {
													"value": "@concat('''', pipeline().parameters.costCenter_guid, '''')",
													"type": "Expression"
												},
												"costCenter_label": {
													"value": "@concat('''', pipeline().parameters.costCenter_label, '''')",
													"type": "Expression"
												},
												"object_receipt": {
													"value": "@pipeline().parameters.object_receipt",
													"type": "Expression"
												},
												"object_taxCode": {
													"value": "@concat('''', pipeline().parameters.object_taxCode, '''')",
													"type": "Expression"
												},
												"object_taxNotes": {
													"value": "@concat('''', pipeline().parameters.object_taxNotes, '''')",
													"type": "Expression"
												},
												"object_amount": {
													"value": "@pipeline().parameters.object_amount",
													"type": "Expression"
												},
												"object_taxPercentage": {
													"value": "@pipeline().parameters.object_taxPercentage",
													"type": "Expression"
												},
												"amount": {
													"value": "@pipeline().parameters.amount",
													"type": "Expression"
												},
												"amountNet": {
													"value": "@pipeline().parameters.amountNet",
													"type": "Expression"
												},
												"amountPresale": {
													"value": "@pipeline().parameters.amountPresale",
													"type": "Expression"
												},
												"amountSold": {
													"value": "@pipeline().parameters.amountSold",
													"type": "Expression"
												},
												"amountPayed": {
													"value": "@pipeline().parameters.amountPayed",
													"type": "Expression"
												},
												"amountPending": {
													"value": "@pipeline().parameters.amountPending",
													"type": "Expression"
												},
												"amountCanceled": {
													"value": "@pipeline().parameters.amountCanceled",
													"type": "Expression"
												},
												"externalId": {
													"value": "@concat('''', pipeline().parameters.externalId, '''')",
													"type": "Expression"
												},
												"amountRefunded": {
													"value": "@pipeline().parameters.amountRefunded",
													"type": "Expression"
												},
												"invoiceSummary": {
													"value": "@concat('''', pipeline().parameters.invoiceSummary, '''')",
													"type": "Expression"
												},
												"eventCalendar_guid": {
													"value": "@concat('''', pipeline().parameters.eventCalendar_guid, '''')",
													"type": "Expression"
												},
												"passDetail_guid": {
													"value": "@concat('''', pipeline().parameters.passDetail_guid, '''')",
													"type": "Expression"
												},
												"paymentCostCenter_guid": {
													"value": "@concat('''', pipeline().parameters.paymentCostCenter_guid, '''')",
													"type": "Expression"
												},
												"organization_guid": {
													"value": "@concat('''', pipeline().parameters.organization_guid, '''')",
													"type": "Expression"
												},
												"venue_guid": {
													"value": "@concat('''', pipeline().parameters.venue_guid, '''')",
													"type": "Expression"
												},
												"olapUpdateTimestamp": {
													"value": "@concat('''', pipeline().parameters.olapUpdateTimestamp, '''')",
													"type": "Expression"
												},
												"row_id": {
													"value": "@concat('''', pipeline().parameters.row_id, '''')",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"DummySource": {},
												"SourceExistingContent": {
													"folderPath": "@pipeline().parameters.targetFolderPath",
													"fileName": "@pipeline().parameters.targetFileName"
												},
												"SinkTemp": {
													"folderPath": "@pipeline().parameters.tempFolderPath",
													"fileName": "@pipeline().parameters.tempFileName"
												}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								},
								{
									"name": "Copy Temp To Final",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Append To Existing File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": false,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "ParquetReadSettings"
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": "@pipeline().parameters.tempFolderPath",
												"fileName": "@pipeline().parameters.tempFileName"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "VFD_DS_Curated_Mida_Bookings_Complete_Parquet",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": "@pipeline().parameters.targetFolderPath",
												"fileName": "@pipeline().parameters.targetFileName"
											}
										}
									]
								},
								{
									"name": "Delete Temp File",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Copy Temp To Final",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": "@pipeline().parameters.tempFolderPath",
												"fileName": "@pipeline().parameters.tempFileName"
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": false,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"guid_pk": {
						"type": "string"
					},
					"reservation_progressiveCode": {
						"type": "string"
					},
					"reservation_code": {
						"type": "string"
					},
					"reservation_status": {
						"type": "int"
					},
					"invoiceRequired": {
						"type": "string"
					},
					"customer": {
						"type": "float"
					},
					"visitDate": {
						"type": "string"
					},
					"reservationPayment_guid": {
						"type": "string"
					},
					"parentPayment_guid": {
						"type": "string"
					},
					"sliced": {
						"type": "string"
					},
					"reservation_guid": {
						"type": "string"
					},
					"group_guid": {
						"type": "string"
					},
					"group_label": {
						"type": "string"
					},
					"group_email": {
						"type": "string"
					},
					"paymentCode": {
						"type": "string"
					},
					"paymentCondition": {
						"type": "float"
					},
					"reservation_amount": {
						"type": "float"
					},
					"reservation_amountTax": {
						"type": "float"
					},
					"status": {
						"type": "int"
					},
					"status_text": {
						"type": "string"
					},
					"stamp": {
						"type": "string"
					},
					"notes": {
						"type": "string"
					},
					"transactionType": {
						"type": "string"
					},
					"transactionType_text": {
						"type": "string"
					},
					"paymentLimitDate": {
						"type": "string"
					},
					"paymentDate": {
						"type": "string"
					},
					"refund": {
						"type": "string"
					},
					"refunded": {
						"type": "string"
					},
					"convention_label": {
						"type": "string"
					},
					"receiptCode": {
						"type": "string"
					},
					"insertTimestamp": {
						"type": "string"
					},
					"updateTimestamp": {
						"type": "string"
					},
					"owner": {
						"type": "string"
					},
					"owner_text": {
						"type": "string"
					},
					"sessionId": {
						"type": "string"
					},
					"terminal_label": {
						"type": "string"
					},
					"terminalGroup_label": {
						"type": "string"
					},
					"gateway_guid": {
						"type": "string"
					},
					"gateway_label": {
						"type": "string"
					},
					"transactionID": {
						"type": "string"
					},
					"bankAccount_guid": {
						"type": "string"
					},
					"bankAccount_label": {
						"type": "string"
					},
					"channel_guid": {
						"type": "string"
					},
					"channel_label": {
						"type": "string"
					},
					"channelType": {
						"type": "string"
					},
					"detail_guid": {
						"type": "string"
					},
					"extra_guid": {
						"type": "string"
					},
					"priceList": {
						"type": "string"
					},
					"event": {
						"type": "string"
					},
					"detailType": {
						"type": "string"
					},
					"detail_text": {
						"type": "string"
					},
					"detail_label": {
						"type": "string"
					},
					"detail_count": {
						"type": "int"
					},
					"paymentDetail_guid": {
						"type": "string"
					},
					"detail_payingPartecipants": {
						"type": "int"
					},
					"detail_quantity": {
						"type": "int"
					},
					"tickets_quantity": {
						"type": "int"
					},
					"pax_quantity": {
						"type": "int"
					},
					"costCenter_guid": {
						"type": "string"
					},
					"costCenter_label": {
						"type": "string"
					},
					"object_receipt": {
						"type": "int"
					},
					"object_taxCode": {
						"type": "string"
					},
					"object_taxNotes": {
						"type": "string"
					},
					"object_amount": {
						"type": "float"
					},
					"object_taxPercentage": {
						"type": "float"
					},
					"amount": {
						"type": "float"
					},
					"amountNet": {
						"type": "float"
					},
					"amountPresale": {
						"type": "float"
					},
					"amountSold": {
						"type": "float"
					},
					"amountPayed": {
						"type": "float"
					},
					"amountPending": {
						"type": "float"
					},
					"amountCanceled": {
						"type": "float"
					},
					"externalId": {
						"type": "string"
					},
					"amountRefunded": {
						"type": "float"
					},
					"invoiceSummary": {
						"type": "string"
					},
					"eventCalendar_guid": {
						"type": "string"
					},
					"passDetail_guid": {
						"type": "string"
					},
					"paymentCostCenter_guid": {
						"type": "string"
					},
					"organization_guid": {
						"type": "string"
					},
					"venue_guid": {
						"type": "string"
					},
					"olapUpdateTimestamp": {
						"type": "string"
					},
					"row_id": {
						"type": "string"
					},
					"targetFolderPath": {
						"type": "string"
					},
					"targetFileName": {
						"type": "string"
					},
					"tempFolderPath": {
						"type": "string"
					},
					"tempFileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"annotations": [
					"pipeline atomica per inserimento prenotazioni complete",
					"Sintassi corretta e uniforme per entrambi i dataflow CREATE e APPEND"
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Mida2_Atomic_INSERT_Booking_Summary')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "pipeline atomica per inserimento di una prenotazione nel file summary - riceve solo i 9 campi summary",
				"activities": [
					{
						"name": "Check Summary File Exists",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Summary_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "@pipeline().parameters.targetFolderPath",
									"fileName": "@pipeline().parameters.targetFileName"
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "If File Exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check Summary File Exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('Check Summary File Exists').output.exists",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Create New Summary File",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "VFD_DFL_Mida2_Atomic_CREATE_Booking_Summary",
											"type": "DataFlowReference",
											"parameters": {
												"row_id": {
													"value": "@concat('''', pipeline().parameters.row_id, '''')",
													"type": "Expression"
												},
												"reservation_code": {
													"value": "@concat('''', pipeline().parameters.reservation_code, '''')",
													"type": "Expression"
												},
												"priceList": {
													"value": "@concat('''', pipeline().parameters.priceList, '''')",
													"type": "Expression"
												},
												"channel_label": {
													"value": "@concat('''', pipeline().parameters.channel_label, '''')",
													"type": "Expression"
												},
												"pax_quantity": {
													"value": "@pipeline().parameters.pax_quantity",
													"type": "Expression"
												},
												"insertTimestamp": {
													"value": "@concat('''', pipeline().parameters.insertTimestamp, '''')",
													"type": "Expression"
												},
												"updateTimestamp": {
													"value": "@concat('''', pipeline().parameters.updateTimestamp, '''')",
													"type": "Expression"
												},
												"reservation_amount": {
													"value": "@pipeline().parameters.reservation_amount",
													"type": "Expression"
												},
												"visitDate": {
													"value": "@concat('''', pipeline().parameters.visitDate, '''')",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"DummySource": {},
												"SinkSummary": {
													"folderPath": "@pipeline().parameters.targetFolderPath",
													"fileName": "@pipeline().parameters.targetFileName"
												}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Append To Existing File",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "VFD_DFL_Mida2_Atomic_APPEND_Booking_Summary",
											"type": "DataFlowReference",
											"parameters": {
												"row_id": {
													"value": "@concat('''', pipeline().parameters.row_id, '''')",
													"type": "Expression"
												},
												"reservation_code": {
													"value": "@concat('''', pipeline().parameters.reservation_code, '''')",
													"type": "Expression"
												},
												"priceList": {
													"value": "@concat('''', pipeline().parameters.priceList, '''')",
													"type": "Expression"
												},
												"channel_label": {
													"value": "@concat('''', pipeline().parameters.channel_label, '''')",
													"type": "Expression"
												},
												"pax_quantity": {
													"value": "@pipeline().parameters.pax_quantity",
													"type": "Expression"
												},
												"insertTimestamp": {
													"value": "@concat('''', pipeline().parameters.insertTimestamp, '''')",
													"type": "Expression"
												},
												"updateTimestamp": {
													"value": "@concat('''', pipeline().parameters.updateTimestamp, '''')",
													"type": "Expression"
												},
												"reservation_amount": {
													"value": "@pipeline().parameters.reservation_amount",
													"type": "Expression"
												},
												"visitDate": {
													"value": "@concat('''', pipeline().parameters.visitDate, '''')",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"DummySource": {},
												"SourceExistingContent": {
													"folderPath": "@pipeline().parameters.targetFolderPath",
													"fileName": "@pipeline().parameters.targetFileName"
												},
												"SinkTemp": {
													"folderPath": "@pipeline().parameters.tempFolderPath",
													"fileName": "@pipeline().parameters.tempFileName"
												}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								},
								{
									"name": "Copy Temp To Final",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Append To Existing File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": false,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "ParquetReadSettings"
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": "@pipeline().parameters.tempFolderPath",
												"fileName": "@pipeline().parameters.tempFileName"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "VFD_DS_Curated_Mida_Bookings_Summary_Parquet",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": "@pipeline().parameters.targetFolderPath",
												"fileName": "@pipeline().parameters.targetFileName"
											}
										}
									]
								},
								{
									"name": "Delete Temp File",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Copy Temp To Final",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": "@pipeline().parameters.tempFolderPath",
												"fileName": "@pipeline().parameters.tempFileName"
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": false,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"row_id": {
						"type": "string"
					},
					"reservation_code": {
						"type": "string"
					},
					"priceList": {
						"type": "string"
					},
					"channel_label": {
						"type": "string"
					},
					"pax_quantity": {
						"type": "int"
					},
					"insertTimestamp": {
						"type": "string"
					},
					"updateTimestamp": {
						"type": "string"
					},
					"reservation_amount": {
						"type": "float"
					},
					"visitDate": {
						"type": "string"
					},
					"targetFolderPath": {
						"type": "string"
					},
					"targetFileName": {
						"type": "string"
					},
					"tempFolderPath": {
						"type": "string"
					},
					"tempFileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"annotations": [
					"pipeline atomica per inserimento prenotazioni summary",
					"Riceve solo i 9 campi del summary",
					"Sintassi corretta uniforme per CREATE e APPEND"
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Mida2_Atomic_LOOKUP_Historical')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline atomica per cercare record nel file historical usando row_id",
				"activities": [
					{
						"name": "Lookup Historical Record",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_Mida2_Atomic_LOOKUP_Historical",
								"type": "DataFlowReference",
								"parameters": {
									"row_id": {
										"value": "@concat('''', pipeline().parameters.row_id, '''')",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SourceHistorical": {
										"folderPath": "@pipeline().parameters.sourceFolderPath",
										"fileName": "@pipeline().parameters.sourceFileName"
									},
									"SinkTemp": {
										"folderPath": "@pipeline().parameters.outputFolderPath",
										"fileName": "@pipeline().parameters.outputFileName"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Check If Record Found",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Lookup Historical Record",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "@pipeline().parameters.outputFolderPath",
									"fileName": "@pipeline().parameters.outputFileName"
								}
							},
							"fieldList": [
								"exists",
								"size"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Set Output Variable",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Check If Record Found",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "recordFound",
							"value": {
								"value": "@if(greater(activity('Check If Record Found').output.size, 0), true, false)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"row_id": {
						"type": "string"
					},
					"sourceFolderPath": {
						"type": "string"
					},
					"sourceFileName": {
						"type": "string"
					},
					"outputFolderPath": {
						"type": "string"
					},
					"outputFileName": {
						"type": "string"
					}
				},
				"variables": {
					"recordFound": {
						"type": "Boolean",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"annotations": [
					"Pipeline per lookup in historical",
					"Cerca record per row_id e salva risultato in file temp",
					"Sintassi corretta per parametri dataflow"
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Mida2_Atomic_LOOKUP_Summary')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline atomica per cercare record nel file summary usando row_id",
				"activities": [
					{
						"name": "Lookup Summary Record",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_Mida2_Atomic_LOOKUP_Summary",
								"type": "DataFlowReference",
								"parameters": {
									"row_id": {
										"value": "@concat('''', pipeline().parameters.row_id, '''')",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SourceSummaryFile": {
										"folderPath": "@pipeline().parameters.sourceFolderPath",
										"fileName": "@pipeline().parameters.sourceFileName"
									},
									"SinkTemp": {
										"folderPath": "@pipeline().parameters.outputFolderPath",
										"fileName": "@pipeline().parameters.outputFileName"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Check If Record Found",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Lookup Summary Record",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "@pipeline().parameters.outputFolderPath",
									"fileName": "@pipeline().parameters.outputFileName"
								}
							},
							"fieldList": [
								"exists",
								"size"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Set Output Variable",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Check If Record Found",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "recordFound",
							"value": {
								"value": "@if(greater(activity('Check If Record Found').output.size, 0), true, false)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Record Found Copy Fields",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set Output Variable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('recordFound')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Set Summary Fields",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "summaryFields",
										"value": {
											"value": "@concat('Record found for row_id: ', pipeline().parameters.row_id)",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"row_id": {
						"type": "string"
					},
					"sourceFolderPath": {
						"type": "string"
					},
					"sourceFileName": {
						"type": "string"
					},
					"outputFolderPath": {
						"type": "string"
					},
					"outputFileName": {
						"type": "string"
					}
				},
				"variables": {
					"recordFound": {
						"type": "Boolean",
						"defaultValue": false
					},
					"summaryFields": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"annotations": [
					"Pipeline per lookup in summary",
					"Cerca record per row_id nei file summary",
					"Sintassi corretta per parametri dataflow"
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Mida2_Atomic_UPDATE_Booking_Complete')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline atomica per aggiornamento di una prenotazione nel file completo - riceve tutti i campi come parametri",
				"activities": [
					{
						"name": "Update Existing Record",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_Mida2_Atomic_UPDATE_Booking_Complete",
								"type": "DataFlowReference",
								"parameters": {
									"guid_pk": {
										"value": "@concat('''', pipeline().parameters.guid_pk, '''')",
										"type": "Expression"
									},
									"reservation_progressiveCode": {
										"value": "@concat('''', pipeline().parameters.reservation_progressiveCode, '''')",
										"type": "Expression"
									},
									"reservation_code": {
										"value": "@concat('''', pipeline().parameters.reservation_code, '''')",
										"type": "Expression"
									},
									"reservation_status": {
										"value": "pipeline().parameters.reservation_status",
										"type": "Expression"
									},
									"invoiceRequired": {
										"value": "@concat('''', pipeline().parameters.invoiceRequired, '''')",
										"type": "Expression"
									},
									"customer": {
										"value": "pipeline().parameters.customer",
										"type": "Expression"
									},
									"visitDate": {
										"value": "@concat('''', pipeline().parameters.visitDate, '''')",
										"type": "Expression"
									},
									"reservationPayment_guid": {
										"value": "@concat('''', pipeline().parameters.reservationPayment_guid, '''')",
										"type": "Expression"
									},
									"parentPayment_guid": {
										"value": "@concat('''', pipeline().parameters.parentPayment_guid, '''')",
										"type": "Expression"
									},
									"sliced": {
										"value": "@concat('''', pipeline().parameters.sliced, '''')",
										"type": "Expression"
									},
									"reservation_guid": {
										"value": "@concat('''', pipeline().parameters.reservation_guid, '''')",
										"type": "Expression"
									},
									"group_guid": {
										"value": "@concat('''', pipeline().parameters.group_guid, '''')",
										"type": "Expression"
									},
									"group_label": {
										"value": "@concat('''', pipeline().parameters.group_label, '''')",
										"type": "Expression"
									},
									"group_email": {
										"value": "@concat('''', pipeline().parameters.group_email, '''')",
										"type": "Expression"
									},
									"paymentCode": {
										"value": "@concat('''', pipeline().parameters.paymentCode, '''')",
										"type": "Expression"
									},
									"paymentCondition": {
										"value": "pipeline().parameters.paymentCondition",
										"type": "Expression"
									},
									"reservation_amount": {
										"value": "pipeline().parameters.reservation_amount",
										"type": "Expression"
									},
									"reservation_amountTax": {
										"value": "pipeline().parameters.reservation_amountTax",
										"type": "Expression"
									},
									"status": {
										"value": "pipeline().parameters.status",
										"type": "Expression"
									},
									"status_text": {
										"value": "@concat('''', pipeline().parameters.status_text, '''')",
										"type": "Expression"
									},
									"stamp": {
										"value": "@concat('''', pipeline().parameters.stamp, '''')",
										"type": "Expression"
									},
									"notes": {
										"value": "@concat('''', pipeline().parameters.notes, '''')",
										"type": "Expression"
									},
									"transactionType": {
										"value": "@concat('''', pipeline().parameters.transactionType, '''')",
										"type": "Expression"
									},
									"transactionType_text": {
										"value": "@concat('''', pipeline().parameters.transactionType_text, '''')",
										"type": "Expression"
									},
									"paymentLimitDate": {
										"value": "@concat('''', pipeline().parameters.paymentLimitDate, '''')",
										"type": "Expression"
									},
									"paymentDate": {
										"value": "@concat('''', pipeline().parameters.paymentDate, '''')",
										"type": "Expression"
									},
									"refund": {
										"value": "@concat('''', pipeline().parameters.refund, '''')",
										"type": "Expression"
									},
									"refunded": {
										"value": "@concat('''', pipeline().parameters.refunded, '''')",
										"type": "Expression"
									},
									"convention_label": {
										"value": "@concat('''', pipeline().parameters.convention_label, '''')",
										"type": "Expression"
									},
									"receiptCode": {
										"value": "@concat('''', pipeline().parameters.receiptCode, '''')",
										"type": "Expression"
									},
									"insertTimestamp": {
										"value": "@concat('''', pipeline().parameters.insertTimestamp, '''')",
										"type": "Expression"
									},
									"updateTimestamp": {
										"value": "@concat('''', pipeline().parameters.updateTimestamp, '''')",
										"type": "Expression"
									},
									"owner": {
										"value": "@concat('''', pipeline().parameters.owner, '''')",
										"type": "Expression"
									},
									"owner_text": {
										"value": "@concat('''', pipeline().parameters.owner_text, '''')",
										"type": "Expression"
									},
									"sessionId": {
										"value": "@concat('''', pipeline().parameters.sessionId, '''')",
										"type": "Expression"
									},
									"terminal_label": {
										"value": "@concat('''', pipeline().parameters.terminal_label, '''')",
										"type": "Expression"
									},
									"terminalGroup_label": {
										"value": "@concat('''', pipeline().parameters.terminalGroup_label, '''')",
										"type": "Expression"
									},
									"gateway_guid": {
										"value": "@concat('''', pipeline().parameters.gateway_guid, '''')",
										"type": "Expression"
									},
									"gateway_label": {
										"value": "@concat('''', pipeline().parameters.gateway_label, '''')",
										"type": "Expression"
									},
									"transactionID": {
										"value": "@concat('''', pipeline().parameters.transactionID, '''')",
										"type": "Expression"
									},
									"bankAccount_guid": {
										"value": "@concat('''', pipeline().parameters.bankAccount_guid, '''')",
										"type": "Expression"
									},
									"bankAccount_label": {
										"value": "@concat('''', pipeline().parameters.bankAccount_label, '''')",
										"type": "Expression"
									},
									"channel_guid": {
										"value": "@concat('''', pipeline().parameters.channel_guid, '''')",
										"type": "Expression"
									},
									"channel_label": {
										"value": "@concat('''', pipeline().parameters.channel_label, '''')",
										"type": "Expression"
									},
									"channelType": {
										"value": "@concat('''', pipeline().parameters.channelType, '''')",
										"type": "Expression"
									},
									"detail_guid": {
										"value": "@concat('''', pipeline().parameters.detail_guid, '''')",
										"type": "Expression"
									},
									"extra_guid": {
										"value": "@concat('''', pipeline().parameters.extra_guid, '''')",
										"type": "Expression"
									},
									"priceList": {
										"value": "@concat('''', pipeline().parameters.priceList, '''')",
										"type": "Expression"
									},
									"event": {
										"value": "@concat('''', pipeline().parameters.event, '''')",
										"type": "Expression"
									},
									"detailType": {
										"value": "@concat('''', pipeline().parameters.detailType, '''')",
										"type": "Expression"
									},
									"detail_text": {
										"value": "@concat('''', pipeline().parameters.detail_text, '''')",
										"type": "Expression"
									},
									"detail_label": {
										"value": "@concat('''', pipeline().parameters.detail_label, '''')",
										"type": "Expression"
									},
									"detail_count": {
										"value": "pipeline().parameters.detail_count",
										"type": "Expression"
									},
									"paymentDetail_guid": {
										"value": "@concat('''', pipeline().parameters.paymentDetail_guid, '''')",
										"type": "Expression"
									},
									"detail_payingPartecipants": {
										"value": "pipeline().parameters.detail_payingPartecipants",
										"type": "Expression"
									},
									"detail_quantity": {
										"value": "pipeline().parameters.detail_quantity",
										"type": "Expression"
									},
									"tickets_quantity": {
										"value": "pipeline().parameters.tickets_quantity",
										"type": "Expression"
									},
									"pax_quantity": {
										"value": "pipeline().parameters.pax_quantity",
										"type": "Expression"
									},
									"costCenter_guid": {
										"value": "@concat('''', pipeline().parameters.costCenter_guid, '''')",
										"type": "Expression"
									},
									"costCenter_label": {
										"value": "@concat('''', pipeline().parameters.costCenter_label, '''')",
										"type": "Expression"
									},
									"object_receipt": {
										"value": "pipeline().parameters.object_receipt",
										"type": "Expression"
									},
									"object_taxCode": {
										"value": "@concat('''', pipeline().parameters.object_taxCode, '''')",
										"type": "Expression"
									},
									"object_taxNotes": {
										"value": "@concat('''', pipeline().parameters.object_taxNotes, '''')",
										"type": "Expression"
									},
									"object_amount": {
										"value": "pipeline().parameters.object_amount",
										"type": "Expression"
									},
									"object_taxPercentage": {
										"value": "pipeline().parameters.object_taxPercentage",
										"type": "Expression"
									},
									"amount": {
										"value": "pipeline().parameters.amount",
										"type": "Expression"
									},
									"amountNet": {
										"value": "pipeline().parameters.amountNet",
										"type": "Expression"
									},
									"amountPresale": {
										"value": "pipeline().parameters.amountPresale",
										"type": "Expression"
									},
									"amountSold": {
										"value": "pipeline().parameters.amountSold",
										"type": "Expression"
									},
									"amountPayed": {
										"value": "pipeline().parameters.amountPayed",
										"type": "Expression"
									},
									"amountPending": {
										"value": "pipeline().parameters.amountPending",
										"type": "Expression"
									},
									"amountCanceled": {
										"value": "pipeline().parameters.amountCanceled",
										"type": "Expression"
									},
									"externalId": {
										"value": "@concat('''', pipeline().parameters.externalId, '''')",
										"type": "Expression"
									},
									"amountRefunded": {
										"value": "pipeline().parameters.amountRefunded",
										"type": "Expression"
									},
									"invoiceSummary": {
										"value": "@concat('''', pipeline().parameters.invoiceSummary, '''')",
										"type": "Expression"
									},
									"eventCalendar_guid": {
										"value": "@concat('''', pipeline().parameters.eventCalendar_guid, '''')",
										"type": "Expression"
									},
									"passDetail_guid": {
										"value": "@concat('''', pipeline().parameters.passDetail_guid, '''')",
										"type": "Expression"
									},
									"paymentCostCenter_guid": {
										"value": "@concat('''', pipeline().parameters.paymentCostCenter_guid, '''')",
										"type": "Expression"
									},
									"organization_guid": {
										"value": "@concat('''', pipeline().parameters.organization_guid, '''')",
										"type": "Expression"
									},
									"venue_guid": {
										"value": "@concat('''', pipeline().parameters.venue_guid, '''')",
										"type": "Expression"
									},
									"olapUpdateTimestamp": {
										"value": "@concat('''', pipeline().parameters.olapUpdateTimestamp, '''')",
										"type": "Expression"
									},
									"row_id": {
										"value": "@concat('''', pipeline().parameters.row_id, '''')",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"DummySource": {},
									"SourceExistingContent": {
										"folderPath": "@pipeline().parameters.targetFolderPath",
										"fileName": "@pipeline().parameters.targetFileName"
									},
									"SinkTemp": {
										"folderPath": "@pipeline().parameters.tempFolderPath",
										"fileName": "temp_update_complete.parquet"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Copy Temp To Final",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Update Existing Record",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "@pipeline().parameters.tempFolderPath",
									"fileName": "temp_update_complete.parquet"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Complete_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "@pipeline().parameters.targetFolderPath",
									"fileName": "@pipeline().parameters.targetFileName"
								}
							}
						]
					},
					{
						"name": "Delete Temp File",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy Temp To Final",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "@pipeline().parameters.tempFolderPath",
									"fileName": "temp_update_complete.parquet"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": false,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"guid_pk": {
						"type": "string"
					},
					"reservation_progressiveCode": {
						"type": "string"
					},
					"reservation_code": {
						"type": "string"
					},
					"reservation_status": {
						"type": "int"
					},
					"invoiceRequired": {
						"type": "string"
					},
					"customer": {
						"type": "float"
					},
					"visitDate": {
						"type": "string"
					},
					"reservationPayment_guid": {
						"type": "string"
					},
					"parentPayment_guid": {
						"type": "string"
					},
					"sliced": {
						"type": "string"
					},
					"reservation_guid": {
						"type": "string"
					},
					"group_guid": {
						"type": "string"
					},
					"group_label": {
						"type": "string"
					},
					"group_email": {
						"type": "string"
					},
					"paymentCode": {
						"type": "string"
					},
					"paymentCondition": {
						"type": "float"
					},
					"reservation_amount": {
						"type": "float"
					},
					"reservation_amountTax": {
						"type": "float"
					},
					"status": {
						"type": "int"
					},
					"status_text": {
						"type": "string"
					},
					"stamp": {
						"type": "string"
					},
					"notes": {
						"type": "string"
					},
					"transactionType": {
						"type": "string"
					},
					"transactionType_text": {
						"type": "string"
					},
					"paymentLimitDate": {
						"type": "string"
					},
					"paymentDate": {
						"type": "string"
					},
					"refund": {
						"type": "string"
					},
					"refunded": {
						"type": "string"
					},
					"convention_label": {
						"type": "string"
					},
					"receiptCode": {
						"type": "string"
					},
					"insertTimestamp": {
						"type": "string"
					},
					"updateTimestamp": {
						"type": "string"
					},
					"owner": {
						"type": "string"
					},
					"owner_text": {
						"type": "string"
					},
					"sessionId": {
						"type": "string"
					},
					"terminal_label": {
						"type": "string"
					},
					"terminalGroup_label": {
						"type": "string"
					},
					"gateway_guid": {
						"type": "string"
					},
					"gateway_label": {
						"type": "string"
					},
					"transactionID": {
						"type": "string"
					},
					"bankAccount_guid": {
						"type": "string"
					},
					"bankAccount_label": {
						"type": "string"
					},
					"channel_guid": {
						"type": "string"
					},
					"channel_label": {
						"type": "string"
					},
					"channelType": {
						"type": "string"
					},
					"detail_guid": {
						"type": "string"
					},
					"extra_guid": {
						"type": "string"
					},
					"priceList": {
						"type": "string"
					},
					"event": {
						"type": "string"
					},
					"detailType": {
						"type": "string"
					},
					"detail_text": {
						"type": "string"
					},
					"detail_label": {
						"type": "string"
					},
					"detail_count": {
						"type": "int"
					},
					"paymentDetail_guid": {
						"type": "string"
					},
					"detail_payingPartecipants": {
						"type": "int"
					},
					"detail_quantity": {
						"type": "int"
					},
					"tickets_quantity": {
						"type": "int"
					},
					"pax_quantity": {
						"type": "int"
					},
					"costCenter_guid": {
						"type": "string"
					},
					"costCenter_label": {
						"type": "string"
					},
					"object_receipt": {
						"type": "int"
					},
					"object_taxCode": {
						"type": "string"
					},
					"object_taxNotes": {
						"type": "string"
					},
					"object_amount": {
						"type": "float"
					},
					"object_taxPercentage": {
						"type": "float"
					},
					"amount": {
						"type": "float"
					},
					"amountNet": {
						"type": "float"
					},
					"amountPresale": {
						"type": "float"
					},
					"amountSold": {
						"type": "float"
					},
					"amountPayed": {
						"type": "float"
					},
					"amountPending": {
						"type": "float"
					},
					"amountCanceled": {
						"type": "float"
					},
					"externalId": {
						"type": "string"
					},
					"amountRefunded": {
						"type": "float"
					},
					"invoiceSummary": {
						"type": "string"
					},
					"eventCalendar_guid": {
						"type": "string"
					},
					"passDetail_guid": {
						"type": "string"
					},
					"paymentCostCenter_guid": {
						"type": "string"
					},
					"organization_guid": {
						"type": "string"
					},
					"venue_guid": {
						"type": "string"
					},
					"olapUpdateTimestamp": {
						"type": "string"
					},
					"row_id": {
						"type": "string"
					},
					"targetFolderPath": {
						"type": "string"
					},
					"targetFileName": {
						"type": "string"
					},
					"tempFolderPath": {
						"type": "string"
					},
					"tempFileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"annotations": [
					"Pipeline atomica per aggiornamento prenotazioni complete",
					"Riceve tutti gli 82 campi come parametri",
					"Usa UPDATE DataFlow per sostituire il record esistente"
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Mida2_Atomic_UPDATE_Booking_Summary')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline atomica per aggiornamento di una prenotazione nel file summary",
				"activities": [
					{
						"name": "Update Summary Record",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_Mida2_Atomic_UPDATE_Booking_Summary",
								"type": "DataFlowReference",
								"parameters": {
									"row_id": {
										"value": "@concat('''', pipeline().parameters.row_id, '''')",
										"type": "Expression"
									},
									"reservation_code": {
										"value": "@concat('''', pipeline().parameters.reservation_code, '''')",
										"type": "Expression"
									},
									"priceList": {
										"value": "@concat('''', pipeline().parameters.priceList, '''')",
										"type": "Expression"
									},
									"channel_label": {
										"value": "@concat('''', pipeline().parameters.channel_label, '''')",
										"type": "Expression"
									},
									"pax_quantity": {
										"value": "pipeline().parameters.pax_quantity",
										"type": "Expression"
									},
									"insertTimestamp": {
										"value": "@concat('''', pipeline().parameters.insertTimestamp, '''')",
										"type": "Expression"
									},
									"updateTimestamp": {
										"value": "@concat('''', pipeline().parameters.updateTimestamp, '''')",
										"type": "Expression"
									},
									"reservation_amount": {
										"value": "pipeline().parameters.reservation_amount",
										"type": "Expression"
									},
									"visitDate": {
										"value": "@concat('''', pipeline().parameters.visitDate, '''')",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"DummySource": {},
									"SourceExistingContent": {
										"folderPath": "@pipeline().parameters.targetFolderPath",
										"fileName": "@pipeline().parameters.targetFileName"
									},
									"SinkTemp": {
										"folderPath": "@pipeline().parameters.tempFolderPath",
										"fileName": "temp_update_summary.parquet"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Copy Temp To Final",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Update Summary Record",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "@pipeline().parameters.tempFolderPath",
									"fileName": "temp_update_summary.parquet"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Summary_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "@pipeline().parameters.targetFolderPath",
									"fileName": "@pipeline().parameters.targetFileName"
								}
							}
						]
					},
					{
						"name": "Delete Temp File",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy Temp To Final",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "@pipeline().parameters.tempFolderPath",
									"fileName": "temp_update_summary.parquet"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": false,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"row_id": {
						"type": "string"
					},
					"reservation_code": {
						"type": "string"
					},
					"priceList": {
						"type": "string"
					},
					"channel_label": {
						"type": "string"
					},
					"pax_quantity": {
						"type": "int"
					},
					"insertTimestamp": {
						"type": "string"
					},
					"updateTimestamp": {
						"type": "string"
					},
					"reservation_amount": {
						"type": "float"
					},
					"visitDate": {
						"type": "string"
					},
					"targetFolderPath": {
						"type": "string"
					},
					"targetFileName": {
						"type": "string"
					},
					"tempFolderPath": {
						"type": "string"
					},
					"tempFileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"annotations": [
					"Pipeline atomica per aggiornamento prenotazioni summary",
					"Sintassi corretta per tutti i parametri dataflow"
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Mida_Seals_Raw_Curated')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline per convertire file Excel Seals in formato Parquet usando Data Flow",
				"activities": [
					{
						"name": "Raw to Processed Transformation",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_Mida_Seals_Raw_Processed",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceExcel": {
										"folderPath": "@pipeline().parameters.folderPath",
										"fileName": "@pipeline().parameters.fileName"
									},
									"SinkParquet": {
										"folderPath": "@pipeline().parameters.folderPath",
										"fileName": "@replace(pipeline().parameters.fileName, '.xlsx', '.parquet')"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Copy Data from Temporary File",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Raw to Processed Transformation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Processed_Mida_Seals_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.folderPath",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_Mida_Seals_Raw_Processed_output.parquet"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Processed_Mida_Seals_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.folderPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@replace(pipeline().parameters.fileName,'.xlsx','.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Delete Temporary File",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy Data from Temporary File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Processed_Mida_Seals_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.folderPath",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_Mida_Seals_Raw_Processed_output.parquet"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Processed to Curated Transformation",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Delete Temporary File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_Mida_Seals_Processed_Curated_Daily",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceProcessed": {
										"folderPath": {
											"value": "@pipeline().parameters.folderPath",
											"type": "Expression"
										},
										"fileName": "@replace(pipeline().parameters.fileName,'.xlsx','.parquet')"
									},
									"SinkCurated": {
										"folderPath": {
											"value": "@pipeline().parameters.folderPath",
											"type": "Expression"
										},
										"fileName": {
											"value": "@concat('Mida_Seals_',pipeline().parameters.year,pipeline().parameters.month,pipeline().parameters.day)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Copy Data from Temporary Curated",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Processed to Curated Transformation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Curated_Mida_Seals_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.folderPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "VFD_DFL_Mida_Seals_Processed_Curated_Daily_output.parquet",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Curated_Mida_Seals_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.folderPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@concat('Mida_Seals_',pipeline().parameters.year,pipeline().parameters.month,pipeline().parameters.day,'.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Delete Temporary File Curated",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy Data from Temporary Curated",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Seals_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.folderPath",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_Mida_Seals_Processed_Curated_Daily_output.parquet"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"folderPath": {
						"type": "String",
						"defaultValue": "Mida/Seals/2025/03"
					},
					"fileName": {
						"type": "String",
						"defaultValue": "EmissioniGiornoPrecedente20250313.xlsx"
					},
					"year": {
						"type": "string",
						"defaultValue": "2025"
					},
					"month": {
						"type": "string",
						"defaultValue": "03"
					},
					"day": {
						"type": "string",
						"defaultValue": "13"
					}
				},
				"variables": {
					"year": {
						"type": "String"
					},
					"day": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Mida/Seals"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Mida_Users_Processed_Curated')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline parametrica per convertire CSV in Parquet usando Data Flow",
				"activities": [
					{
						"name": "Processed to Curated Transformation",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_Mida_Users_Processed_Curated_Daily",
								"type": "DataFlowReference",
								"parameters": {
									"folderPath": "\"folder\"",
									"fileName": "\"file\""
								},
								"datasetParameters": {
									"SourceProcessed": {
										"folderPath": {
											"value": "@pipeline().parameters.bookingsFolderPath",
											"type": "Expression"
										},
										"fileName": {
											"value": "@replace(pipeline().parameters.bookingsFileName,'.csv','.parquet')",
											"type": "Expression"
										}
									},
									"SinkCurated": {
										"folderPath": {
											"value": "@pipeline().parameters.usersFolderPath",
											"type": "Expression"
										},
										"fileName": {
											"value": "@concat('Mida_Users_',pipeline().parameters.year,pipeline().parameters.month,pipeline().parameters.day)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 32,
								"computeType": "MemoryOptimized"
							},
							"traceLevel": "Coarse"
						}
					},
					{
						"name": "Copy Data from Temporary Curated",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Processed to Curated Transformation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Curated_Mida_Users_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.usersFolderPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "VFD_DFL_Mida_Users_Processed_Curated_Daily_output.parquet",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Curated_Mida_Users_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.usersFolderPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@concat('Mida_Users_',pipeline().parameters.year,pipeline().parameters.month,pipeline().parameters.day,'.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Delete Temporary File Curated",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy Data from Temporary Curated",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Users_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.usersFolderPath",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_Mida_Bookings_Processed_Curated_Daily_output.parquet"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"bookingsFolderPath": {
						"type": "String",
						"defaultValue": "Mida/Bookings/2021/10"
					},
					"bookingsFileName": {
						"type": "String",
						"defaultValue": "export_vw_summary_reservationPayments20211001.csv"
					},
					"year": {
						"type": "string",
						"defaultValue": "2021"
					},
					"month": {
						"type": "string",
						"defaultValue": "10"
					},
					"day": {
						"type": "string",
						"defaultValue": "01"
					},
					"usersFolderPath": {
						"type": "string",
						"defaultValue": "Mida/Users/2021/10"
					},
					"usersFileName": {
						"type": "string",
						"defaultValue": "export_vw_summary_reservationPayments20211001.csv"
					}
				},
				"variables": {
					"year": {
						"type": "String"
					},
					"day": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Mida/Users"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Mida_Validations_Raw_Curated')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline per convertire file Excel Validations in formato Parquet usando Data Flow",
				"activities": [
					{
						"name": "Raw to Processed Transformation",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_Mida_Validations_Raw_Processed",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceExcel": {
										"folderPath": {
											"value": "@pipeline().parameters.folderPath",
											"type": "Expression"
										},
										"fileName": {
											"value": "@pipeline().parameters.fileName",
											"type": "Expression"
										}
									},
									"SinkParquet": {
										"folderPath": {
											"value": "@pipeline().parameters.folderPath",
											"type": "Expression"
										},
										"fileName": "VFD_DFL_Mida_Validations_Raw_Processed_output.parquet"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Copy Data from Temporary File",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Raw to Processed Transformation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Processed_Mida_Validations_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.folderPath",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_Mida_Validations_Raw_Processed_output.parquet"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Processed_Mida_Validations_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.folderPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@replace(pipeline().parameters.fileName,'.xlsx','.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Delete Temporary File",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy Data from Temporary File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Processed_Mida_Validations_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.folderPath",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_Mida_Validations_Raw_Processed_output.parquet"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Processed to Curated Transformation",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Delete Temporary File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_Mida_Validations_Processed_Curated_Daily",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceProcessed": {
										"folderPath": {
											"value": "@pipeline().parameters.folderPath",
											"type": "Expression"
										},
										"fileName": {
											"value": "@replace(pipeline().parameters.fileName,'.xlsx','.parquet')",
											"type": "Expression"
										}
									},
									"SinkCurated": {
										"folderPath": {
											"value": "@pipeline().parameters.folderPath",
											"type": "Expression"
										},
										"fileName": "VFD_DFL_Mida_Validations_Processed_Curated_Daily_output.parquet"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Copy Data from Temporary Curated",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Processed to Curated Transformation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Curated_Mida_Validations_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.folderPath",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_Mida_Validations_Processed_Curated_Daily_output.parquet"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Curated_Mida_Validations_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.folderPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@concat('Mida_Validations_',pipeline().parameters.year,pipeline().parameters.month,pipeline().parameters.day,'.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Delete Temporary File Curated",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy Data from Temporary Curated",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Validations_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.folderPath",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_Mida_Validations_Processed_Curated_Daily_output.parquet"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"folderPath": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					},
					"year": {
						"type": "String"
					},
					"month": {
						"type": "String"
					},
					"day": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Mida/Validations"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Test_Single_Parameter')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline di test con un solo parametro per verificare il passaggio al dataflow",
				"activities": [
					{
						"name": "Test Dataflow Single Param",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_Test_Single_Parameter",
								"type": "DataFlowReference",
								"parameters": {
									"test_param": {
										"value": "@pipeline().parameters.test_input",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SourceProcessed": {
										"folderPath": "Mida/Bookings/Processed/2025/01",
										"fileName": "VFD_Mida_Processed_20250101.parquet\""
									},
									"SinkTest": {
										"folderPath": "Test",
										"fileName": "test_single_param_output.parquet"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"test_input": {
						"type": "string",
						"defaultValue": "TEST_VALUE_123"
					}
				},
				"folder": {
					"name": "Mida2/Test"
				},
				"annotations": [
					"Test per verificare passaggio parametri da pipeline a dataflow"
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Weather_Raw_Curated')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline per convertire CSV meteo in Parquet e aggiornare file mensili con ForEach",
				"activities": [
					{
						"name": "Raw to Processed Transformation",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_Weather_Raw_Processed",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceRaw": {
										"folderPath": {
											"value": "@pipeline().parameters.folderPath",
											"type": "Expression"
										},
										"fileName": {
											"value": "@pipeline().parameters.fileName",
											"type": "Expression"
										}
									},
									"SinkProcessed": {
										"folderPath": {
											"value": "@pipeline().parameters.folderPath",
											"type": "Expression"
										},
										"fileName": "VFD_DFL_Weather_Raw_Processed_output.parquet"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					},
					{
						"name": "Copy Raw to Processed",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Raw to Processed Transformation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Processed_Weather_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.folderPath",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_Weather_Raw_Processed_output.parquet"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Processed_Weather_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.folderPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@replace(pipeline().parameters.fileName, '.csv', '.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Delete Temporary Processed",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy Raw to Processed",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Processed_Weather_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.folderPath",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_Weather_Raw_Processed_output.parquet"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Get Processed Data Rows",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Delete Temporary Processed",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"dataset": {
								"referenceName": "VFD_DS_Processed_Weather_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.folderPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@replace(pipeline().parameters.fileName, '.csv', '.parquet')",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Weather Row",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Processed Data Rows",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Processed Data Rows').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetRowYear",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "rowYear",
										"value": {
											"value": "@substring(item().datetime, 0, 4)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetRowMonth",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetRowYear",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "rowMonth",
										"value": {
											"value": "@substring(item().datetime, 5, 2)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetRowDate",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetRowMonth",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "rowDate",
										"value": {
											"value": "@item().datetime",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Update Monthly File",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "SetRowDate",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "VFD_DFL_Weather_Single_Row_To_Monthly",
											"type": "DataFlowReference",
											"parameters": {
												"target_date": {
													"value": "'@{variables('rowDate')}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"SourceProcessed": {
													"folderPath": {
														"value": "@pipeline().parameters.folderPath",
														"type": "Expression"
													},
													"fileName": {
														"value": "@replace(pipeline().parameters.fileName, '.csv', '.parquet')",
														"type": "Expression"
													}
												},
												"SourceCuratedExisting": {
													"folderPath": {
														"value": "@concat('Weather/',variables('rowYear'))",
														"type": "Expression"
													},
													"fileName": {
														"value": "@concat('weather_monthly_', variables('rowYear'), variables('rowMonth'), '.parquet')",
														"type": "Expression"
													}
												},
												"SinkCurated": {
													"folderPath": {
														"value": "@concat('Weather/',variables('rowYear'))",
														"type": "Expression"
													},
													"fileName": {
														"value": "@concat('VFD_DFL_Weather_Single_Row_To_Monthly_', variables('rowYear'), variables('rowMonth'), '_output.parquet')",
														"type": "Expression"
													}
												}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Coarse"
									}
								},
								{
									"name": "Copy to Final Monthly File",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Update Monthly File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "ParquetReadSettings"
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "VFD_DS_Curated_Weather_Parquet",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": {
													"value": "@concat('Weather/',variables('rowYear'))",
													"type": "Expression"
												},
												"fileName": {
													"value": "VFD_DFL_Weather_Single_Row_To_Monthly_output.parquet",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "VFD_DS_Curated_Weather_Parquet",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": {
													"value": "@concat('Weather/',variables('rowYear'))",
													"type": "Expression"
												},
												"fileName": {
													"value": "@concat('weather_monthly_', variables('rowYear'), variables('rowMonth'), '.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete Temporary Monthly",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Copy to Final Monthly File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "VFD_DS_Curated_Weather_Parquet",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": {
													"value": "@concat('Weather/',variables('rowYear'))",
													"type": "Expression"
												},
												"fileName": {
													"value": "VFD_DFL_Weather_Single_Row_To_Monthly_output.parquet",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"folderPath": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					},
					"year": {
						"type": "String"
					},
					"month": {
						"type": "String"
					}
				},
				"variables": {
					"rowYear": {
						"type": "String"
					},
					"rowMonth": {
						"type": "String"
					},
					"rowDate": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Visual Crossing/Weather"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_test')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline di test per verificare passaggio parametri da pipeline a dataflow",
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "CFD_DFL_Mida2_test2",
								"type": "DataFlowReference",
								"parameters": {
									"param_string": {
										"value": "@concat('''', pipeline().parameters.pipeparam_string, '''')",
										"type": "Expression"
									},
									"param_int": {
										"value": "@pipeline().parameters.pipeparam_int",
										"type": "Expression"
									},
									"param_date": {
										"value": "@concat('''', pipeline().parameters.pipeparam_date, '''')",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {
										"folderPath": "Mida/Bookings/Temp",
										"fileName": "temp_update.parquet"
									},
									"sink1": {
										"folderPath": "Mida/Bookings/Temp",
										"fileName": "temp_update2.parquet"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "VFD-IR-DataflowExecution",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Complete_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "Mida2/Bookings/Complete/2025/01",
									"fileName": "test.parquet"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Complete_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "Mida2/Bookings/Complete/2025/01",
									"fileName": "test2.parquet"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"pipeparam_string": {
						"type": "string",
						"defaultValue": "RVFD2XNDRPZ3XPQX"
					},
					"pipeparam_int": {
						"type": "int",
						"defaultValue": 12
					},
					"pipeparam_date": {
						"type": "string",
						"defaultValue": "2025-07-25"
					},
					"pipeparam_timestamp": {
						"type": "string",
						"defaultValue": "2025-07-25T10:18:56.146Z"
					}
				},
				"folder": {
					"name": "Mida2/Test"
				},
				"annotations": [
					"Test per verificare passaggio parametri da pipeline a dataflow"
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Affluences_Historical_Recovery')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline per il recupero storico dei dati Affluences dall'1 novembre 2024 al 15 maggio 2025",
				"activities": [
					{
						"name": "SetStartDate",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "currentDate",
							"value": {
								"value": "@formatDateTime('2025-06-07', 'yyyy-MM-dd')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetEndDate",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "endDate",
							"value": {
								"value": "@formatDateTime('2025-06-09', 'yyyy-MM-dd')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ProcessUntilEndDate",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "SetStartDate",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetEndDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(variables('currentDate'), variables('endDate'))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "ExecuteDailyPipeline",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "VFD_PL_Affluences_Daily_v2",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"date": {
												"value": "@variables('currentDate')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "CalculateNextDate",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "ExecuteDailyPipeline",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "tempDate",
										"value": {
											"value": "@formatDateTime(addDays(variables('currentDate'), 1), 'yyyy-MM-dd')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "UpdateCurrentDate",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "CalculateNextDate",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "currentDate",
										"value": {
											"value": "@variables('tempDate')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "WaitForCooldown",
									"type": "Wait",
									"dependsOn": [
										{
											"activity": "UpdateCurrentDate",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 10
									}
								}
							],
							"timeout": "7.00:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"currentDate": {
						"type": "String"
					},
					"endDate": {
						"type": "String"
					},
					"tempDate": {
						"type": "String"
					},
					"progressMessage": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Affluences"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/VFD_PL_Affluences_Daily_v2')]"
			]
		}
	]
}