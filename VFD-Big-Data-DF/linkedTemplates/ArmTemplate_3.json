{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "VFD-Big-Data-DF"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Affluences_Monthly_Aggregation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Affluences"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Processed_Affluences_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceNewData"
						},
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Affluences_Monthly_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceExistingMonthly"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Affluences_Monthly_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkMonthly"
						}
					],
					"transformations": [
						{
							"name": "FilterEntryPoints"
						},
						{
							"name": "CleanSiteNames"
						},
						{
							"name": "AggregateByDate"
						},
						{
							"name": "FilterTerrazze"
						},
						{
							"name": "MaxOccupancyOnly"
						},
						{
							"name": "JoinWithMax"
						},
						{
							"name": "FilterMaxOccupancy"
						},
						{
							"name": "MaxOccupancyByDate"
						},
						{
							"name": "PivotEntries"
						},
						{
							"name": "CalculateTotals"
						},
						{
							"name": "JoinAggregations"
						},
						{
							"name": "CleanJoinOutput"
						},
						{
							"name": "GetCurrentDateFromNew"
						},
						{
							"name": "FilterExistingData"
						},
						{
							"name": "UnionWithExisting"
						}
					],
					"scriptLines": [
						"source(output(",
						"          site_id as string,",
						"          site_name as string,",
						"          date as date,",
						"          hour as string,",
						"          occupancy as integer,",
						"          entries as integer,",
						"          exits as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceNewData",
						"source(output(",
						"          date as date,",
						"          total_entries as integer,",
						"          ascensore_nord_entries as integer,",
						"          ascensore_sud_entries as integer,",
						"          salita_piedi_entries as integer,",
						"          discesa_piedi_entries as integer,",
						"          max_occupancy as integer,",
						"          max_occupancy_hour as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     format: 'parquet') ~> SourceExistingMonthly",
						"SourceNewData filter(site_name == 'Ascensore Nord' || site_name == 'Ascensore Sud' || site_name == 'Salita a piedi' || site_name == 'Discesa a piedi') ~> FilterEntryPoints",
						"FilterEntryPoints derive(site_name_clean = case(",
						"     site_name == 'Ascensore Nord', 'AscensoreNord',",
						"     site_name == 'Ascensore Sud', 'AscensoreSud',",
						"     site_name == 'Salita a piedi', 'SalitaPiedi',",
						"     site_name == 'Discesa a piedi', 'DiscesaPiedi',",
						"     site_name",
						")) ~> CleanSiteNames",
						"CleanSiteNames aggregate(groupBy(date,",
						"          site_name_clean),",
						"     entries_sum = sum(entries)) ~> AggregateByDate",
						"SourceNewData filter(site_name == 'Terrazze') ~> FilterTerrazze",
						"FilterTerrazze aggregate(groupBy(date),",
						"     max_occupancy = max(occupancy)) ~> MaxOccupancyOnly",
						"FilterTerrazze, MaxOccupancyOnly join(SourceNewData@date == MaxOccupancyOnly@date,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinWithMax",
						"JoinWithMax filter(occupancy == max_occupancy) ~> FilterMaxOccupancy",
						"FilterMaxOccupancy aggregate(groupBy(SourceNewData@date,",
						"          max_occupancy),",
						"     max_occupancy_hour = first(hour)) ~> MaxOccupancyByDate",
						"AggregateByDate pivot(groupBy(date),",
						"     pivotBy(site_name_clean, ['AscensoreNord', 'AscensoreSud', 'SalitaPiedi', 'DiscesaPiedi']),",
						"     entries_sum = sum(entries_sum),",
						"     columnNaming: '$N$V',",
						"     lateral: true) ~> PivotEntries",
						"PivotEntries derive(ascensore_nord_entries = coalesce(entries_sumAscensoreNord, 0),",
						"          ascensore_sud_entries = coalesce(entries_sumAscensoreSud, 0),",
						"          salita_piedi_entries = coalesce(entries_sumSalitaPiedi, 0),",
						"          discesa_piedi_entries = coalesce(entries_sumDiscesaPiedi, 0),",
						"          total_entries = coalesce(entries_sumAscensoreNord, 0) + coalesce(entries_sumAscensoreSud, 0) + coalesce(entries_sumSalitaPiedi, 0) + coalesce(entries_sumDiscesaPiedi, 0)) ~> CalculateTotals",
						"CalculateTotals, MaxOccupancyByDate join(PivotEntries@date == MaxOccupancyByDate@date,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinAggregations",
						"JoinAggregations select(mapColumn(",
						"          date = PivotEntries@date,",
						"          total_entries,",
						"          ascensore_nord_entries,",
						"          ascensore_sud_entries,",
						"          salita_piedi_entries,",
						"          discesa_piedi_entries,",
						"          max_occupancy,",
						"          max_occupancy_hour",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> CleanJoinOutput",
						"CleanJoinOutput derive(current_date_value = date) ~> GetCurrentDateFromNew",
						"SourceExistingMonthly, GetCurrentDateFromNew exists(SourceExistingMonthly@date == current_date_value,",
						"     negate:true,",
						"     broadcast: 'auto')~> FilterExistingData",
						"FilterExistingData, CleanJoinOutput union(byName: true,",
						"     partitionBy('hash', 1))~> UnionWithExisting",
						"UnionWithExisting sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          date as date,",
						"          total_entries as integer,",
						"          ascensore_nord_entries as integer,",
						"          ascensore_sud_entries as integer,",
						"          salita_piedi_entries as integer,",
						"          discesa_piedi_entries as integer,",
						"          max_occupancy as integer,",
						"          max_occupancy_hour as string",
						"     ),",
						"     format: 'parquet',",
						"     partitionFileNames:['VFD_DFL_Affluences_Monthly_Aggregation_output.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1),",
						"     compressionCodec: 'snappy') ~> SinkMonthly"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_DuomoWiFi_Connections_Raw_Processed')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Trasforma connessioni da JSON Raw a Parquet Processed con calcoli e conversioni",
				"folder": {
					"name": "WiFi"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Raw_DuomoWiFi_Connections_JSON",
								"type": "DatasetReference"
							},
							"name": "SourceConnectionsJSON"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Processed_DuomoWiFi_Connections_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkConnectionsParquet"
						}
					],
					"transformations": [
						{
							"name": "FlattenData"
						},
						{
							"name": "DerivedColumns"
						},
						{
							"name": "DataTypeConversions"
						}
					],
					"scriptLines": [
						"source(output(",
						"          generated as string,",
						"          sId as string,",
						"          count as integer,",
						"          connections as (customerId as string, username as string, organizationId as string, start as string, startBusiness as string, stop as string, stopBusiness as string, duration as integer, traffic as integer, locationName as string, locationId as string, hotspotIdentifier as string, hotspotId as string, latitude as double, longitude as double, macAddressClient as string, ipAddressClient as string, terminateCause as string)[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> SourceConnectionsJSON",
						"SourceConnectionsJSON foldDown(unroll(connections),",
						"     mapColumn(",
						"          hotspotIdentifier = connections.hotspotIdentifier,",
						"          start = connections.start,",
						"          stop = connections.stop,",
						"          duration = connections.duration,",
						"          traffic = connections.traffic,",
						"          terminateCause = connections.terminateCause,",
						"          username = connections.username,",
						"          macAddressClient = connections.macAddressClient,",
						"          ipAddressClient = connections.ipAddressClient,",
						"          locationId = connections.locationId,",
						"          customerId = connections.customerId",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenData",
						"FlattenData derive(sessionTime_minutes = duration / 60,",
						"          traffic_MB = traffic / (1024 * 1024),",
						"          processing_date = currentUTC(),",
						"          data_source = 'cloud4wi_connections') ~> DerivedColumns",
						"DerivedColumns derive(start_converted = toTimestamp(start, 'yyyy-MM-dd HH:mm:ss'),",
						"          stop_converted = toTimestamp(stop, 'yyyy-MM-dd HH:mm:ss')) ~> DataTypeConversions",
						"DataTypeConversions sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['VFD_DFL_DuomoWiFi_Connections_Raw_Processed_output.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     partitionBy('hash', 1),",
						"     compressionCodec: 'snappy') ~> SinkConnectionsParquet"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_DuomoWiFi_Processed_Curated')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Esegue left join tra connessioni e utenti per creare dataset arricchito",
				"folder": {
					"name": "WiFi"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Processed_DuomoWiFi_Connections_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceConnections"
						},
						{
							"dataset": {
								"referenceName": "VFD_DS_Processed_DuomoWiFi_Users_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceUsers"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_DuomoWiFi_Enriched_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkEnrichedData"
						}
					],
					"transformations": [
						{
							"name": "LeftJoinConnectionsUsers"
						},
						{
							"name": "SelectAndRenameColumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          hotspotIdentifier as string,",
						"          dateStart as string,",
						"          dateStop as string,",
						"          sessionTime as integer,",
						"          traffic as long,",
						"          terminateCause as string,",
						"          username as string,",
						"          macAddressUser as string,",
						"          ipAddressUser as string,",
						"          venueId as string,",
						"          online as boolean,",
						"          sessionTime_minutes as double,",
						"          traffic_MB as double,",
						"          processing_date as timestamp,",
						"          data_source as string,",
						"          dateStart_converted as timestamp,",
						"          dateStop_converted as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceConnections",
						"source(output(",
						"          username as string,",
						"          firstName as string,",
						"          lastName as string,",
						"          email as string,",
						"          gender as string,",
						"          phone as string,",
						"          birthDate as string,",
						"          country as string,",
						"          zipCode as string,",
						"          companyName as string,",
						"          wifiArea as string,",
						"          creationDate as string,",
						"          marketing as boolean,",
						"          type as string,",
						"          processing_date as timestamp,",
						"          data_source as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceUsers",
						"SourceConnections, SourceUsers join(SourceConnections@username == SourceUsers@username,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> LeftJoinConnectionsUsers",
						"LeftJoinConnectionsUsers select(mapColumn(",
						"          hotspotIdentifier,",
						"          dateStart,",
						"          dateStop,",
						"          sessionTime,",
						"          traffic,",
						"          terminateCause,",
						"          username = SourceConnections@username,",
						"          macAddressUser,",
						"          ipAddressUser,",
						"          venueId,",
						"          online,",
						"          sessionTime_minutes,",
						"          traffic_MB,",
						"          dateStart_converted,",
						"          dateStop_converted,",
						"          user_firstName = firstName,",
						"          user_lastName = lastName,",
						"          user_email = email,",
						"          user_gender = gender,",
						"          user_phone = phone,",
						"          user_birthDate = birthDate,",
						"          user_country = country,",
						"          user_zipCode = zipCode,",
						"          user_companyName = companyName,",
						"          user_wifiArea = wifiArea,",
						"          user_creationDate = creationDate,",
						"          user_marketing = marketing,",
						"          user_type = type,",
						"          processing_date = SourceConnections@processing_date",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> SelectAndRenameColumns",
						"SelectAndRenameColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['VFD_DFL_DuomoWiFi_Processed_Curated_output.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     partitionBy('hash', 1),",
						"     compressionCodec: 'snappy') ~> SinkEnrichedData"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_DuomoWiFi_Users_Raw_Processed')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Consolida tutti i file JSON degli utenti in un singolo file Parquet",
				"folder": {
					"name": "WiFi"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Raw_DuomoWiFi_Users_JSON",
								"type": "DatasetReference"
							},
							"name": "SourceUsersJSON"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Processed_DuomoWiFi_Users_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkUsersParquet"
						}
					],
					"transformations": [
						{
							"name": "FlattenUserData"
						}
					],
					"scriptLines": [
						"parameters{",
						"     year as string,",
						"     month as string",
						"}",
						"source(output(",
						"          count as integer,",
						"          scrollId as string,",
						"          customers as (cid as string, username as string, firstName as string, lastName as string, email as string, gender as string, phone as string, birthDate as string, country as string, zipCode as string, wifiArea as string)[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine',",
						"     wildcardPaths:[(concat(\"/Wifi/users/\", $year, \"/\", $month, \"/VFD_Wifi_user_*.json\"))]) ~> SourceUsersJSON",
						"SourceUsersJSON foldDown(unroll(customers),",
						"     mapColumn(",
						"          cid = customers.cid,",
						"          username = customers.username,",
						"          firstName = customers.firstName,",
						"          lastName = customers.lastName,",
						"          email = customers.email,",
						"          gender = customers.gender,",
						"          phone = customers.phone,",
						"          birthDate = customers.birthDate,",
						"          country = customers.country,",
						"          zipCode = customers.zipCode,",
						"          wifiArea = customers.wifiArea",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenUserData",
						"FlattenUserData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['VFD_DFL_DuomoWiFi_Users_Raw_Processed_output.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     partitionBy('hash', 1),",
						"     compressionCodec: 'snappy') ~> SinkUsersParquet"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida2_Atomic_APPEND_Booking_Complete')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Processed_Mida_Bookings_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceNewRecord"
						},
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Complete_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceExistingContent"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkTemp"
						}
					],
					"transformations": [
						{
							"name": "FilterNewRecord"
						},
						{
							"name": "UnionByName"
						}
					],
					"scriptLines": [
						"parameters{",
						"     reservationCode as string",
						"}",
						"source(output(",
						"          guid_pk as string,",
						"          reservation_progressiveCode as string,",
						"          reservation_code as string,",
						"          reservation_status as integer,",
						"          invoiceRequired as string,",
						"          customer as decimal(10,2),",
						"          visitDate as date,",
						"          reservationPayment_guid as string,",
						"          parentPayment_guid as string,",
						"          sliced as string,",
						"          reservation_guid as string,",
						"          group_guid as string,",
						"          group_label as string,",
						"          group_email as string,",
						"          paymentCode as string,",
						"          paymentCondition as decimal(10,2),",
						"          reservation_amount as decimal(10,2),",
						"          reservation_amountTax as decimal(10,2),",
						"          status as integer,",
						"          status_text as string,",
						"          stamp as string,",
						"          notes as decimal(10,2),",
						"          transactionType as string,",
						"          transactionType_text as string,",
						"          paymentLimitDate as date,",
						"          paymentDate as date,",
						"          refund as string,",
						"          refunded as string,",
						"          convention_label as string,",
						"          receiptCode as decimal(10,2),",
						"          insertTimestamp as date,",
						"          updateTimestamp as date,",
						"          owner as string,",
						"          owner_text as string,",
						"          sessionId as string,",
						"          terminal_label as decimal(10,2),",
						"          terminalGroup_label as decimal(10,2),",
						"          gateway_guid as string,",
						"          gateway_label as string,",
						"          transactionID as string,",
						"          bankAccount_guid as decimal(10,2),",
						"          bankAccount_label as decimal(10,2),",
						"          channel_guid as string,",
						"          channel_label as string,",
						"          channelType as string,",
						"          detail_guid as string,",
						"          extra_guid as decimal(10,2),",
						"          priceList as string,",
						"          event as string,",
						"          detailType as string,",
						"          detail_text as string,",
						"          detail_label as string,",
						"          detail_count as integer,",
						"          paymentDetail_guid as string,",
						"          detail_payingPartecipants as integer,",
						"          detail_quantity as integer,",
						"          tickets_quantity as integer,",
						"          pax_quantity as integer,",
						"          costCenter_guid as string,",
						"          costCenter_label as string,",
						"          object_receipt as integer,",
						"          object_taxCode as string,",
						"          object_taxNotes as string,",
						"          object_amount as decimal(10,2),",
						"          object_taxPercentage as decimal(10,2),",
						"          amount as decimal(10,2),",
						"          amountNet as decimal(10,2),",
						"          amountPresale as decimal(10,2),",
						"          amountSold as decimal(10,2),",
						"          amountPayed as decimal(10,2),",
						"          amountPending as decimal(10,2),",
						"          amountCanceled as decimal(10,2),",
						"          externalId as string,",
						"          amountRefunded as decimal(10,2),",
						"          invoiceSummary as decimal(10,2),",
						"          eventCalendar_guid as string,",
						"          passDetail_guid as decimal(10,2),",
						"          paymentCostCenter_guid as decimal(10,2),",
						"          organization_guid as string,",
						"          venue_guid as string,",
						"          olapUpdateTimestamp as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceNewRecord",
						"source(output(",
						"          guid_pk as string,",
						"          reservation_progressiveCode as string,",
						"          reservation_code as string,",
						"          reservation_status as integer,",
						"          invoiceRequired as string,",
						"          customer as decimal(10,2),",
						"          visitDate as date,",
						"          reservationPayment_guid as string,",
						"          parentPayment_guid as string,",
						"          sliced as string,",
						"          reservation_guid as string,",
						"          group_guid as string,",
						"          group_label as string,",
						"          group_email as string,",
						"          paymentCode as string,",
						"          paymentCondition as decimal(10,2),",
						"          reservation_amount as decimal(10,2),",
						"          reservation_amountTax as decimal(10,2),",
						"          status as integer,",
						"          status_text as string,",
						"          stamp as string,",
						"          notes as decimal(10,2),",
						"          transactionType as string,",
						"          transactionType_text as string,",
						"          paymentLimitDate as date,",
						"          paymentDate as date,",
						"          amount as decimal(10,2),",
						"          amountTax as decimal(10,2),",
						"          priceList as string,",
						"          tickets_quantity as integer,",
						"          pax_quantity as integer,",
						"          insertTimestamp as timestamp,",
						"          updateTimestamp as timestamp,",
						"          channel_label as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceExistingContent",
						"SourceNewRecord filter(reservation_code == $reservationCode) ~> FilterNewRecord",
						"FilterNewRecord, SourceExistingContent union(byName: true)~> UnionByName",
						"UnionByName sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['temp_append.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SinkTemp"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida2_Atomic_CREATE_Booking_Complete')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Processed_Mida_Bookings_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceProcessed"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Complete_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkComplete"
						}
					],
					"transformations": [
						{
							"name": "FilterByReservationCode"
						}
					],
					"scriptLines": [
						"parameters{",
						"     reservationCode as string",
						"}",
						"source(output(",
						"          guid_pk as string,",
						"          reservation_progressiveCode as string,",
						"          reservation_code as string,",
						"          reservation_status as integer,",
						"          invoiceRequired as string,",
						"          customer as decimal(10,2),",
						"          visitDate as date,",
						"          reservationPayment_guid as string,",
						"          parentPayment_guid as string,",
						"          sliced as string,",
						"          reservation_guid as string,",
						"          group_guid as string,",
						"          group_label as string,",
						"          group_email as string,",
						"          paymentCode as string,",
						"          paymentCondition as decimal(10,2),",
						"          reservation_amount as decimal(10,2),",
						"          reservation_amountTax as decimal(10,2),",
						"          status as integer,",
						"          status_text as string,",
						"          stamp as string,",
						"          notes as decimal(10,2),",
						"          transactionType as string,",
						"          transactionType_text as string,",
						"          paymentLimitDate as date,",
						"          paymentDate as date,",
						"          refund as string,",
						"          refunded as string,",
						"          convention_label as string,",
						"          receiptCode as decimal(10,2),",
						"          insertTimestamp as date,",
						"          updateTimestamp as date,",
						"          owner as string,",
						"          owner_text as string,",
						"          sessionId as string,",
						"          terminal_label as decimal(10,2),",
						"          terminalGroup_label as decimal(10,2),",
						"          gateway_guid as string,",
						"          gateway_label as string,",
						"          transactionID as string,",
						"          bankAccount_guid as decimal(10,2),",
						"          bankAccount_label as decimal(10,2),",
						"          channel_guid as string,",
						"          channel_label as string,",
						"          channelType as string,",
						"          detail_guid as string,",
						"          extra_guid as decimal(10,2),",
						"          priceList as string,",
						"          event as string,",
						"          detailType as string,",
						"          detail_text as string,",
						"          detail_label as string,",
						"          detail_count as integer,",
						"          paymentDetail_guid as string,",
						"          detail_payingPartecipants as integer,",
						"          detail_quantity as integer,",
						"          tickets_quantity as integer,",
						"          pax_quantity as integer,",
						"          costCenter_guid as string,",
						"          costCenter_label as string,",
						"          object_receipt as integer,",
						"          object_taxCode as string,",
						"          object_taxNotes as string,",
						"          object_amount as decimal(10,2),",
						"          object_taxPercentage as decimal(10,2),",
						"          amount as decimal(10,2),",
						"          amountNet as decimal(10,2),",
						"          amountPresale as decimal(10,2),",
						"          amountSold as decimal(10,2),",
						"          amountPayed as decimal(10,2),",
						"          amountPending as decimal(10,2),",
						"          amountCanceled as decimal(10,2),",
						"          externalId as string,",
						"          amountRefunded as decimal(10,2),",
						"          invoiceSummary as decimal(10,2),",
						"          eventCalendar_guid as string,",
						"          passDetail_guid as decimal(10,2),",
						"          paymentCostCenter_guid as decimal(10,2),",
						"          organization_guid as string,",
						"          venue_guid as string,",
						"          olapUpdateTimestamp as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceProcessed",
						"SourceProcessed filter(reservation_code == $reservationCode) ~> FilterByReservationCode",
						"FilterByReservationCode sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          guid_pk as string,",
						"          reservation_progressiveCode as string,",
						"          reservation_code as string,",
						"          reservation_status as integer,",
						"          invoiceRequired as string,",
						"          customer as decimal(10,2),",
						"          visitDate as date,",
						"          reservationPayment_guid as string,",
						"          parentPayment_guid as string,",
						"          sliced as string,",
						"          reservation_guid as string,",
						"          group_guid as string,",
						"          group_label as string,",
						"          group_email as string,",
						"          paymentCode as string,",
						"          paymentCondition as decimal(10,2),",
						"          reservation_amount as decimal(10,2),",
						"          reservation_amountTax as decimal(10,2),",
						"          status as integer,",
						"          status_text as string,",
						"          stamp as string,",
						"          notes as decimal(10,2),",
						"          transactionType as string,",
						"          transactionType_text as string,",
						"          paymentLimitDate as date,",
						"          paymentDate as date,",
						"          amount as decimal(10,2),",
						"          amountTax as decimal(10,2),",
						"          priceList as string,",
						"          tickets_quantity as integer,",
						"          pax_quantity as integer,",
						"          insertTimestamp as timestamp,",
						"          updateTimestamp as timestamp,",
						"          channel_label as string",
						"     ),",
						"     format: 'parquet',",
						"     partitionFileNames:['booking_complete.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SinkComplete"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida2_Atomic_CREATE_Booking_Summary')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Processed_Mida_Bookings_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceProcessed"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Summary_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkSummary"
						}
					],
					"transformations": [
						{
							"name": "FilterByReservationCode"
						},
						{
							"name": "SelectSummaryFields"
						}
					],
					"scriptLines": [
						"parameters{",
						"     reservationCode as string",
						"}",
						"source(output(",
						"          guid_pk as string,",
						"          reservation_progressiveCode as string,",
						"          reservation_code as string,",
						"          reservation_status as integer,",
						"          invoiceRequired as string,",
						"          customer as decimal(10,2),",
						"          visitDate as date,",
						"          reservationPayment_guid as string,",
						"          parentPayment_guid as string,",
						"          sliced as string,",
						"          reservation_guid as string,",
						"          group_guid as string,",
						"          group_label as string,",
						"          group_email as string,",
						"          paymentCode as string,",
						"          paymentCondition as decimal(10,2),",
						"          reservation_amount as decimal(10,2),",
						"          reservation_amountTax as decimal(10,2),",
						"          status as integer,",
						"          status_text as string,",
						"          stamp as string,",
						"          notes as decimal(10,2),",
						"          transactionType as string,",
						"          transactionType_text as string,",
						"          paymentLimitDate as date,",
						"          paymentDate as date,",
						"          refund as string,",
						"          refunded as string,",
						"          convention_label as string,",
						"          receiptCode as decimal(10,2),",
						"          insertTimestamp as date,",
						"          updateTimestamp as date,",
						"          owner as string,",
						"          owner_text as string,",
						"          sessionId as string,",
						"          terminal_label as decimal(10,2),",
						"          terminalGroup_label as decimal(10,2),",
						"          gateway_guid as string,",
						"          gateway_label as string,",
						"          transactionID as string,",
						"          bankAccount_guid as decimal(10,2),",
						"          bankAccount_label as decimal(10,2),",
						"          channel_guid as string,",
						"          channel_label as string,",
						"          channelType as string,",
						"          detail_guid as string,",
						"          extra_guid as decimal(10,2),",
						"          priceList as string,",
						"          event as string,",
						"          detailType as string,",
						"          detail_text as string,",
						"          detail_label as string,",
						"          detail_count as integer,",
						"          paymentDetail_guid as string,",
						"          detail_payingPartecipants as integer,",
						"          detail_quantity as integer,",
						"          tickets_quantity as integer,",
						"          pax_quantity as integer,",
						"          costCenter_guid as string,",
						"          costCenter_label as string,",
						"          object_receipt as integer,",
						"          object_taxCode as string,",
						"          object_taxNotes as string,",
						"          object_amount as decimal(10,2),",
						"          object_taxPercentage as decimal(10,2),",
						"          amount as decimal(10,2),",
						"          amountNet as decimal(10,2),",
						"          amountPresale as decimal(10,2),",
						"          amountSold as decimal(10,2),",
						"          amountPayed as decimal(10,2),",
						"          amountPending as decimal(10,2),",
						"          amountCanceled as decimal(10,2),",
						"          externalId as string,",
						"          amountRefunded as decimal(10,2),",
						"          invoiceSummary as decimal(10,2),",
						"          eventCalendar_guid as string,",
						"          passDetail_guid as decimal(10,2),",
						"          paymentCostCenter_guid as decimal(10,2),",
						"          organization_guid as string,",
						"          venue_guid as string,",
						"          olapUpdateTimestamp as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceProcessed",
						"SourceProcessed filter(reservation_code == $reservationCode) ~> FilterByReservationCode",
						"FilterByReservationCode select(mapColumn(",
						"          reservation_code,",
						"          priceList,",
						"          channel_label,",
						"          pax_quantity,",
						"          insertTimestamp,",
						"          updateTimestamp,",
						"          reservation_amount,",
						"          visitDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSummaryFields",
						"SelectSummaryFields sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          reservation_code as string,",
						"          priceList as string,",
						"          distributionChannel as string,",
						"          bookingPartner as string,",
						"          pax_quantity as integer,",
						"          pax_adult as integer,",
						"          pax_child as integer,",
						"          pax_senior as integer,",
						"          customer_nationality as string,",
						"          customer_country as string,",
						"          paymentMethod as string,",
						"          insertTimestamp as timestamp,",
						"          updateTimestamp as timestamp,",
						"          reservation_amount as decimal(10,2),",
						"          visitDate as date",
						"     ),",
						"     format: 'parquet',",
						"     partitionFileNames:['booking_summary.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SinkSummary"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida_Bookings_Processed_Curated_Daily')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Dataflow per filtrare colonne dal parquet processed e scrivere su un file fisso",
				"folder": {
					"name": "Mida/Bookings"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Processed_Mida_Bookings_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceProcessed"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkCurated"
						}
					],
					"transformations": [
						{
							"name": "TransformData"
						},
						{
							"name": "SelectFields"
						}
					],
					"scriptLines": [
						"parameters{",
						"     folderPath as string (\"folder\"),",
						"     fileName as string (\"file\")",
						"}",
						"source(output(",
						"          guid_pk as string,",
						"          reservation_progressiveCode as string,",
						"          reservation_code as string,",
						"          reservation_status as integer,",
						"          invoiceRequired as string,",
						"          customer as decimal(10,2),",
						"          visitDate as date,",
						"          reservationPayment_guid as string,",
						"          parentPayment_guid as string,",
						"          sliced as string,",
						"          reservation_guid as string,",
						"          group_guid as string,",
						"          group_label as string,",
						"          group_email as string,",
						"          paymentCode as string,",
						"          paymentCondition as decimal(10,2),",
						"          reservation_amount as decimal(10,2),",
						"          reservation_amountTax as decimal(10,2),",
						"          status as integer,",
						"          status_text as string,",
						"          stamp as string,",
						"          notes as decimal(10,2),",
						"          transactionType as string,",
						"          transactionType_text as string,",
						"          paymentLimitDate as date,",
						"          paymentDate as date,",
						"          refund as string,",
						"          refunded as string,",
						"          convention_label as string,",
						"          receiptCode as decimal(10,2),",
						"          insertTimestamp as date,",
						"          updateTimestamp as date,",
						"          owner as string,",
						"          owner_text as string,",
						"          sessionId as string,",
						"          terminal_label as decimal(10,2),",
						"          terminalGroup_label as decimal(10,2),",
						"          gateway_guid as string,",
						"          gateway_label as string,",
						"          transactionID as string,",
						"          bankAccount_guid as decimal(10,2),",
						"          bankAccount_label as decimal(10,2),",
						"          channel_guid as string,",
						"          channel_label as string,",
						"          channelType as string,",
						"          detail_guid as string,",
						"          extra_guid as decimal(10,2),",
						"          priceList as string,",
						"          event as string,",
						"          detailType as string,",
						"          detail_text as string,",
						"          detail_label as string,",
						"          detail_count as integer,",
						"          paymentDetail_guid as string,",
						"          detail_payingPartecipants as integer,",
						"          detail_quantity as integer,",
						"          tickets_quantity as integer,",
						"          pax_quantity as integer,",
						"          costCenter_guid as string,",
						"          costCenter_label as string,",
						"          object_receipt as integer,",
						"          object_taxCode as string,",
						"          object_taxNotes as string,",
						"          object_amount as decimal(10,2),",
						"          object_taxPercentage as decimal(10,2),",
						"          amount as decimal(10,2),",
						"          amountNet as decimal(10,2),",
						"          amountPresale as decimal(10,2),",
						"          amountSold as decimal(10,2),",
						"          amountPayed as decimal(10,2),",
						"          amountPending as decimal(10,2),",
						"          amountCanceled as decimal(10,2),",
						"          externalId as string,",
						"          amountRefunded as decimal(10,2),",
						"          invoiceSummary as decimal(10,2),",
						"          eventCalendar_guid as string,",
						"          passDetail_guid as decimal(10,2),",
						"          paymentCostCenter_guid as decimal(10,2),",
						"          organization_guid as string,",
						"          venue_guid as string,",
						"          olapUpdateTimestamp as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     folderPath: folderPath,",
						"     fileName: fileName) ~> SourceProcessed",
						"SourceProcessed derive(adjusted_pax_quantity = iif(status == 6 || status == 7 || status == 101, pax_quantity * -1, pax_quantity),",
						"          adjusted_tickets_quantity = iif(status == 6 || status == 7 || status == 101, tickets_quantity * -1, tickets_quantity),",
						"          adjusted_amount = iif(status == 6 || status == 7 || status == 101, amount * -1, amount)) ~> TransformData",
						"TransformData select(mapColumn(",
						"          pax_quantity = adjusted_pax_quantity,",
						"          priceList,",
						"          tickets_quantity = adjusted_tickets_quantity,",
						"          amount = adjusted_amount,",
						"          visitDate,",
						"          channel_label,",
						"          transactionType_text,",
						"          insertTimestamp,",
						"          paymentDate,",
						"          secondaryVisitDate = visitDate,",
						"          status,",
						"          status_text",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> SelectFields",
						"SelectFields sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['VFD_DFL_Mida_Bookings_Processed_Curated_Daily_output.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     partitionBy('hash', 1),",
						"     fileName: 'VFD_DFL_Mida_Sales_Curated_output.parquet') ~> SinkCurated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida_Sales_Raw_Processed')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Dataflow with full schema from CSV to Parquet with dynamic file name.",
				"folder": {
					"name": "Mida/Bookings"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Raw_Mida_Bookings_Excel",
								"type": "DatasetReference"
							},
							"name": "SourceExcel"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Processed_Mida_Bookings_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkParquet",
							"rejectedDataLinkedService": {
								"referenceName": "VFD_Big_Data_DL",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [],
					"scriptLines": [
						"parameters{",
						"     folderPath as string (\"folder\"),",
						"     sourcefileName as string (\"source\"),",
						"     destfileName as string (\"dest\")",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourceExcel",
						"SourceExcel sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          guid_pk as string,",
						"          reservation_progressiveCode as string,",
						"          reservation_code as string,",
						"          reservation_status as integer,",
						"          invoiceRequired as string,",
						"          customer as decimal(10,2),",
						"          visitDate as date,",
						"          reservationPayment_guid as string,",
						"          parentPayment_guid as string,",
						"          sliced as string,",
						"          reservation_guid as string,",
						"          group_guid as string,",
						"          group_label as string,",
						"          group_email as string,",
						"          paymentCode as string,",
						"          paymentCondition as decimal(10,2),",
						"          reservation_amount as decimal(10,2),",
						"          reservation_amountTax as decimal(10,2),",
						"          status as integer,",
						"          status_text as string,",
						"          stamp as string,",
						"          notes as decimal(10,2),",
						"          transactionType as string,",
						"          transactionType_text as string,",
						"          paymentLimitDate as date,",
						"          paymentDate as date,",
						"          refund as string,",
						"          refunded as string,",
						"          convention_label as string,",
						"          receiptCode as decimal(10,2),",
						"          insertTimestamp as date,",
						"          updateTimestamp as date,",
						"          owner as string,",
						"          owner_text as string,",
						"          sessionId as string,",
						"          terminal_label as decimal(10,2),",
						"          terminalGroup_label as decimal(10,2),",
						"          gateway_guid as string,",
						"          gateway_label as string,",
						"          transactionID as string,",
						"          bankAccount_guid as decimal(10,2),",
						"          bankAccount_label as decimal(10,2),",
						"          channel_guid as string,",
						"          channel_label as string,",
						"          channelType as string,",
						"          detail_guid as string,",
						"          extra_guid as decimal(10,2),",
						"          priceList as string,",
						"          event as string,",
						"          detailType as string,",
						"          detail_text as string,",
						"          detail_label as string,",
						"          detail_count as integer,",
						"          paymentDetail_guid as string,",
						"          detail_payingPartecipants as integer,",
						"          detail_quantity as integer,",
						"          tickets_quantity as integer,",
						"          pax_quantity as integer,",
						"          costCenter_guid as string,",
						"          costCenter_label as string,",
						"          object_receipt as integer,",
						"          object_taxCode as string,",
						"          object_taxNotes as string,",
						"          object_amount as decimal(10,2),",
						"          object_taxPercentage as decimal(10,2),",
						"          amount as decimal(10,2),",
						"          amountNet as decimal(10,2),",
						"          amountPresale as decimal(10,2),",
						"          amountSold as decimal(10,2),",
						"          amountPayed as decimal(10,2),",
						"          amountPending as decimal(10,2),",
						"          amountCanceled as decimal(10,2),",
						"          externalId as string,",
						"          amountRefunded as decimal(10,2),",
						"          invoiceSummary as decimal(10,2),",
						"          eventCalendar_guid as string,",
						"          passDetail_guid as decimal(10,2),",
						"          paymentCostCenter_guid as decimal(10,2),",
						"          organization_guid as string,",
						"          venue_guid as string,",
						"          olapUpdateTimestamp as date",
						"     ),",
						"     format: 'parquet',",
						"     partitionFileNames:['VFD_DFL_Mida_Sales_Raw_Processed_output.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     partitionBy('hash', 1),",
						"     fileName: $destfileName) ~> SinkParquet"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida_Seals_Processed_Curated_Daily')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Dataflow per selezionare campi rilevanti dal parquet processed",
				"folder": {
					"name": "Mida/Seals"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Processed_Mida_Seals_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceProcessed"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Seals_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkCurated"
						}
					],
					"transformations": [
						{
							"name": "SelectFields"
						}
					],
					"scriptLines": [
						"source(output(",
						"          sealCode as string,",
						"          reservationCode as string,",
						"          TicketLabel as string,",
						"          EventLabel as string,",
						"          List as string,",
						"          externalCode as string,",
						"          processing_date as timestamp,",
						"          data_source as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceProcessed",
						"SourceProcessed select(mapColumn(",
						"          sealCode,",
						"          reservationCode,",
						"          ticketLabel = TicketLabel,",
						"          eventLabel = EventLabel,",
						"          list = List,",
						"          externalCode,",
						"          processing_date",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> SelectFields",
						"SelectFields sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['VFD_DFL_Mida_Seals_Processed_Curated_Daily_output.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     partitionBy('hash', 1),",
						"     compressionCodec: 'snappy') ~> SinkCurated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida_Seals_Raw_Processed')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Dataflow per convertire Excel Seals in Parquet con conversioni di tipo",
				"folder": {
					"name": "Mida/Seals"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Raw_Mida_Seals_Excel",
								"type": "DatasetReference"
							},
							"name": "SourceExcel"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Processed_Mida_Seals_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkParquet",
							"rejectedDataLinkedService": {
								"referenceName": "VFD_Big_Data_DL",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "dataTypeConversions"
						}
					],
					"scriptLines": [
						"source(output(",
						"          sealCode as string,",
						"          reservationCode as string,",
						"          TicketLabel as string,",
						"          EventLabel as string,",
						"          List as string,",
						"          externalCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourceExcel",
						"SourceExcel derive(processing_date = currentUTC(),",
						"          data_source = 'mida_seals') ~> dataTypeConversions",
						"dataTypeConversions sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['VFD_DFL_Mida_Seals_Raw_Processed_output.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     partitionBy('hash', 1),",
						"     compressionCodec: 'snappy') ~> SinkParquet"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida_Users_Processed_Curated_Daily')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Dataflow per filtrare colonne dal parquet processed e scrivere su un file fisso",
				"folder": {
					"name": "Mida/Users"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Processed_Mida_Bookings_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceProcessed"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Users_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkCurated"
						}
					],
					"transformations": [
						{
							"name": "SelectFields"
						}
					],
					"scriptLines": [
						"parameters{",
						"     folderPath as string (\"folder\"),",
						"     fileName as string (\"file\")",
						"}",
						"source(output(",
						"          guid_pk as string,",
						"          reservation_progressiveCode as string,",
						"          reservation_code as string,",
						"          reservation_status as integer,",
						"          invoiceRequired as string,",
						"          customer as decimal(10,2),",
						"          visitDate as date,",
						"          reservationPayment_guid as string,",
						"          parentPayment_guid as string,",
						"          sliced as string,",
						"          reservation_guid as string,",
						"          group_guid as string,",
						"          group_label as string,",
						"          group_email as string,",
						"          paymentCode as string,",
						"          paymentCondition as decimal(10,2),",
						"          reservation_amount as decimal(10,2),",
						"          reservation_amountTax as decimal(10,2),",
						"          status as integer,",
						"          status_text as string,",
						"          stamp as string,",
						"          notes as decimal(10,2),",
						"          transactionType as string,",
						"          transactionType_text as string,",
						"          paymentLimitDate as date,",
						"          paymentDate as date,",
						"          refund as string,",
						"          refunded as string,",
						"          convention_label as string,",
						"          receiptCode as decimal(10,2),",
						"          insertTimestamp as date,",
						"          updateTimestamp as date,",
						"          owner as string,",
						"          owner_text as string,",
						"          sessionId as string,",
						"          terminal_label as decimal(10,2),",
						"          terminalGroup_label as decimal(10,2),",
						"          gateway_guid as string,",
						"          gateway_label as string,",
						"          transactionID as string,",
						"          bankAccount_guid as decimal(10,2),",
						"          bankAccount_label as decimal(10,2),",
						"          channel_guid as string,",
						"          channel_label as string,",
						"          channelType as string,",
						"          detail_guid as string,",
						"          extra_guid as decimal(10,2),",
						"          priceList as string,",
						"          event as string,",
						"          detailType as string,",
						"          detail_text as string,",
						"          detail_label as string,",
						"          detail_count as integer,",
						"          paymentDetail_guid as string,",
						"          detail_payingPartecipants as integer,",
						"          detail_quantity as integer,",
						"          tickets_quantity as integer,",
						"          pax_quantity as integer,",
						"          costCenter_guid as string,",
						"          costCenter_label as string,",
						"          object_receipt as integer,",
						"          object_taxCode as string,",
						"          object_taxNotes as string,",
						"          object_amount as decimal(10,2),",
						"          object_taxPercentage as decimal(10,2),",
						"          amount as decimal(10,2),",
						"          amountNet as decimal(10,2),",
						"          amountPresale as decimal(10,2),",
						"          amountSold as decimal(10,2),",
						"          amountPayed as decimal(10,2),",
						"          amountPending as decimal(10,2),",
						"          amountCanceled as decimal(10,2),",
						"          externalId as string,",
						"          amountRefunded as decimal(10,2),",
						"          invoiceSummary as decimal(10,2),",
						"          eventCalendar_guid as string,",
						"          passDetail_guid as decimal(10,2),",
						"          paymentCostCenter_guid as decimal(10,2),",
						"          organization_guid as string,",
						"          venue_guid as string,",
						"          olapUpdateTimestamp as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     folderPath: folderPath,",
						"     fileName: fileName) ~> SourceProcessed",
						"SourceProcessed select(mapColumn(",
						"          reservation_progressiveCode,",
						"          reservation_code,",
						"          group_label,",
						"          group_email",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> SelectFields",
						"SelectFields sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['VFD_DFL_Mida_Bookings_Processed_Curated_Daily_output.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     partitionBy('hash', 1),",
						"     fileName: 'VFD_DFL_Mida_Sales_Curated_output.parquet') ~> SinkCurated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida_Validations_Processed_Curated_Daily')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Dataflow per selezionare campi rilevanti dal parquet processed",
				"folder": {
					"name": "Mida/Validations"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Processed_Mida_Validations_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceProcessed"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Validations_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkCurated"
						}
					],
					"transformations": [
						{
							"name": "SelectFields"
						}
					],
					"scriptLines": [
						"source(output(",
						"          event_guid as string,",
						"          siae as integer,",
						"          seal as string,",
						"          reservationCode as string,",
						"          inGateTimestamp as timestamp,",
						"          entranceLabel as string,",
						"          passCode as string,",
						"          externalCode as string,",
						"          processing_date as timestamp,",
						"          data_source as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceProcessed",
						"SourceProcessed select(mapColumn(",
						"          event_guid,",
						"          siae,",
						"          seal,",
						"          reservationCode,",
						"          inGateTimestamp,",
						"          entranceLabel,",
						"          passCode,",
						"          externalCode,",
						"          processing_date,",
						"          data_source",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> SelectFields",
						"SelectFields sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['VFD_DFL_Mida_Validations_Processed_Curated_Daily_output.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     partitionBy('hash', 1),",
						"     compressionCodec: 'snappy') ~> SinkCurated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida_Validations_Raw_Processed')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Dataflow per convertire Excel Validations in Parquet con conversioni di tipo",
				"folder": {
					"name": "Mida/Validations"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Raw_Mida_Validations_Excel",
								"type": "DatasetReference"
							},
							"name": "SourceExcel"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Processed_Mida_Validations_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkParquet",
							"rejectedDataLinkedService": {
								"referenceName": "VFD_Big_Data_DL",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "dataTypeConversions"
						}
					],
					"scriptLines": [
						"source(output(",
						"          event_guid as string,",
						"          siae as integer,",
						"          seal as string,",
						"          reservationCode as string,",
						"          inGateTimestamp as string,",
						"          entranceLabel as string,",
						"          passCode as string,",
						"          externalCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourceExcel",
						"SourceExcel derive(processing_date = currentUTC(),",
						"          data_source = 'mida_validations') ~> dataTypeConversions",
						"dataTypeConversions sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['VFD_DFL_Mida_Validations_Raw_Processed_output.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     partitionBy('hash', 1),",
						"     compressionCodec: 'snappy') ~> SinkParquet"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Weather_Raw_Processed')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Conversione CSV meteo in Parquet senza modifiche",
				"folder": {
					"name": "Visual Crossing/Weather"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Raw_Weather_CSV",
								"type": "DatasetReference"
							},
							"name": "SourceRaw"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Processed_Weather_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkProcessed",
							"rejectedDataLinkedService": {
								"referenceName": "VFD_Big_Data_DL",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "AddProcessingMetadata"
						}
					],
					"scriptLines": [
						"source(output(",
						"          name as string,",
						"          datetime as string,",
						"          tempmax as double,",
						"          tempmin as double,",
						"          temp as double,",
						"          feelslikemax as double,",
						"          feelslikemin as double,",
						"          feelslike as double,",
						"          humidity as double,",
						"          precip as double,",
						"          precipprob as double,",
						"          preciptype as string,",
						"          windgust as double,",
						"          windspeed as double,",
						"          cloudcover as double,",
						"          visibility as double,",
						"          sunset as string,",
						"          conditions as string,",
						"          description as string,",
						"          icon as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourceRaw",
						"SourceRaw derive(processing_date = currentUTC(),",
						"          data_source = 'visual_crossing_api',",
						"          datetime_parsed = toDate(datetime)) ~> AddProcessingMetadata",
						"AddProcessingMetadata sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['VFD_DFL_Weather_Raw_Processed_output.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     partitionBy('hash', 1),",
						"     compressionCodec: 'snappy') ~> SinkProcessed"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Weather_Single_Row_To_Monthly')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Aggiorna file mensile con singola riga filtrata per data",
				"folder": {
					"name": "Visual Crossing/Weather"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Processed_Weather_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceProcessed"
						},
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Weather_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceCuratedExisting"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Weather_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkCurated"
						}
					],
					"transformations": [
						{
							"name": "FilterTargetDate"
						},
						{
							"name": "RemoveTargetDateFromExisting"
						},
						{
							"name": "UnionWithExisting"
						},
						{
							"name": "SortByDate"
						}
					],
					"scriptLines": [
						"parameters{",
						"     target_date as string",
						"}",
						"source(output(",
						"          name as string,",
						"          datetime as string,",
						"          tempmax as double,",
						"          tempmin as double,",
						"          temp as double,",
						"          feelslikemax as double,",
						"          feelslikemin as double,",
						"          feelslike as double,",
						"          humidity as double,",
						"          precip as double,",
						"          precipprob as double,",
						"          preciptype as string,",
						"          windgust as double,",
						"          windspeed as double,",
						"          cloudcover as double,",
						"          visibility as double,",
						"          sunset as string,",
						"          conditions as string,",
						"          description as string,",
						"          icon as string,",
						"          processing_date as timestamp,",
						"          data_source as string,",
						"          datetime_parsed as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceProcessed",
						"source(output(",
						"          name as string,",
						"          datetime as string,",
						"          tempmax as double,",
						"          tempmin as double,",
						"          temp as double,",
						"          feelslikemax as double,",
						"          feelslikemin as double,",
						"          feelslike as double,",
						"          humidity as double,",
						"          precip as double,",
						"          precipprob as double,",
						"          preciptype as string,",
						"          windgust as double,",
						"          windspeed as double,",
						"          cloudcover as double,",
						"          visibility as double,",
						"          sunset as string,",
						"          conditions as string,",
						"          description as string,",
						"          icon as string,",
						"          processing_date as timestamp,",
						"          data_source as string,",
						"          datetime_parsed as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     format: 'parquet') ~> SourceCuratedExisting",
						"SourceProcessed filter(datetime == $target_date) ~> FilterTargetDate",
						"SourceCuratedExisting filter(datetime != $target_date) ~> RemoveTargetDateFromExisting",
						"FilterTargetDate, RemoveTargetDateFromExisting union(byName: true)~> UnionWithExisting",
						"UnionWithExisting sort(asc(datetime, false)) ~> SortByDate",
						"SortByDate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['VFD_DFL_Weather_Single_Row_To_Monthly_output.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     partitionBy('hash', 1),",
						"     compressionCodec: 'snappy') ~> SinkCurated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Affluences_Daily_v2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline v2 per acquisire i dati giornalieri Affluences con architettura Raw->Processed->Curated",
				"activities": [
					{
						"name": "SetProcessDate",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "processDate",
							"value": {
								"value": "@if(empty(pipeline().parameters.date), formatDateTime(addDays(utcnow(), -1), 'yyyy-MM-dd'), pipeline().parameters.date)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetYear",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetProcessDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "year",
							"value": {
								"value": "@substring(variables('processDate'), 0, 4)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetMonth",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetYear",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "month",
							"value": {
								"value": "@substring(variables('processDate'), 5, 2)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetDateFormatted",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetMonth",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "dateFormatted",
							"value": {
								"value": "@replace(variables('processDate'), '-', '')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetYearMonth",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetDateFormatted",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "yearMonth",
							"value": {
								"value": "@concat(variables('year'), variables('month'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEachSite",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetYearMonth",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@createArray(json('{\"name\":\"Terrazze\",\"uuid\":\"5a2757bc-e1c6-4d5e-9db3-edfc4e9c9307\"}'), json('{\"name\":\"AscensoreNord\",\"uuid\":\"ca2dae61-4a99-4cb7-8051-26cb852ea408\"}'), json('{\"name\":\"AscensoreSud\",\"uuid\":\"aa6c22f1-84b6-441a-bbb0-bd429e63536d\"}'), json('{\"name\":\"SalitaPiedi\",\"uuid\":\"8358df5f-0186-4a11-87ad-11fc19cda749\"}'), json('{\"name\":\"DiscesaPiedi\",\"uuid\":\"639bc326-010a-402f-ba5f-3c75e2740d9d\"}'))",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "CallAPI",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 2,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET"
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "VFD_DS_Affluences_API",
											"type": "DatasetReference",
											"parameters": {
												"siteUUID": {
													"value": "@item().uuid",
													"type": "Expression"
												},
												"date": {
													"value": "@variables('processDate')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "VFD_DS_Raw_Affluences_JSON",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": {
													"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
													"type": "Expression"
												},
												"fileName": {
													"value": "@concat('VFD_Affluences_', variables('dateFormatted'), '_', item().uuid, '.json')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "TransformToProcessed",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ForEachSite",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_Affluences_JSON_to_Processed",
								"type": "DataFlowReference",
								"parameters": {
									"year": {
										"value": "'@{variables('year')}'",
										"type": "Expression"
									},
									"month": {
										"value": "'@{variables('month')}'",
										"type": "Expression"
									},
									"dateFormatted": {
										"value": "'@{variables('dateFormatted')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SourceJSON": {
										"folderPath": {
											"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
											"type": "Expression"
										},
										"fileName": {
											"value": "@concat('VFD_Affluences_', variables('dateFormatted'), '_*.json')",
											"type": "Expression"
										}
									},
									"SinkProcessed": {
										"folderPath": {
											"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
											"type": "Expression"
										},
										"fileName": "VFD_DFL_Affluences_JSON_to_Processed_output.parquet"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "VFD-IR-DataflowExecution",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Coarse"
						}
					},
					{
						"name": "CopyProcessedToFinal",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "TransformToProcessed",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Processed_Affluences_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_Affluences_JSON_to_Processed_output.parquet"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Processed_Affluences_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
										"type": "Expression"
									},
									"fileName": {
										"value": "@concat('VFD_Affluences_', variables('dateFormatted'), '.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "DeleteProcessedTemp",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "CopyProcessedToFinal",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Processed_Affluences_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_Affluences_JSON_to_Processed_output.parquet"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": false
							}
						}
					},
					{
						"name": "CreateCuratedDaily",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DeleteProcessedTemp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_Affluences_Daily_to_Curated",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceProcessed": {
										"folderPath": {
											"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
											"type": "Expression"
										},
										"fileName": {
											"value": "@concat('VFD_Affluences_', variables('dateFormatted'), '.parquet')",
											"type": "Expression"
										}
									},
									"SinkCuratedDaily": {
										"folderPath": {
											"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
											"type": "Expression"
										},
										"fileName": "VFD_DFL_Affluences_Daily_to_Curated_output.parquet"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "VFD-IR-DataflowExecution",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Coarse"
						}
					},
					{
						"name": "CopyCuratedDailyToFinal",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CreateCuratedDaily",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Curated_Affluences_Daily_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_Affluences_Daily_to_Curated_output.parquet"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Curated_Affluences_Daily_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
										"type": "Expression"
									},
									"fileName": {
										"value": "@concat('VFD_Affluences_Daily_', variables('dateFormatted'), '.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "DeleteCuratedDailyTemp",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "CopyCuratedDailyToFinal",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Curated_Affluences_Daily_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_Affluences_Daily_to_Curated_output.parquet"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": false
							}
						}
					},
					{
						"name": "UpdateMonthlyAggregation",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DeleteCuratedDailyTemp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_Affluences_Monthly_Aggregation",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceNewData": {
										"folderPath": {
											"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
											"type": "Expression"
										},
										"fileName": {
											"value": "@concat('VFD_Affluences_', variables('dateFormatted'), '.parquet')",
											"type": "Expression"
										}
									},
									"SourceExistingMonthly": {
										"folderPath": {
											"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
											"type": "Expression"
										},
										"fileName": {
											"value": "@concat('VFD_Affluences_Monthly_', variables('yearMonth'), '.parquet')",
											"type": "Expression"
										}
									},
									"SinkMonthly": {
										"folderPath": {
											"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
											"type": "Expression"
										},
										"fileName": "VFD_DFL_Affluences_Monthly_Aggregation_output.parquet"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "VFD-IR-DataflowExecution",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Coarse"
						}
					},
					{
						"name": "CopyMonthlyToFinal",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "UpdateMonthlyAggregation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Curated_Affluences_Monthly_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_Affluences_Monthly_Aggregation_output.parquet"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Curated_Affluences_Monthly_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
										"type": "Expression"
									},
									"fileName": {
										"value": "@concat('VFD_Affluences_Monthly_', variables('yearMonth'), '.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "DeleteMonthlyTemp",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "CopyMonthlyToFinal",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Curated_Affluences_Monthly_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_Affluences_Monthly_Aggregation_output.parquet"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"date": {
						"type": "string"
					}
				},
				"variables": {
					"processDate": {
						"type": "String"
					},
					"year": {
						"type": "String"
					},
					"month": {
						"type": "String"
					},
					"dateFormatted": {
						"type": "String"
					},
					"yearMonth": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Affluences"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/VFD_DFL_Affluences_Monthly_Aggregation')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_DuomoWiFi_Extract_Transform')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline principale per l'estrazione e trasformazione dei dati WiFi del Duomo",
				"activities": [
					{
						"name": "ExtractConnections",
						"description": "Estrae le connessioni WiFi dall'API Cloud4Wi",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "AuthRequest",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET",
									"additionalHeaders": {
										"value": "Authorization: Bearer @{activity('AuthRequest').output.token}",
										"type": "Expression"
									},
									"requestTimeout": "00:01:40"
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Cloud4Wi_Connections_HTTP",
								"type": "DatasetReference",
								"parameters": {
									"dateStart": {
										"value": "@pipeline().parameters.p_dateStart",
										"type": "Expression"
									},
									"dateStop": {
										"value": "@pipeline().parameters.p_dateStop",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Raw_DuomoWiFi_Connections_JSON",
								"type": "DatasetReference",
								"parameters": {
									"year": {
										"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
										"type": "Expression"
									},
									"month": {
										"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
										"type": "Expression"
									},
									"fileName": {
										"value": "@concat('VFD_Wifi_connections_', substring(pipeline().parameters.p_dateStart, 0, 4), substring(pipeline().parameters.p_dateStart, 5, 2), substring(pipeline().parameters.p_dateStart, 8, 2), '.json')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "LookupUsernames",
						"description": "Estrae la lista di username unici dal file delle connessioni",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ExtractConnections",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:05:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "VFD_DS_Raw_DuomoWiFi_Connections_JSON",
								"type": "DatasetReference",
								"parameters": {
									"year": {
										"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)\n",
										"type": "Expression"
									},
									"month": {
										"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)\n",
										"type": "Expression"
									},
									"fileName": {
										"value": "@concat('VFD_Wifi_connections_', \n    substring(pipeline().parameters.p_dateStart, 0, 4),\n    substring(pipeline().parameters.p_dateStart, 5, 2), \n    substring(pipeline().parameters.p_dateStart, 8, 2),\n    '.json')",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachUsername",
						"description": "Itera su ogni username per estrarre i dati utente",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookupUsernames",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupUsernames').output.value[0].connections",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 10,
							"activities": [
								{
									"name": "ExtractUserData",
									"description": "Estrae i dati di un singolo utente",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 3,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET",
												"additionalHeaders": {
													"value": "Authorization: Bearer @{activity('AuthRequest').output.token}",
													"type": "Expression"
												},
												"requestTimeout": "00:01:40"
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "VFD_DS_Cloud4Wi_Users_HTTP",
											"type": "DatasetReference",
											"parameters": {
												"username": {
													"value": "@item().customerId",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "VFD_DS_Raw_DuomoWiFi_Users_JSON",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@concat('VFD_Wifi_user_', item().username, '.json')",
													"type": "Expression"
												},
												"year": {
													"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
													"type": "Expression"
												},
												"month": {
													"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "TransformConnectionsRawToProcessed",
						"description": "Trasforma le connessioni da JSON Raw a Parquet Processed",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ForEachUsername",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_DuomoWiFi_Connections_Raw_Processed",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceConnectionsJSON": {
										"year": {
											"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
											"type": "Expression"
										},
										"month": {
											"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
											"type": "Expression"
										},
										"fileName": {
											"value": "@concat('VFD_Wifi_connections_', substring(pipeline().parameters.p_dateStart, 0, 4), substring(pipeline().parameters.p_dateStart, 5, 2), substring(pipeline().parameters.p_dateStart, 8, 2), '.json')",
											"type": "Expression"
										}
									},
									"SinkConnectionsParquet": {
										"year": {
											"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
											"type": "Expression"
										},
										"month": {
											"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
											"type": "Expression"
										},
										"fileName": "VFD_DFL_DuomoWiFi_Connections_Raw_Processed_output.parquet"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "VFD-IR-DataflowExecution",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Coarse"
						}
					},
					{
						"name": "CopyConnectionsProcessedToFinal",
						"description": "Copia il file temporaneo al nome finale",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "TransformConnectionsRawToProcessed",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Processed_DuomoWiFi_Connections_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"year": {
										"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
										"type": "Expression"
									},
									"month": {
										"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_DuomoWiFi_Connections_Raw_Processed_output.parquet"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Processed_DuomoWiFi_Connections_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"year": {
										"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
										"type": "Expression"
									},
									"month": {
										"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
										"type": "Expression"
									},
									"fileName": {
										"value": "@concat('VFD_Wifi_connections_', substring(pipeline().parameters.p_dateStart, 0, 4), substring(pipeline().parameters.p_dateStart, 5, 2), substring(pipeline().parameters.p_dateStart, 8, 2), '.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "DeleteTempConnectionsFile",
						"description": "Elimina il file temporaneo delle connessioni",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "CopyConnectionsProcessedToFinal",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:05:00",
							"retry": 1,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Processed_DuomoWiFi_Connections_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"year": {
										"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
										"type": "Expression"
									},
									"month": {
										"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_DuomoWiFi_Connections_Raw_Processed_output.parquet"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "TransformUsersRawToProcessed",
						"description": "Consolida tutti i file JSON degli utenti in un singolo Parquet",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DeleteTempConnectionsFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_DuomoWiFi_Users_Raw_Processed",
								"type": "DataFlowReference",
								"parameters": {
									"year": {
										"value": "'@{substring(pipeline().parameters.p_dateStart, 0, 4)}'",
										"type": "Expression"
									},
									"month": {
										"value": "'@{substring(pipeline().parameters.p_dateStart, 5, 2)}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SourceUsersJSON": {
										"fileName": "dummy.json",
										"year": {
											"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
											"type": "Expression"
										},
										"month": {
											"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
											"type": "Expression"
										}
									},
									"SinkUsersParquet": {
										"year": {
											"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
											"type": "Expression"
										},
										"month": {
											"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
											"type": "Expression"
										},
										"fileName": "VFD_DFL_DuomoWiFi_Users_Raw_Processed_output.parquet"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "VFD-IR-DataflowExecution",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Coarse"
						}
					},
					{
						"name": "CopyUsersProcessedToFinal",
						"description": "Copia il file temporaneo degli utenti al nome finale",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "TransformUsersRawToProcessed",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Processed_DuomoWiFi_Users_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"year": {
										"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
										"type": "Expression"
									},
									"month": {
										"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_DuomoWiFi_Users_Raw_Processed_output.parquet"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Processed_DuomoWiFi_Users_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"year": {
										"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
										"type": "Expression"
									},
									"month": {
										"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
										"type": "Expression"
									},
									"fileName": {
										"value": "@concat('VFD_Wifi_Users_', substring(pipeline().parameters.p_dateStart, 0, 4), substring(pipeline().parameters.p_dateStart, 5, 2), substring(pipeline().parameters.p_dateStart, 8, 2), '.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "DeleteTempUsersFile",
						"description": "Elimina il file temporaneo degli utenti",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "CopyUsersProcessedToFinal",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:05:00",
							"retry": 1,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Processed_DuomoWiFi_Users_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"year": {
										"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
										"type": "Expression"
									},
									"month": {
										"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_DuomoWiFi_Users_Raw_Processed_output.parquet"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "TransformProcessedToCurated",
						"description": "Esegue join tra connessioni e utenti per dataset finale arricchito",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DeleteTempUsersFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_DuomoWiFi_Processed_Curated",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceConnections": {
										"year": {
											"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
											"type": "Expression"
										},
										"month": {
											"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
											"type": "Expression"
										},
										"fileName": {
											"value": "@concat('VFD_Wifi_connections_', substring(pipeline().parameters.p_dateStart, 0, 4), substring(pipeline().parameters.p_dateStart, 5, 2), substring(pipeline().parameters.p_dateStart, 8, 2), '.parquet')",
											"type": "Expression"
										}
									},
									"SourceUsers": {
										"year": {
											"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
											"type": "Expression"
										},
										"month": {
											"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
											"type": "Expression"
										},
										"fileName": {
											"value": "@concat('VFD_Wifi_Users_', substring(pipeline().parameters.p_dateStart, 0, 4), substring(pipeline().parameters.p_dateStart, 5, 2), substring(pipeline().parameters.p_dateStart, 8, 2), '.parquet')",
											"type": "Expression"
										}
									},
									"SinkEnrichedData": {
										"year": {
											"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
											"type": "Expression"
										},
										"month": {
											"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
											"type": "Expression"
										},
										"fileName": "VFD_DFL_DuomoWiFi_Processed_Curated_output.parquet"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "VFD-IR-DataflowExecution",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Coarse"
						}
					},
					{
						"name": "CopyCuratedToFinal",
						"description": "Copia il file temporaneo arricchito al nome finale",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "TransformProcessedToCurated",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Curated_DuomoWiFi_Enriched_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"year": {
										"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
										"type": "Expression"
									},
									"month": {
										"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_DuomoWiFi_Processed_Curated_output.parquet"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Curated_DuomoWiFi_Enriched_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"year": {
										"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
										"type": "Expression"
									},
									"month": {
										"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
										"type": "Expression"
									},
									"fileName": {
										"value": "@concat('VFD_Wifi_connections_', substring(pipeline().parameters.p_dateStart, 0, 4), substring(pipeline().parameters.p_dateStart, 5, 2), substring(pipeline().parameters.p_dateStart, 8, 2), '.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "DeleteTempEnrichedFile",
						"description": "Elimina il file temporaneo arricchito",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "CopyCuratedToFinal",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:05:00",
							"retry": 1,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Curated_DuomoWiFi_Enriched_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"year": {
										"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
										"type": "Expression"
									},
									"month": {
										"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_DuomoWiFi_Processed_Curated_output.parquet"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "AuthRequest",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": "https://explore.cloud4wi.com/v1/sts/login/services",
							"body": {
								"clientKey": "ck-ffe407c5-e967-44db-a6b0-d6c178b6ee08",
								"clientSecret": "CWCVPKZCNDYTVKPBZTDSENQKJLLCPKGH"
							}
						}
					},
					{
						"name": "LogoutRequest",
						"description": "Richiesta di logout per annullare il token, il body è impostato con dei valori solamente perché DataFactory non accetta un body vuoto in una richiesta post",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "DeleteTempEnrichedFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Authorization": {
									"value": "Bearer @{activity('AuthRequest').output.token}",
									"type": "Expression"
								}
							},
							"url": "https://explore.cloud4wi.com/v1/sts/logout",
							"body": {
								"Sample": "Sample"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_dateStart": {
						"type": "string",
						"defaultValue": "2025-06-26"
					},
					"p_dateStop": {
						"type": "string",
						"defaultValue": "2025-06-26"
					}
				},
				"folder": {
					"name": "WiFi"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/VFD_DFL_DuomoWiFi_Connections_Raw_Processed')]",
				"[concat(variables('factoryId'), '/dataflows/VFD_DFL_DuomoWiFi_Users_Raw_Processed')]",
				"[concat(variables('factoryId'), '/dataflows/VFD_DFL_DuomoWiFi_Processed_Curated')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Mida_Bookings_Raw_Processed')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline parametrica per convertire CSV in Parquet usando Data Flow",
				"activities": [
					{
						"name": "Raw to Processed Transformation",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_Mida_Sales_Raw_Processed",
								"type": "DataFlowReference",
								"parameters": {
									"folderPath": "\"folder\"",
									"sourcefileName": "\"source\"",
									"destfileName": "\"dest\""
								},
								"datasetParameters": {
									"SourceExcel": {
										"folderPath": "@pipeline().parameters.folderPath",
										"fileName": {
											"value": "@pipeline().parameters.fileName",
											"type": "Expression"
										}
									},
									"SinkParquet": {
										"folderPath": "@pipeline().parameters.folderPath",
										"fileName": {
											"value": "@replace(pipeline().parameters.fileName, '.xlsx', '.parquet')",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 16,
								"computeType": "General"
							},
							"traceLevel": "Coarse",
							"parameters": {
								"folderPath": {
									"value": "@pipeline().parameters.folderPath",
									"type": "Expression"
								},
								"sourcefileName": {
									"value": "@pipeline().parameters.fileName",
									"type": "Expression"
								},
								"destfileName": {
									"value": "@replace(pipeline().parameters.fileName, '.csv', '.parquet')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Copy Data from Temporary File",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Raw to Processed Transformation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Processed_Mida_Bookings_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.folderPath",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_Mida_Sales_Raw_Processed_output.parquet"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Processed_Mida_Bookings_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.folderPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@replace(pipeline().parameters.fileName,'.csv','.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Delete Temporary File",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy Data from Temporary File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Processed_Mida_Bookings_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.folderPath",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_Mida_Sales_Raw_Processed_output.parquet"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"folderPath": {
						"type": "String",
						"defaultValue": "Mida/Bookings/2025/07"
					},
					"fileName": {
						"type": "String",
						"defaultValue": "export_vw_summary_reservationPayments20250710.csv"
					},
					"year": {
						"type": "string",
						"defaultValue": "2025"
					},
					"month": {
						"type": "string",
						"defaultValue": "07"
					},
					"day": {
						"type": "string",
						"defaultValue": "10"
					}
				},
				"variables": {
					"year": {
						"type": "String"
					},
					"day": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Mida/Bookings"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/VFD_DFL_Mida_Sales_Raw_Processed')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Mida_Seals_Raw_Curated')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline per convertire file Excel Seals in formato Parquet usando Data Flow",
				"activities": [
					{
						"name": "Raw to Processed Transformation",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_Mida_Seals_Raw_Processed",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceExcel": {
										"folderPath": "@pipeline().parameters.folderPath",
										"fileName": "@pipeline().parameters.fileName"
									},
									"SinkParquet": {
										"folderPath": "@pipeline().parameters.folderPath",
										"fileName": "@replace(pipeline().parameters.fileName, '.xlsx', '.parquet')"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "VFD-IR-DataflowExecution",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Copy Data from Temporary File",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Raw to Processed Transformation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Processed_Mida_Seals_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.folderPath",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_Mida_Seals_Raw_Processed_output.parquet"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Processed_Mida_Seals_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.folderPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@replace(pipeline().parameters.fileName,'.xlsx','.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Delete Temporary File",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy Data from Temporary File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Processed_Mida_Seals_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.folderPath",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_Mida_Seals_Raw_Processed_output.parquet"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Processed to Curated Transformation",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Delete Temporary File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_Mida_Seals_Processed_Curated_Daily",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceProcessed": {
										"folderPath": {
											"value": "@pipeline().parameters.folderPath",
											"type": "Expression"
										},
										"fileName": "@replace(pipeline().parameters.fileName,'.xlsx','.parquet')"
									},
									"SinkCurated": {
										"folderPath": {
											"value": "@pipeline().parameters.folderPath",
											"type": "Expression"
										},
										"fileName": {
											"value": "@concat('Mida_Seals_',pipeline().parameters.year,pipeline().parameters.month,pipeline().parameters.day)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "VFD-IR-DataflowExecution",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Copy Data from Temporary Curated",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Processed to Curated Transformation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Curated_Mida_Seals_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.folderPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "VFD_DFL_Mida_Seals_Processed_Curated_Daily_output.parquet",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Curated_Mida_Seals_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.folderPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@concat('Mida_Seals_',pipeline().parameters.year,pipeline().parameters.month,pipeline().parameters.day,'.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Delete Temporary File Curated",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy Data from Temporary Curated",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Seals_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.folderPath",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_Mida_Seals_Processed_Curated_Daily_output.parquet"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"folderPath": {
						"type": "String",
						"defaultValue": "Mida/Seals/2025/03"
					},
					"fileName": {
						"type": "String",
						"defaultValue": "EmissioniGiornoPrecedente20250313.xlsx"
					},
					"year": {
						"type": "string",
						"defaultValue": "2025"
					},
					"month": {
						"type": "string",
						"defaultValue": "03"
					},
					"day": {
						"type": "string",
						"defaultValue": "13"
					}
				},
				"variables": {
					"year": {
						"type": "String"
					},
					"day": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Mida/Seals"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/VFD_DFL_Mida_Seals_Raw_Processed')]",
				"[concat(variables('factoryId'), '/dataflows/VFD_DFL_Mida_Seals_Processed_Curated_Daily')]"
			]
		}
	]
}