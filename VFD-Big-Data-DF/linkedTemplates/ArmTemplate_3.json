{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Nome Data Factory",
			"defaultValue": "VFD-Big-Data-DF"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Utils_AccessAreas_Raw_Curated')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TicketArea_CopyRawToProcessed",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Raw_AccessAreas_Excel",
								"type": "DatasetReference",
								"parameters": {
									"fileName": "AssociazioneBigliettiAccessi.xlsx"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Processed_AccessAreas_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"fileName": "AssociazioneBigliettiAccessi.parquet"
								}
							}
						]
					},
					{
						"name": "TicketArea_CopyProcessedToCurated",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "TicketArea_CopyRawToProcessed",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Processed_AccessAreas_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"fileName": "AssociazioneBigliettiAccessi.parquet"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Curated_AccessAreas_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"fileName": "AssociazioneBigliettiAccessi.parquet"
								}
							}
						]
					},
					{
						"name": "AreaSiteID_CopyRawToProcessed",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "TicketArea_CopyProcessedToCurated",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Raw_AccessAreas_Excel",
								"type": "DatasetReference",
								"parameters": {
									"fileName": "AssociazioneAccessiSiteIDAffluences.xlsx"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Processed_AccessAreas_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"fileName": "AssociazioneAccessiSiteIDAffluences.parquet"
								}
							}
						]
					},
					{
						"name": "AreaSiteID_CopyProcessedToCurated",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "AreaSiteID_CopyRawToProcessed",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Processed_AccessAreas_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"fileName": "AssociazioneAccessiSiteIDAffluences.parquet"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Curated_AccessAreas_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"fileName": "AssociazioneAccessiSiteIDAffluences.parquet"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Utils/AccessAreas"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CFD_DFL_Mida2_test2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Test"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Complete_Parquet",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Complete_Parquet",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     param_string as string,",
						"     param_int as integer,",
						"     param_date as string",
						"}",
						"source(output(",
						"          guid_pk as string,",
						"          reservation_progressiveCode as string,",
						"          reservation_code as string,",
						"          reservation_status as integer,",
						"          invoiceRequired as string,",
						"          customer as decimal(10,2),",
						"          visitDate as date,",
						"          reservationPayment_guid as string,",
						"          parentPayment_guid as string,",
						"          sliced as string,",
						"          reservation_guid as string,",
						"          group_guid as string,",
						"          group_label as string,",
						"          group_email as string,",
						"          paymentCode as string,",
						"          paymentCondition as decimal(10,2),",
						"          reservation_amount as decimal(10,2),",
						"          reservation_amountTax as decimal(10,2),",
						"          status as integer,",
						"          status_text as string,",
						"          stamp as string,",
						"          notes as string,",
						"          transactionType as string,",
						"          transactionType_text as string,",
						"          paymentLimitDate as date,",
						"          paymentDate as date,",
						"          refund as string,",
						"          refunded as string,",
						"          convention_label as string,",
						"          receiptCode as string,",
						"          insertTimestamp as date,",
						"          updateTimestamp as date,",
						"          owner as string,",
						"          owner_text as string,",
						"          sessionId as string,",
						"          terminal_label as string,",
						"          terminalGroup_label as string,",
						"          gateway_guid as string,",
						"          gateway_label as string,",
						"          transactionID as string,",
						"          bankAccount_guid as string,",
						"          bankAccount_label as string,",
						"          channel_guid as string,",
						"          channel_label as string,",
						"          channelType as string,",
						"          detail_guid as string,",
						"          extra_guid as string,",
						"          priceList as string,",
						"          event as string,",
						"          detailType as string,",
						"          detail_text as string,",
						"          detail_label as string,",
						"          detail_count as integer,",
						"          paymentDetail_guid as string,",
						"          detail_payingPartecipants as integer,",
						"          detail_quantity as integer,",
						"          tickets_quantity as integer,",
						"          pax_quantity as integer,",
						"          costCenter_guid as string,",
						"          costCenter_label as string,",
						"          object_receipt as integer,",
						"          object_taxCode as string,",
						"          object_taxNotes as string,",
						"          object_amount as decimal(10,2),",
						"          object_taxPercentage as decimal(10,2),",
						"          amount as decimal(10,2),",
						"          amountNet as decimal(10,2),",
						"          amountPresale as decimal(10,2),",
						"          amountSold as decimal(10,2),",
						"          amountPayed as decimal(10,2),",
						"          amountPending as decimal(10,2),",
						"          amountCanceled as decimal(10,2),",
						"          externalId as string,",
						"          amountRefunded as decimal(10,2),",
						"          invoiceSummary as string,",
						"          eventCalendar_guid as string,",
						"          passDetail_guid as string,",
						"          paymentCostCenter_guid as string,",
						"          organization_guid as string,",
						"          venue_guid as string,",
						"          olapUpdateTimestamp as date,",
						"          row_id as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: true,",
						"     ignoreNoFilesFound: true,",
						"     format: 'parquet') ~> source1",
						"source1 derive(reservation_code = $param_string,",
						"          reservation_status = $param_int,",
						"          visitDate = toDate($param_date)) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          guid_pk as string,",
						"          reservation_progressiveCode as string,",
						"          reservation_code as string,",
						"          reservation_status as integer,",
						"          invoiceRequired as string,",
						"          customer as decimal(10,2),",
						"          visitDate as date,",
						"          reservationPayment_guid as string,",
						"          parentPayment_guid as string,",
						"          sliced as string,",
						"          reservation_guid as string,",
						"          group_guid as string,",
						"          group_label as string,",
						"          group_email as string,",
						"          paymentCode as string,",
						"          paymentCondition as decimal(10,2),",
						"          reservation_amount as decimal(10,2),",
						"          reservation_amountTax as decimal(10,2),",
						"          status as integer,",
						"          status_text as string,",
						"          stamp as string,",
						"          notes as string,",
						"          transactionType as string,",
						"          transactionType_text as string,",
						"          paymentLimitDate as date,",
						"          paymentDate as date,",
						"          refund as string,",
						"          refunded as string,",
						"          convention_label as string,",
						"          receiptCode as string,",
						"          insertTimestamp as date,",
						"          updateTimestamp as date,",
						"          owner as string,",
						"          owner_text as string,",
						"          sessionId as string,",
						"          terminal_label as string,",
						"          terminalGroup_label as string,",
						"          gateway_guid as string,",
						"          gateway_label as string,",
						"          transactionID as string,",
						"          bankAccount_guid as string,",
						"          bankAccount_label as string,",
						"          channel_guid as string,",
						"          channel_label as string,",
						"          channelType as string,",
						"          detail_guid as string,",
						"          extra_guid as string,",
						"          priceList as string,",
						"          event as string,",
						"          detailType as string,",
						"          detail_text as string,",
						"          detail_label as string,",
						"          detail_count as integer,",
						"          paymentDetail_guid as string,",
						"          detail_payingPartecipants as integer,",
						"          detail_quantity as integer,",
						"          tickets_quantity as integer,",
						"          pax_quantity as integer,",
						"          costCenter_guid as string,",
						"          costCenter_label as string,",
						"          object_receipt as integer,",
						"          object_taxCode as string,",
						"          object_taxNotes as string,",
						"          object_amount as decimal(10,2),",
						"          object_taxPercentage as decimal(10,2),",
						"          amount as decimal(10,2),",
						"          amountNet as decimal(10,2),",
						"          amountPresale as decimal(10,2),",
						"          amountSold as decimal(10,2),",
						"          amountPayed as decimal(10,2),",
						"          amountPending as decimal(10,2),",
						"          amountCanceled as decimal(10,2),",
						"          externalId as string,",
						"          amountRefunded as decimal(10,2),",
						"          invoiceSummary as string,",
						"          eventCalendar_guid as string,",
						"          passDetail_guid as string,",
						"          paymentCostCenter_guid as string,",
						"          organization_guid as string,",
						"          venue_guid as string,",
						"          olapUpdateTimestamp as date,",
						"          row_id as string",
						"     ),",
						"     format: 'parquet',",
						"     partitionFileNames:['test.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Affluences_Daily_to_Curated')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Affluences"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Processed_Affluences_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceProcessed"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Affluences_Daily_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkCuratedDaily"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          site_id as string,",
						"          site_name as string,",
						"          date as date,",
						"          hour as string,",
						"          occupancy as integer,",
						"          entries as integer,",
						"          exits as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceProcessed",
						"SourceProcessed sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          site_id as string,",
						"          site_name as string,",
						"          date as date,",
						"          hour as string,",
						"          occupancy as integer,",
						"          entries as integer,",
						"          exits as integer",
						"     ),",
						"     format: 'parquet',",
						"     partitionFileNames:['VFD_DFL_Affluences_Daily_to_Curated_output.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1),",
						"     compressionCodec: 'snappy') ~> SinkCuratedDaily"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Affluences_JSON_to_Processed')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Affluences"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Raw_Affluences_JSON",
								"type": "DatasetReference"
							},
							"name": "SourceJSON"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Processed_Affluences_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkProcessed"
						}
					],
					"transformations": [
						{
							"name": "FlattenJSON"
						},
						{
							"name": "ExpandEntries"
						},
						{
							"name": "AddSiteName"
						},
						{
							"name": "ConvertTypes"
						}
					],
					"scriptLines": [
						"parameters{",
						"     year as string,",
						"     month as string,",
						"     dateFormatted as string",
						"}",
						"source(output(",
						"          data as (results as (day as string, entries as (hour as string, occupancy as integer, entries as integer, exits as integer)[])[], site_id as string)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine',",
						"     wildcardPaths:[(concat(\"/Affluences/\",$year,\"/\",$month,\"/VFD_Affluences_\",$dateFormatted,\"_*.json\"))]) ~> SourceJSON",
						"SourceJSON foldDown(unroll(data.results, data.results),",
						"     mapColumn(",
						"          day = data.results.day,",
						"          entries = data.results.entries,",
						"          site_uuid = data.site_id",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenJSON",
						"FlattenJSON foldDown(unroll(entries, entries),",
						"     mapColumn(",
						"          site_uuid,",
						"          day,",
						"          hour = entries.hour,",
						"          occupancy = entries.occupancy,",
						"          entries_count = entries.entries,",
						"          exits_count = entries.exits",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> ExpandEntries",
						"ExpandEntries derive(site_name = case(",
						"     site_uuid == '5a2757bc-e1c6-4d5e-9db3-edfc4e9c9307', 'Terrazze',",
						"     site_uuid == 'ca2dae61-4a99-4cb7-8051-26cb852ea408', 'Ascensore Nord',",
						"     site_uuid == 'aa6c22f1-84b6-441a-bbb0-bd429e63536d', 'Ascensore Sud',",
						"     site_uuid == '8358df5f-0186-4a11-87ad-11fc19cda749', 'Salita a piedi',",
						"     site_uuid == '639bc326-010a-402f-ba5f-3c75e2740d9d', 'Discesa a piedi',",
						"     'Unknown'",
						")) ~> AddSiteName",
						"AddSiteName derive(date = toDate(day, 'yyyy-MM-dd'),",
						"          site_id = site_uuid) ~> ConvertTypes",
						"ConvertTypes sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          site_id as string,",
						"          site_name as string,",
						"          date as date,",
						"          hour as string,",
						"          occupancy as integer,",
						"          entries as integer,",
						"          exits as integer",
						"     ),",
						"     format: 'parquet',",
						"     partitionFileNames:['VFD_DFL_Affluences_JSON_to_Processed_output.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          site_id,",
						"          site_name,",
						"          date,",
						"          hour,",
						"          occupancy,",
						"          entries = entries_count,",
						"          exits = exits_count",
						"     ),",
						"     partitionBy('hash', 1),",
						"     folderPath: concat(\"Affluences/\", $year, \"/\", $month),",
						"     compressionCodec: 'snappy') ~> SinkProcessed"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Affluences_Monthly_Aggregation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Affluences"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Processed_Affluences_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceNewData"
						},
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Affluences_Monthly_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceExistingMonthly"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Affluences_Monthly_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkMonthly"
						}
					],
					"transformations": [
						{
							"name": "FilterEntryPoints"
						},
						{
							"name": "CleanSiteNames"
						},
						{
							"name": "AggregateByDate"
						},
						{
							"name": "FilterTerrazze"
						},
						{
							"name": "MaxOccupancyOnly"
						},
						{
							"name": "JoinWithMax"
						},
						{
							"name": "FilterMaxOccupancy"
						},
						{
							"name": "MaxOccupancyByDate"
						},
						{
							"name": "PivotEntries"
						},
						{
							"name": "CalculateTotals"
						},
						{
							"name": "JoinAggregations"
						},
						{
							"name": "CleanJoinOutput"
						},
						{
							"name": "GetCurrentDateFromNew"
						},
						{
							"name": "FilterExistingData"
						},
						{
							"name": "UnionWithExisting"
						}
					],
					"scriptLines": [
						"source(output(",
						"          site_id as string,",
						"          site_name as string,",
						"          date as date,",
						"          hour as string,",
						"          occupancy as integer,",
						"          entries as integer,",
						"          exits as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceNewData",
						"source(output(",
						"          date as date,",
						"          total_entries as integer,",
						"          ascensore_nord_entries as integer,",
						"          ascensore_sud_entries as integer,",
						"          salita_piedi_entries as integer,",
						"          discesa_piedi_entries as integer,",
						"          max_occupancy as integer,",
						"          max_occupancy_hour as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     format: 'parquet') ~> SourceExistingMonthly",
						"SourceNewData filter(site_name == 'Ascensore Nord' || site_name == 'Ascensore Sud' || site_name == 'Salita a piedi' || site_name == 'Discesa a piedi') ~> FilterEntryPoints",
						"FilterEntryPoints derive(site_name_clean = case(",
						"     site_name == 'Ascensore Nord', 'AscensoreNord',",
						"     site_name == 'Ascensore Sud', 'AscensoreSud',",
						"     site_name == 'Salita a piedi', 'SalitaPiedi',",
						"     site_name == 'Discesa a piedi', 'DiscesaPiedi',",
						"     site_name",
						")) ~> CleanSiteNames",
						"CleanSiteNames aggregate(groupBy(date,",
						"          site_name_clean),",
						"     entries_sum = sum(entries)) ~> AggregateByDate",
						"SourceNewData filter(site_name == 'Terrazze') ~> FilterTerrazze",
						"FilterTerrazze aggregate(groupBy(date),",
						"     max_occupancy = max(occupancy)) ~> MaxOccupancyOnly",
						"FilterTerrazze, MaxOccupancyOnly join(SourceNewData@date == MaxOccupancyOnly@date,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinWithMax",
						"JoinWithMax filter(occupancy == max_occupancy) ~> FilterMaxOccupancy",
						"FilterMaxOccupancy aggregate(groupBy(SourceNewData@date,",
						"          max_occupancy),",
						"     max_occupancy_hour = first(hour)) ~> MaxOccupancyByDate",
						"AggregateByDate pivot(groupBy(date),",
						"     pivotBy(site_name_clean, ['AscensoreNord', 'AscensoreSud', 'SalitaPiedi', 'DiscesaPiedi']),",
						"     entries_sum = sum(entries_sum),",
						"     columnNaming: '$N$V',",
						"     lateral: true) ~> PivotEntries",
						"PivotEntries derive(ascensore_nord_entries = coalesce(entries_sumAscensoreNord, 0),",
						"          ascensore_sud_entries = coalesce(entries_sumAscensoreSud, 0),",
						"          salita_piedi_entries = coalesce(entries_sumSalitaPiedi, 0),",
						"          discesa_piedi_entries = coalesce(entries_sumDiscesaPiedi, 0),",
						"          total_entries = coalesce(entries_sumAscensoreNord, 0) + coalesce(entries_sumAscensoreSud, 0) + coalesce(entries_sumSalitaPiedi, 0) + coalesce(entries_sumDiscesaPiedi, 0)) ~> CalculateTotals",
						"CalculateTotals, MaxOccupancyByDate join(PivotEntries@date == MaxOccupancyByDate@date,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinAggregations",
						"JoinAggregations select(mapColumn(",
						"          date = PivotEntries@date,",
						"          total_entries,",
						"          ascensore_nord_entries,",
						"          ascensore_sud_entries,",
						"          salita_piedi_entries,",
						"          discesa_piedi_entries,",
						"          max_occupancy,",
						"          max_occupancy_hour",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> CleanJoinOutput",
						"CleanJoinOutput derive(current_date_value = date) ~> GetCurrentDateFromNew",
						"SourceExistingMonthly, GetCurrentDateFromNew exists(SourceExistingMonthly@date == current_date_value,",
						"     negate:true,",
						"     broadcast: 'auto')~> FilterExistingData",
						"FilterExistingData, CleanJoinOutput union(byName: true,",
						"     partitionBy('hash', 1))~> UnionWithExisting",
						"UnionWithExisting sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          date as date,",
						"          total_entries as integer,",
						"          ascensore_nord_entries as integer,",
						"          ascensore_sud_entries as integer,",
						"          salita_piedi_entries as integer,",
						"          discesa_piedi_entries as integer,",
						"          max_occupancy as integer,",
						"          max_occupancy_hour as string",
						"     ),",
						"     format: 'parquet',",
						"     partitionFileNames:['VFD_DFL_Affluences_Monthly_Aggregation_output.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1),",
						"     compressionCodec: 'snappy') ~> SinkMonthly"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_DuomoWiFi_Connections_Raw_Processed')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Trasforma connessioni da JSON Raw a Parquet Processed con calcoli e conversioni",
				"folder": {
					"name": "WiFi"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Raw_DuomoWiFi_Connections_JSON",
								"type": "DatasetReference"
							},
							"name": "SourceConnectionsJSON"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Processed_DuomoWiFi_Connections_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkConnectionsParquet"
						}
					],
					"transformations": [
						{
							"name": "FlattenData"
						},
						{
							"name": "DerivedColumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          generated as string,",
						"          sId as string,",
						"          count as integer,",
						"          connections as (customerId as string, username as string, organizationId as string, start as string, startBusiness as string, stop as string, stopBusiness as string, duration as integer, traffic as integer, locationName as string, locationId as string, hotspotIdentifier as string, hotspotId as string, latitude as double, longitude as double, macAddressClient as string, ipAddressClient as string, terminateCause as string)[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> SourceConnectionsJSON",
						"SourceConnectionsJSON foldDown(unroll(connections),",
						"     mapColumn(",
						"          hotspotIdentifier = connections.hotspotIdentifier,",
						"          start = connections.start,",
						"          stop = connections.stop,",
						"          duration = connections.duration,",
						"          traffic = connections.traffic,",
						"          terminateCause = connections.terminateCause,",
						"          username = connections.username,",
						"          macAddressClient = connections.macAddressClient,",
						"          ipAddressClient = connections.ipAddressClient,",
						"          locationId = connections.locationId,",
						"          customerId = connections.customerId",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenData",
						"FlattenData derive(sessionTime_minutes = duration / 60,",
						"          traffic_MB = traffic / (1024 * 1024)) ~> DerivedColumns",
						"DerivedColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          hotspotIdentifier as string,",
						"          start as string,",
						"          stop as string,",
						"          duration as integer,",
						"          traffic as integer,",
						"          terminateCause as string,",
						"          username as string,",
						"          macAddressClient as string,",
						"          ipAddressClient as string,",
						"          locationId as string,",
						"          customerId as string,",
						"          sessionTime_minutes as double,",
						"          traffic_MB as double",
						"     ),",
						"     format: 'parquet',",
						"     partitionFileNames:['VFD_DFL_DuomoWiFi_Connections_Raw_Processed_output.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     partitionBy('hash', 1),",
						"     compressionCodec: 'snappy') ~> SinkConnectionsParquet"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_DuomoWiFi_Processed_Curated')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Esegue left join tra connessioni e utenti per creare dataset arricchito",
				"folder": {
					"name": "WiFi"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Processed_DuomoWiFi_Connections_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceConnections"
						},
						{
							"dataset": {
								"referenceName": "VFD_DS_Processed_DuomoWiFi_Users_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceUsers"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_DuomoWiFi_Enriched_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkEnrichedData"
						}
					],
					"transformations": [
						{
							"name": "LeftJoinConnectionsUsers"
						},
						{
							"name": "SelectAndRenameColumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          hotspotIdentifier as string,",
						"          start as string,",
						"          stop as string,",
						"          duration as integer,",
						"          traffic as integer,",
						"          terminateCause as string,",
						"          username as string,",
						"          macAddressClient as string,",
						"          ipAddressClient as string,",
						"          locationId as string,",
						"          customerId as string,",
						"          sessionTime_minutes as double,",
						"          traffic_MB as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceConnections",
						"source(output(",
						"          cid as string,",
						"          username as string,",
						"          firstName as string,",
						"          lastName as string,",
						"          email as string,",
						"          gender as string,",
						"          phone as string,",
						"          birthDate as string,",
						"          country as string,",
						"          zipCode as string,",
						"          wifiArea as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceUsers",
						"SourceConnections, SourceUsers join(SourceConnections@username == SourceUsers@username,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> LeftJoinConnectionsUsers",
						"LeftJoinConnectionsUsers select(mapColumn(",
						"          hotspotIdentifier,",
						"          start,",
						"          stop,",
						"          duration,",
						"          traffic,",
						"          terminateCause,",
						"          username = SourceConnections@username,",
						"          macAddressClient,",
						"          ipAddressClient,",
						"          locationId,",
						"          customerId,",
						"          sessionTime_minutes,",
						"          traffic_MB,",
						"          user_cid = cid,",
						"          user_firstName = firstName,",
						"          user_lastName = lastName,",
						"          user_email = email,",
						"          user_gender = gender,",
						"          user_phone = phone,",
						"          user_birthDate = birthDate,",
						"          user_country = country,",
						"          user_zipCode = zipCode,",
						"          user_wifiArea = wifiArea",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> SelectAndRenameColumns",
						"SelectAndRenameColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          hotspotIdentifier as string,",
						"          start as string,",
						"          stop as string,",
						"          duration as integer,",
						"          traffic as integer,",
						"          terminateCause as string,",
						"          username as string,",
						"          macAddressClient as string,",
						"          ipAddressClient as string,",
						"          locationId as string,",
						"          customerId as string,",
						"          sessionTime_minutes as double,",
						"          traffic_MB as double,",
						"          user_firstName as string,",
						"          user_lastName as string,",
						"          user_email as string,",
						"          user_gender as string,",
						"          user_phone as string,",
						"          user_birthDate as string,",
						"          user_country as string,",
						"          user_zipCode as string,",
						"          user_wifiArea as string",
						"     ),",
						"     format: 'parquet',",
						"     partitionFileNames:['VFD_DFL_DuomoWiFi_Processed_Curated_output.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     partitionBy('hash', 1),",
						"     compressionCodec: 'snappy') ~> SinkEnrichedData"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_DuomoWiFi_Users_Raw_Processed')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Consolida tutti i file JSON degli utenti in un singolo file Parquet",
				"folder": {
					"name": "WiFi"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Raw_DuomoWiFi_Users_JSON",
								"type": "DatasetReference"
							},
							"name": "SourceUsersJSON"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Processed_DuomoWiFi_Users_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkUsersParquet"
						}
					],
					"transformations": [
						{
							"name": "FlattenUserData"
						}
					],
					"scriptLines": [
						"parameters{",
						"     year as string,",
						"     month as string",
						"}",
						"source(output(",
						"          count as integer,",
						"          scrollId as string,",
						"          customers as (cid as string, username as string, firstName as string, lastName as string, email as string, gender as string, phone as string, birthDate as string, country as string, zipCode as string, wifiArea as string)[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine',",
						"     wildcardPaths:[(concat(\"/Wifi/users/\", $year, \"/\", $month, \"/VFD_Wifi_user_*.json\"))]) ~> SourceUsersJSON",
						"SourceUsersJSON foldDown(unroll(customers),",
						"     mapColumn(",
						"          cid = customers.cid,",
						"          username = customers.username,",
						"          firstName = customers.firstName,",
						"          lastName = customers.lastName,",
						"          email = customers.email,",
						"          gender = customers.gender,",
						"          phone = customers.phone,",
						"          birthDate = customers.birthDate,",
						"          country = customers.country,",
						"          zipCode = customers.zipCode,",
						"          wifiArea = customers.wifiArea",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenUserData",
						"FlattenUserData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          cid as string,",
						"          username as string,",
						"          firstName as string,",
						"          lastName as string,",
						"          email as string,",
						"          gender as string,",
						"          phone as string,",
						"          birthDate as string,",
						"          country as string,",
						"          zipCode as string,",
						"          wifiArea as string",
						"     ),",
						"     format: 'parquet',",
						"     partitionFileNames:['VFD_DFL_DuomoWiFi_Users_Raw_Processed_output.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     partitionBy('hash', 1),",
						"     compressionCodec: 'snappy') ~> SinkUsersParquet"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida2_Atomic_APPEND_Booking_Complete')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_dummy",
								"type": "DatasetReference"
							},
							"name": "DummySource"
						},
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Complete_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceExistingContent"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkTemp"
						}
					],
					"transformations": [
						{
							"name": "CreateNewRecord"
						},
						{
							"name": "SelectNewColumns"
						},
						{
							"name": "UnionAllRecords"
						}
					],
					"scriptLines": [
						"parameters{",
						"     guid_pk as string,",
						"     reservation_progressiveCode as string,",
						"     reservation_code as string,",
						"     reservation_status as integer,",
						"     invoiceRequired as string,",
						"     customer as decimal(10,2),",
						"     visitDate as string,",
						"     reservationPayment_guid as string,",
						"     parentPayment_guid as string,",
						"     sliced as string,",
						"     reservation_guid as string,",
						"     group_guid as string,",
						"     group_label as string,",
						"     group_email as string,",
						"     paymentCode as string,",
						"     paymentCondition as decimal(10,2),",
						"     reservation_amount as decimal(10,2),",
						"     reservation_amountTax as decimal(10,2),",
						"     status as integer,",
						"     status_text as string,",
						"     stamp as string,",
						"     notes as string,",
						"     transactionType as string,",
						"     transactionType_text as string,",
						"     paymentLimitDate as string,",
						"     paymentDate as string,",
						"     refund as string,",
						"     refunded as string,",
						"     convention_label as string,",
						"     receiptCode as string,",
						"     insertTimestamp as string,",
						"     updateTimestamp as string,",
						"     owner as string,",
						"     owner_text as string,",
						"     sessionId as string,",
						"     terminal_label as string,",
						"     terminalGroup_label as string,",
						"     gateway_guid as string,",
						"     gateway_label as string,",
						"     transactionID as string,",
						"     bankAccount_guid as string,",
						"     bankAccount_label as string,",
						"     channel_guid as string,",
						"     channel_label as string,",
						"     channelType as string,",
						"     detail_guid as string,",
						"     extra_guid as string,",
						"     priceList as string,",
						"     event as string,",
						"     detailType as string,",
						"     detail_text as string,",
						"     detail_label as string,",
						"     detail_count as integer,",
						"     paymentDetail_guid as string,",
						"     detail_payingPartecipants as integer,",
						"     detail_quantity as integer,",
						"     tickets_quantity as integer,",
						"     pax_quantity as integer,",
						"     costCenter_guid as string,",
						"     costCenter_label as string,",
						"     object_receipt as integer,",
						"     object_taxCode as string,",
						"     object_taxNotes as string,",
						"     object_amount as decimal(10,2),",
						"     object_taxPercentage as decimal(10,2),",
						"     amount as decimal(10,2),",
						"     amountNet as decimal(10,2),",
						"     amountPresale as decimal(10,2),",
						"     amountSold as decimal(10,2),",
						"     amountPayed as decimal(10,2),",
						"     amountPending as decimal(10,2),",
						"     amountCanceled as decimal(10,2),",
						"     externalId as string,",
						"     amountRefunded as decimal(10,2),",
						"     invoiceSummary as string,",
						"     eventCalendar_guid as string,",
						"     passDetail_guid as string,",
						"     paymentCostCenter_guid as string,",
						"     organization_guid as string,",
						"     venue_guid as string,",
						"     olapUpdateTimestamp as string,",
						"     row_id as string",
						"}",
						"source(output(",
						"          dummy as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     data: 'dummy\\n1') ~> DummySource",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceExistingContent",
						"DummySource derive(guid_pk = $guid_pk,",
						"          reservation_progressiveCode = $reservation_progressiveCode,",
						"          reservation_code = $reservation_code,",
						"          reservation_status = $reservation_status,",
						"          invoiceRequired = $invoiceRequired,",
						"          customer = $customer,",
						"          visitDate = toDate($visitDate, 'yyyy-MM-dd'),",
						"          reservationPayment_guid = $reservationPayment_guid,",
						"          parentPayment_guid = $parentPayment_guid,",
						"          sliced = $sliced,",
						"          reservation_guid = $reservation_guid,",
						"          group_guid = $group_guid,",
						"          group_label = $group_label,",
						"          group_email = $group_email,",
						"          paymentCode = $paymentCode,",
						"          paymentCondition = $paymentCondition,",
						"          reservation_amount = $reservation_amount,",
						"          reservation_amountTax = $reservation_amountTax,",
						"          status = $status,",
						"          status_text = $status_text,",
						"          stamp = $stamp,",
						"          notes = $notes,",
						"          transactionType = $transactionType,",
						"          transactionType_text = $transactionType_text,",
						"          paymentLimitDate = toDate($paymentLimitDate, 'yyyy-MM-dd'),",
						"          paymentDate = toDate($paymentDate, 'yyyy-MM-dd'),",
						"          refund = $refund,",
						"          refunded = $refunded,",
						"          convention_label = $convention_label,",
						"          receiptCode = $receiptCode,",
						"          insertTimestamp = toDate($insertTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          updateTimestamp = toDate($updateTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          owner = $owner,",
						"          owner_text = $owner_text,",
						"          sessionId = $sessionId,",
						"          terminal_label = $terminal_label,",
						"          terminalGroup_label = $terminalGroup_label,",
						"          gateway_guid = $gateway_guid,",
						"          gateway_label = $gateway_label,",
						"          transactionID = $transactionID,",
						"          bankAccount_guid = $bankAccount_guid,",
						"          bankAccount_label = $bankAccount_label,",
						"          channel_guid = $channel_guid,",
						"          channel_label = $channel_label,",
						"          channelType = $channelType,",
						"          detail_guid = $detail_guid,",
						"          extra_guid = $extra_guid,",
						"          priceList = $priceList,",
						"          event = $event,",
						"          detailType = $detailType,",
						"          detail_text = $detail_text,",
						"          detail_label = $detail_label,",
						"          detail_count = $detail_count,",
						"          paymentDetail_guid = $paymentDetail_guid,",
						"          detail_payingPartecipants = $detail_payingPartecipants,",
						"          detail_quantity = $detail_quantity,",
						"          tickets_quantity = $tickets_quantity,",
						"          pax_quantity = $pax_quantity,",
						"          costCenter_guid = $costCenter_guid,",
						"          costCenter_label = $costCenter_label,",
						"          object_receipt = $object_receipt,",
						"          object_taxCode = $object_taxCode,",
						"          object_taxNotes = $object_taxNotes,",
						"          object_amount = $object_amount,",
						"          object_taxPercentage = $object_taxPercentage,",
						"          amount = $amount,",
						"          amountNet = $amountNet,",
						"          amountPresale = $amountPresale,",
						"          amountSold = $amountSold,",
						"          amountPayed = $amountPayed,",
						"          amountPending = $amountPending,",
						"          amountCanceled = $amountCanceled,",
						"          externalId = $externalId,",
						"          amountRefunded = $amountRefunded,",
						"          invoiceSummary = $invoiceSummary,",
						"          eventCalendar_guid = $eventCalendar_guid,",
						"          passDetail_guid = $passDetail_guid,",
						"          paymentCostCenter_guid = $paymentCostCenter_guid,",
						"          organization_guid = $organization_guid,",
						"          venue_guid = $venue_guid,",
						"          olapUpdateTimestamp = toDate($olapUpdateTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          row_id = $row_id) ~> CreateNewRecord",
						"CreateNewRecord select(mapColumn(",
						"          guid_pk,",
						"          reservation_progressiveCode,",
						"          reservation_code,",
						"          reservation_status,",
						"          invoiceRequired,",
						"          customer,",
						"          visitDate,",
						"          reservationPayment_guid,",
						"          parentPayment_guid,",
						"          sliced,",
						"          reservation_guid,",
						"          group_guid,",
						"          group_label,",
						"          group_email,",
						"          paymentCode,",
						"          paymentCondition,",
						"          reservation_amount,",
						"          reservation_amountTax,",
						"          status,",
						"          status_text,",
						"          stamp,",
						"          notes,",
						"          transactionType,",
						"          transactionType_text,",
						"          paymentLimitDate,",
						"          paymentDate,",
						"          refund,",
						"          refunded,",
						"          convention_label,",
						"          receiptCode,",
						"          insertTimestamp,",
						"          updateTimestamp,",
						"          owner,",
						"          owner_text,",
						"          sessionId,",
						"          terminal_label,",
						"          terminalGroup_label,",
						"          gateway_guid,",
						"          gateway_label,",
						"          transactionID,",
						"          bankAccount_guid,",
						"          bankAccount_label,",
						"          channel_guid,",
						"          channel_label,",
						"          channelType,",
						"          detail_guid,",
						"          extra_guid,",
						"          priceList,",
						"          event,",
						"          detailType,",
						"          detail_text,",
						"          detail_label,",
						"          detail_count,",
						"          paymentDetail_guid,",
						"          detail_payingPartecipants,",
						"          detail_quantity,",
						"          tickets_quantity,",
						"          pax_quantity,",
						"          costCenter_guid,",
						"          costCenter_label,",
						"          object_receipt,",
						"          object_taxCode,",
						"          object_taxNotes,",
						"          object_amount,",
						"          object_taxPercentage,",
						"          amount,",
						"          amountNet,",
						"          amountPresale,",
						"          amountSold,",
						"          amountPayed,",
						"          amountPending,",
						"          amountCanceled,",
						"          externalId,",
						"          amountRefunded,",
						"          invoiceSummary,",
						"          eventCalendar_guid,",
						"          passDetail_guid,",
						"          paymentCostCenter_guid,",
						"          organization_guid,",
						"          venue_guid,",
						"          olapUpdateTimestamp,",
						"          row_id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectNewColumns",
						"SourceExistingContent, SelectNewColumns union(byName: true)~> UnionAllRecords",
						"UnionAllRecords sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['temp_complete.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SinkTemp"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida2_Atomic_APPEND_Booking_Summary')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_dummy",
								"type": "DatasetReference"
							},
							"name": "DummySource"
						},
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Summary_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceExistingContent"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkTemp"
						}
					],
					"transformations": [
						{
							"name": "CreateNewSummaryRecord"
						},
						{
							"name": "SelectSummaryFields"
						},
						{
							"name": "UnionByName"
						}
					],
					"scriptLines": [
						"parameters{",
						"     row_id as string,",
						"     reservation_code as string,",
						"     priceList as string,",
						"     channel_label as string,",
						"     pax_quantity as integer,",
						"     insertTimestamp as string,",
						"     updateTimestamp as string,",
						"     reservation_amount as decimal(10,2),",
						"     visitDate as string",
						"}",
						"source(output(",
						"          dummy as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     data: 'dummy\\n1') ~> DummySource",
						"source(output(",
						"          row_id as string,",
						"          reservation_code as string,",
						"          priceList as string,",
						"          channel_label as string,",
						"          pax_quantity as integer,",
						"          insertTimestamp as date,",
						"          updateTimestamp as date,",
						"          reservation_amount as decimal(10,2),",
						"          visitDate as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceExistingContent",
						"DummySource derive(row_id = $row_id,",
						"          reservation_code = $reservation_code,",
						"          priceList = $priceList,",
						"          channel_label = $channel_label,",
						"          pax_quantity = $pax_quantity,",
						"          insertTimestamp = toDate($insertTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          updateTimestamp = toDate($updateTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          reservation_amount = $reservation_amount,",
						"          visitDate = toDate($visitDate, 'yyyy-MM-dd')) ~> CreateNewSummaryRecord",
						"CreateNewSummaryRecord select(mapColumn(",
						"          row_id,",
						"          reservation_code,",
						"          priceList,",
						"          channel_label,",
						"          pax_quantity,",
						"          insertTimestamp,",
						"          updateTimestamp,",
						"          reservation_amount,",
						"          visitDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSummaryFields",
						"SourceExistingContent, SelectSummaryFields union(byName: true)~> UnionByName",
						"UnionByName sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['temp_append_summary.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SinkTemp"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida2_Atomic_APPEND_Historical')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_dummy",
								"type": "DatasetReference"
							},
							"name": "DummySource"
						},
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Historical_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceExistingHistorical"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkTemp"
						}
					],
					"transformations": [
						{
							"name": "CreateNewRecord"
						},
						{
							"name": "AddAuditFields"
						},
						{
							"name": "SelectNewColumns"
						},
						{
							"name": "UnionByName"
						}
					],
					"scriptLines": [
						"parameters{",
						"     guid_pk as string,",
						"     reservation_progressiveCode as string,",
						"     reservation_code as string,",
						"     reservation_status as integer,",
						"     invoiceRequired as string,",
						"     customer as decimal(10,2),",
						"     visitDate as string,",
						"     reservationPayment_guid as string,",
						"     parentPayment_guid as string,",
						"     sliced as string,",
						"     reservation_guid as string,",
						"     group_guid as string,",
						"     group_label as string,",
						"     group_email as string,",
						"     paymentCode as string,",
						"     paymentCondition as decimal(10,2),",
						"     reservation_amount as decimal(10,2),",
						"     reservation_amountTax as decimal(10,2),",
						"     status as integer,",
						"     status_text as string,",
						"     stamp as string,",
						"     notes as string,",
						"     transactionType as string,",
						"     transactionType_text as string,",
						"     paymentLimitDate as string,",
						"     paymentDate as string,",
						"     refund as string,",
						"     refunded as string,",
						"     convention_label as string,",
						"     receiptCode as string,",
						"     insertTimestamp as string,",
						"     updateTimestamp as string,",
						"     owner as string,",
						"     owner_text as string,",
						"     sessionId as string,",
						"     terminal_label as string,",
						"     terminalGroup_label as string,",
						"     gateway_guid as string,",
						"     gateway_label as string,",
						"     transactionID as string,",
						"     bankAccount_guid as string,",
						"     bankAccount_label as string,",
						"     channel_guid as string,",
						"     channel_label as string,",
						"     channelType as string,",
						"     detail_guid as string,",
						"     extra_guid as string,",
						"     priceList as string,",
						"     event as string,",
						"     detailType as string,",
						"     detail_text as string,",
						"     detail_label as string,",
						"     detail_count as integer,",
						"     paymentDetail_guid as string,",
						"     detail_payingPartecipants as integer,",
						"     detail_quantity as integer,",
						"     tickets_quantity as integer,",
						"     pax_quantity as integer,",
						"     costCenter_guid as string,",
						"     costCenter_label as string,",
						"     object_receipt as integer,",
						"     object_taxCode as string,",
						"     object_taxNotes as string,",
						"     object_amount as decimal(10,2),",
						"     object_taxPercentage as decimal(10,2),",
						"     amount as decimal(10,2),",
						"     amountNet as decimal(10,2),",
						"     amountPresale as decimal(10,2),",
						"     amountSold as decimal(10,2),",
						"     amountPayed as decimal(10,2),",
						"     amountPending as decimal(10,2),",
						"     amountCanceled as decimal(10,2),",
						"     externalId as string,",
						"     amountRefunded as decimal(10,2),",
						"     invoiceSummary as string,",
						"     eventCalendar_guid as string,",
						"     passDetail_guid as string,",
						"     paymentCostCenter_guid as string,",
						"     organization_guid as string,",
						"     venue_guid as string,",
						"     olapUpdateTimestamp as string,",
						"     row_id as string,",
						"     operationType as string",
						"}",
						"source(output(",
						"          dummy as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     data: 'dummy\\n1') ~> DummySource",
						"source(output(",
						"          guid_pk as string,",
						"          reservation_progressiveCode as string,",
						"          reservation_code as string,",
						"          reservation_status as integer,",
						"          invoiceRequired as string,",
						"          customer as decimal(10,2),",
						"          visitDate as date,",
						"          reservationPayment_guid as string,",
						"          parentPayment_guid as string,",
						"          sliced as string,",
						"          reservation_guid as string,",
						"          group_guid as string,",
						"          group_label as string,",
						"          group_email as string,",
						"          paymentCode as string,",
						"          paymentCondition as decimal(10,2),",
						"          reservation_amount as decimal(10,2),",
						"          reservation_amountTax as decimal(10,2),",
						"          status as integer,",
						"          status_text as string,",
						"          stamp as string,",
						"          notes as string,",
						"          transactionType as string,",
						"          transactionType_text as string,",
						"          paymentLimitDate as date,",
						"          paymentDate as date,",
						"          refund as string,",
						"          refunded as string,",
						"          convention_label as string,",
						"          receiptCode as string,",
						"          insertTimestamp as date,",
						"          updateTimestamp as date,",
						"          owner as string,",
						"          owner_text as string,",
						"          sessionId as string,",
						"          terminal_label as string,",
						"          terminalGroup_label as string,",
						"          gateway_guid as string,",
						"          gateway_label as string,",
						"          transactionID as string,",
						"          bankAccount_guid as string,",
						"          bankAccount_label as string,",
						"          channel_guid as string,",
						"          channel_label as string,",
						"          channelType as string,",
						"          detail_guid as string,",
						"          extra_guid as string,",
						"          priceList as string,",
						"          event as string,",
						"          detailType as string,",
						"          detail_text as string,",
						"          detail_label as string,",
						"          detail_count as integer,",
						"          paymentDetail_guid as string,",
						"          detail_payingPartecipants as integer,",
						"          detail_quantity as integer,",
						"          tickets_quantity as integer,",
						"          pax_quantity as integer,",
						"          costCenter_guid as string,",
						"          costCenter_label as string,",
						"          object_receipt as integer,",
						"          object_taxCode as string,",
						"          object_taxNotes as string,",
						"          object_amount as decimal(10,2),",
						"          object_taxPercentage as decimal(10,2),",
						"          amount as decimal(10,2),",
						"          amountNet as decimal(10,2),",
						"          amountPresale as decimal(10,2),",
						"          amountSold as decimal(10,2),",
						"          amountPayed as decimal(10,2),",
						"          amountPending as decimal(10,2),",
						"          amountCanceled as decimal(10,2),",
						"          externalId as string,",
						"          amountRefunded as decimal(10,2),",
						"          invoiceSummary as string,",
						"          eventCalendar_guid as string,",
						"          passDetail_guid as string,",
						"          paymentCostCenter_guid as string,",
						"          organization_guid as string,",
						"          venue_guid as string,",
						"          olapUpdateTimestamp as date,",
						"          row_id as string,",
						"          operationType as string,",
						"          operationTimestamp as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceExistingHistorical",
						"DummySource derive(guid_pk = $guid_pk,",
						"          reservation_progressiveCode = $reservation_progressiveCode,",
						"          reservation_code = $reservation_code,",
						"          reservation_status = $reservation_status,",
						"          invoiceRequired = $invoiceRequired,",
						"          customer = $customer,",
						"          visitDate = toDate($visitDate, 'yyyy-MM-dd'),",
						"          reservationPayment_guid = $reservationPayment_guid,",
						"          parentPayment_guid = $parentPayment_guid,",
						"          sliced = $sliced,",
						"          reservation_guid = $reservation_guid,",
						"          group_guid = $group_guid,",
						"          group_label = $group_label,",
						"          group_email = $group_email,",
						"          paymentCode = $paymentCode,",
						"          paymentCondition = $paymentCondition,",
						"          reservation_amount = $reservation_amount,",
						"          reservation_amountTax = $reservation_amountTax,",
						"          status = $status,",
						"          status_text = $status_text,",
						"          stamp = $stamp,",
						"          notes = $notes,",
						"          transactionType = $transactionType,",
						"          transactionType_text = $transactionType_text,",
						"          paymentLimitDate = toDate($paymentLimitDate, 'yyyy-MM-dd'),",
						"          paymentDate = toDate($paymentDate, 'yyyy-MM-dd'),",
						"          refund = $refund,",
						"          refunded = $refunded,",
						"          convention_label = $convention_label,",
						"          receiptCode = $receiptCode,",
						"          insertTimestamp = toDate($insertTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          updateTimestamp = toDate($updateTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          owner = $owner,",
						"          owner_text = $owner_text,",
						"          sessionId = $sessionId,",
						"          terminal_label = $terminal_label,",
						"          terminalGroup_label = $terminalGroup_label,",
						"          gateway_guid = $gateway_guid,",
						"          gateway_label = $gateway_label,",
						"          transactionID = $transactionID,",
						"          bankAccount_guid = $bankAccount_guid,",
						"          bankAccount_label = $bankAccount_label,",
						"          channel_guid = $channel_guid,",
						"          channel_label = $channel_label,",
						"          channelType = $channelType,",
						"          detail_guid = $detail_guid,",
						"          extra_guid = $extra_guid,",
						"          priceList = $priceList,",
						"          event = $event,",
						"          detailType = $detailType,",
						"          detail_text = $detail_text,",
						"          detail_label = $detail_label,",
						"          detail_count = $detail_count,",
						"          paymentDetail_guid = $paymentDetail_guid,",
						"          detail_payingPartecipants = $detail_payingPartecipants,",
						"          detail_quantity = $detail_quantity,",
						"          tickets_quantity = $tickets_quantity,",
						"          pax_quantity = $pax_quantity,",
						"          costCenter_guid = $costCenter_guid,",
						"          costCenter_label = $costCenter_label,",
						"          object_receipt = $object_receipt,",
						"          object_taxCode = $object_taxCode,",
						"          object_taxNotes = $object_taxNotes,",
						"          object_amount = $object_amount,",
						"          object_taxPercentage = $object_taxPercentage,",
						"          amount = $amount,",
						"          amountNet = $amountNet,",
						"          amountPresale = $amountPresale,",
						"          amountSold = $amountSold,",
						"          amountPayed = $amountPayed,",
						"          amountPending = $amountPending,",
						"          amountCanceled = $amountCanceled,",
						"          externalId = $externalId,",
						"          amountRefunded = $amountRefunded,",
						"          invoiceSummary = $invoiceSummary,",
						"          eventCalendar_guid = $eventCalendar_guid,",
						"          passDetail_guid = $passDetail_guid,",
						"          paymentCostCenter_guid = $paymentCostCenter_guid,",
						"          organization_guid = $organization_guid,",
						"          venue_guid = $venue_guid,",
						"          olapUpdateTimestamp = toDate($olapUpdateTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          row_id = $row_id) ~> CreateNewRecord",
						"CreateNewRecord derive(audit_operation = $operationType,",
						"          audit_timestamp = currentTimestamp()) ~> AddAuditFields",
						"AddAuditFields select(mapColumn(",
						"          guid_pk,",
						"          reservation_progressiveCode,",
						"          reservation_code,",
						"          reservation_status,",
						"          invoiceRequired,",
						"          customer,",
						"          visitDate,",
						"          reservationPayment_guid,",
						"          parentPayment_guid,",
						"          sliced,",
						"          reservation_guid,",
						"          group_guid,",
						"          group_label,",
						"          group_email,",
						"          paymentCode,",
						"          paymentCondition,",
						"          reservation_amount,",
						"          reservation_amountTax,",
						"          status,",
						"          status_text,",
						"          stamp,",
						"          notes,",
						"          transactionType,",
						"          transactionType_text,",
						"          paymentLimitDate,",
						"          paymentDate,",
						"          refund,",
						"          refunded,",
						"          convention_label,",
						"          receiptCode,",
						"          insertTimestamp,",
						"          updateTimestamp,",
						"          owner,",
						"          owner_text,",
						"          sessionId,",
						"          terminal_label,",
						"          terminalGroup_label,",
						"          gateway_guid,",
						"          gateway_label,",
						"          transactionID,",
						"          bankAccount_guid,",
						"          bankAccount_label,",
						"          channel_guid,",
						"          channel_label,",
						"          channelType,",
						"          detail_guid,",
						"          extra_guid,",
						"          priceList,",
						"          event,",
						"          detailType,",
						"          detail_text,",
						"          detail_label,",
						"          detail_count,",
						"          paymentDetail_guid,",
						"          detail_payingPartecipants,",
						"          detail_quantity,",
						"          tickets_quantity,",
						"          pax_quantity,",
						"          costCenter_guid,",
						"          costCenter_label,",
						"          object_receipt,",
						"          object_taxCode,",
						"          object_taxNotes,",
						"          object_amount,",
						"          object_taxPercentage,",
						"          amount,",
						"          amountNet,",
						"          amountPresale,",
						"          amountSold,",
						"          amountPayed,",
						"          amountPending,",
						"          amountCanceled,",
						"          externalId,",
						"          amountRefunded,",
						"          invoiceSummary,",
						"          eventCalendar_guid,",
						"          passDetail_guid,",
						"          paymentCostCenter_guid,",
						"          organization_guid,",
						"          venue_guid,",
						"          olapUpdateTimestamp,",
						"          row_id,",
						"          audit_operation,",
						"          audit_timestamp",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectNewColumns",
						"SourceExistingHistorical, SelectNewColumns union(byName: true)~> UnionByName",
						"UnionByName sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['temp_append_historical.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SinkTemp"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida2_Atomic_CREATE_Booking_Complete')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_dummy",
								"type": "DatasetReference"
							},
							"name": "DummySource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Complete_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkComplete"
						}
					],
					"transformations": [
						{
							"name": "CreateRecordFromParameters"
						},
						{
							"name": "SelectFinalColumns"
						}
					],
					"scriptLines": [
						"parameters{",
						"     guid_pk as string,",
						"     reservation_progressiveCode as string,",
						"     reservation_code as string,",
						"     reservation_status as integer,",
						"     invoiceRequired as string,",
						"     customer as decimal(10,2),",
						"     visitDate as string,",
						"     reservationPayment_guid as string,",
						"     parentPayment_guid as string,",
						"     sliced as string,",
						"     reservation_guid as string,",
						"     group_guid as string,",
						"     group_label as string,",
						"     group_email as string,",
						"     paymentCode as string,",
						"     paymentCondition as decimal(10,2),",
						"     reservation_amount as decimal(10,2),",
						"     reservation_amountTax as decimal(10,2),",
						"     status as integer,",
						"     status_text as string,",
						"     stamp as string,",
						"     notes as string,",
						"     transactionType as string,",
						"     transactionType_text as string,",
						"     paymentLimitDate as string,",
						"     paymentDate as string,",
						"     refund as string,",
						"     refunded as string,",
						"     convention_label as string,",
						"     receiptCode as string,",
						"     insertTimestamp as string,",
						"     updateTimestamp as string,",
						"     owner as string,",
						"     owner_text as string,",
						"     sessionId as string,",
						"     terminal_label as string,",
						"     terminalGroup_label as string,",
						"     gateway_guid as string,",
						"     gateway_label as string,",
						"     transactionID as string,",
						"     bankAccount_guid as string,",
						"     bankAccount_label as string,",
						"     channel_guid as string,",
						"     channel_label as string,",
						"     channelType as string,",
						"     detail_guid as string,",
						"     extra_guid as string,",
						"     priceList as string,",
						"     event as string,",
						"     detailType as string,",
						"     detail_text as string,",
						"     detail_label as string,",
						"     detail_count as integer,",
						"     paymentDetail_guid as string,",
						"     detail_payingPartecipants as integer,",
						"     detail_quantity as integer,",
						"     tickets_quantity as integer,",
						"     pax_quantity as integer,",
						"     costCenter_guid as string,",
						"     costCenter_label as string,",
						"     object_receipt as integer,",
						"     object_taxCode as string,",
						"     object_taxNotes as string,",
						"     object_amount as decimal(10,2),",
						"     object_taxPercentage as decimal(10,2),",
						"     amount as decimal(10,2),",
						"     amountNet as decimal(10,2),",
						"     amountPresale as decimal(10,2),",
						"     amountSold as decimal(10,2),",
						"     amountPayed as decimal(10,2),",
						"     amountPending as decimal(10,2),",
						"     amountCanceled as decimal(10,2),",
						"     externalId as string,",
						"     amountRefunded as decimal(10,2),",
						"     invoiceSummary as string,",
						"     eventCalendar_guid as string,",
						"     passDetail_guid as string,",
						"     paymentCostCenter_guid as string,",
						"     organization_guid as string,",
						"     venue_guid as string,",
						"     olapUpdateTimestamp as string,",
						"     row_id as string",
						"}",
						"source(output(",
						"          dummy as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DummySource",
						"DummySource derive(guid_pk = $guid_pk,",
						"          reservation_progressiveCode = $reservation_progressiveCode,",
						"          reservation_code = $reservation_code,",
						"          reservation_status = $reservation_status,",
						"          invoiceRequired = $invoiceRequired,",
						"          customer = $customer,",
						"          visitDate = toDate($visitDate, 'yyyy-MM-dd'),",
						"          reservationPayment_guid = $reservationPayment_guid,",
						"          parentPayment_guid = $parentPayment_guid,",
						"          sliced = $sliced,",
						"          reservation_guid = $reservation_guid,",
						"          group_guid = $group_guid,",
						"          group_label = $group_label,",
						"          group_email = $group_email,",
						"          paymentCode = $paymentCode,",
						"          paymentCondition = $paymentCondition,",
						"          reservation_amount = $reservation_amount,",
						"          reservation_amountTax = $reservation_amountTax,",
						"          status = $status,",
						"          status_text = $status_text,",
						"          stamp = $stamp,",
						"          notes = $notes,",
						"          transactionType = $transactionType,",
						"          transactionType_text = $transactionType_text,",
						"          paymentLimitDate = toDate($paymentLimitDate, 'yyyy-MM-dd'),",
						"          paymentDate = toDate($paymentDate, 'yyyy-MM-dd'),",
						"          refund = $refund,",
						"          refunded = $refunded,",
						"          convention_label = $convention_label,",
						"          receiptCode = $receiptCode,",
						"          insertTimestamp = toDate($insertTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          updateTimestamp = toDate($updateTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          owner = $owner,",
						"          owner_text = $owner_text,",
						"          sessionId = $sessionId,",
						"          terminal_label = $terminal_label,",
						"          terminalGroup_label = $terminalGroup_label,",
						"          gateway_guid = $gateway_guid,",
						"          gateway_label = $gateway_label,",
						"          transactionID = $transactionID,",
						"          bankAccount_guid = $bankAccount_guid,",
						"          bankAccount_label = $bankAccount_label,",
						"          channel_guid = $channel_guid,",
						"          channel_label = $channel_label,",
						"          channelType = $channelType,",
						"          detail_guid = $detail_guid,",
						"          extra_guid = $extra_guid,",
						"          priceList = $priceList,",
						"          event = $event,",
						"          detailType = $detailType,",
						"          detail_text = $detail_text,",
						"          detail_label = $detail_label,",
						"          detail_count = $detail_count,",
						"          paymentDetail_guid = $paymentDetail_guid,",
						"          detail_payingPartecipants = $detail_payingPartecipants,",
						"          detail_quantity = $detail_quantity,",
						"          tickets_quantity = $tickets_quantity,",
						"          pax_quantity = $pax_quantity,",
						"          costCenter_guid = $costCenter_guid,",
						"          costCenter_label = $costCenter_label,",
						"          object_receipt = $object_receipt,",
						"          object_taxCode = $object_taxCode,",
						"          object_taxNotes = $object_taxNotes,",
						"          object_amount = $object_amount,",
						"          object_taxPercentage = $object_taxPercentage,",
						"          amount = $amount,",
						"          amountNet = $amountNet,",
						"          amountPresale = $amountPresale,",
						"          amountSold = $amountSold,",
						"          amountPayed = $amountPayed,",
						"          amountPending = $amountPending,",
						"          amountCanceled = $amountCanceled,",
						"          externalId = $externalId,",
						"          amountRefunded = $amountRefunded,",
						"          invoiceSummary = $invoiceSummary,",
						"          eventCalendar_guid = $eventCalendar_guid,",
						"          passDetail_guid = $passDetail_guid,",
						"          paymentCostCenter_guid = $paymentCostCenter_guid,",
						"          organization_guid = $organization_guid,",
						"          venue_guid = $venue_guid,",
						"          olapUpdateTimestamp = toDate($olapUpdateTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          row_id = $row_id) ~> CreateRecordFromParameters",
						"CreateRecordFromParameters select(mapColumn(",
						"          guid_pk,",
						"          reservation_progressiveCode,",
						"          reservation_code,",
						"          reservation_status,",
						"          invoiceRequired,",
						"          customer,",
						"          visitDate,",
						"          reservationPayment_guid,",
						"          parentPayment_guid,",
						"          sliced,",
						"          reservation_guid,",
						"          group_guid,",
						"          group_label,",
						"          group_email,",
						"          paymentCode,",
						"          paymentCondition,",
						"          reservation_amount,",
						"          reservation_amountTax,",
						"          status,",
						"          status_text,",
						"          stamp,",
						"          notes,",
						"          transactionType,",
						"          transactionType_text,",
						"          paymentLimitDate,",
						"          paymentDate,",
						"          refund,",
						"          refunded,",
						"          convention_label,",
						"          receiptCode,",
						"          insertTimestamp,",
						"          updateTimestamp,",
						"          owner,",
						"          owner_text,",
						"          sessionId,",
						"          terminal_label,",
						"          terminalGroup_label,",
						"          gateway_guid,",
						"          gateway_label,",
						"          transactionID,",
						"          bankAccount_guid,",
						"          bankAccount_label,",
						"          channel_guid,",
						"          channel_label,",
						"          channelType,",
						"          detail_guid,",
						"          extra_guid,",
						"          priceList,",
						"          event,",
						"          detailType,",
						"          detail_text,",
						"          detail_label,",
						"          detail_count,",
						"          paymentDetail_guid,",
						"          detail_payingPartecipants,",
						"          detail_quantity,",
						"          tickets_quantity,",
						"          pax_quantity,",
						"          costCenter_guid,",
						"          costCenter_label,",
						"          object_receipt,",
						"          object_taxCode,",
						"          object_taxNotes,",
						"          object_amount,",
						"          object_taxPercentage,",
						"          amount,",
						"          amountNet,",
						"          amountPresale,",
						"          amountSold,",
						"          amountPayed,",
						"          amountPending,",
						"          amountCanceled,",
						"          externalId,",
						"          amountRefunded,",
						"          invoiceSummary,",
						"          eventCalendar_guid,",
						"          passDetail_guid,",
						"          paymentCostCenter_guid,",
						"          organization_guid,",
						"          venue_guid,",
						"          olapUpdateTimestamp,",
						"          row_id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinalColumns",
						"SelectFinalColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          guid_pk as string,",
						"          reservation_progressiveCode as string,",
						"          reservation_code as string,",
						"          reservation_status as integer,",
						"          invoiceRequired as string,",
						"          customer as decimal(10,2),",
						"          visitDate as date,",
						"          reservationPayment_guid as string,",
						"          parentPayment_guid as string,",
						"          sliced as string,",
						"          reservation_guid as string,",
						"          group_guid as string,",
						"          group_label as string,",
						"          group_email as string,",
						"          paymentCode as string,",
						"          paymentCondition as decimal(10,2),",
						"          reservation_amount as decimal(10,2),",
						"          reservation_amountTax as decimal(10,2),",
						"          status as integer,",
						"          status_text as string,",
						"          stamp as string,",
						"          notes as string,",
						"          transactionType as string,",
						"          transactionType_text as string,",
						"          paymentLimitDate as date,",
						"          paymentDate as date,",
						"          refund as string,",
						"          refunded as string,",
						"          convention_label as string,",
						"          receiptCode as string,",
						"          insertTimestamp as date,",
						"          updateTimestamp as date,",
						"          owner as string,",
						"          owner_text as string,",
						"          sessionId as string,",
						"          terminal_label as string,",
						"          terminalGroup_label as string,",
						"          gateway_guid as string,",
						"          gateway_label as string,",
						"          transactionID as string,",
						"          bankAccount_guid as string,",
						"          bankAccount_label as string,",
						"          channel_guid as string,",
						"          channel_label as string,",
						"          channelType as string,",
						"          detail_guid as string,",
						"          extra_guid as string,",
						"          priceList as string,",
						"          event as string,",
						"          detailType as string,",
						"          detail_text as string,",
						"          detail_label as string,",
						"          detail_count as integer,",
						"          paymentDetail_guid as string,",
						"          detail_payingPartecipants as integer,",
						"          detail_quantity as integer,",
						"          tickets_quantity as integer,",
						"          pax_quantity as integer,",
						"          costCenter_guid as string,",
						"          costCenter_label as string,",
						"          object_receipt as integer,",
						"          object_taxCode as string,",
						"          object_taxNotes as string,",
						"          object_amount as decimal(10,2),",
						"          object_taxPercentage as decimal(10,2),",
						"          amount as decimal(10,2),",
						"          amountNet as decimal(10,2),",
						"          amountPresale as decimal(10,2),",
						"          amountSold as decimal(10,2),",
						"          amountPayed as decimal(10,2),",
						"          amountPending as decimal(10,2),",
						"          amountCanceled as decimal(10,2),",
						"          externalId as string,",
						"          amountRefunded as decimal(10,2),",
						"          invoiceSummary as string,",
						"          eventCalendar_guid as string,",
						"          passDetail_guid as string,",
						"          paymentCostCenter_guid as string,",
						"          organization_guid as string,",
						"          venue_guid as string,",
						"          olapUpdateTimestamp as date,",
						"          row_id as string",
						"     ),",
						"     format: 'parquet',",
						"     partitionFileNames:['booking_complete.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SinkComplete"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida2_Atomic_CREATE_Booking_Summary')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_dummy",
								"type": "DatasetReference"
							},
							"name": "DummySource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Summary_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkSummary"
						}
					],
					"transformations": [
						{
							"name": "CreateSummaryRecord"
						},
						{
							"name": "SelectSummaryFields"
						}
					],
					"scriptLines": [
						"parameters{",
						"     row_id as string,",
						"     reservation_code as string,",
						"     priceList as string,",
						"     channel_label as string,",
						"     pax_quantity as integer,",
						"     insertTimestamp as string,",
						"     updateTimestamp as string,",
						"     reservation_amount as decimal(10,2),",
						"     visitDate as string",
						"}",
						"source(output(",
						"          dummy as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     data: 'dummy\\n1') ~> DummySource",
						"DummySource derive(row_id = $row_id,",
						"          reservation_code = $reservation_code,",
						"          priceList = $priceList,",
						"          channel_label = $channel_label,",
						"          pax_quantity = $pax_quantity,",
						"          insertTimestamp = toDate($insertTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          updateTimestamp = toDate($updateTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          reservation_amount = $reservation_amount,",
						"          visitDate = toDate($visitDate, 'yyyy-MM-dd')) ~> CreateSummaryRecord",
						"CreateSummaryRecord select(mapColumn(",
						"          row_id,",
						"          reservation_code,",
						"          priceList,",
						"          channel_label,",
						"          pax_quantity,",
						"          insertTimestamp,",
						"          updateTimestamp,",
						"          reservation_amount,",
						"          visitDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSummaryFields",
						"SelectSummaryFields sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          row_id as string,",
						"          reservation_code as string,",
						"          priceList as string,",
						"          channel_label as string,",
						"          pax_quantity as integer,",
						"          insertTimestamp as date,",
						"          updateTimestamp as date,",
						"          reservation_amount as decimal(10,2),",
						"          visitDate as date",
						"     ),",
						"     format: 'parquet',",
						"     partitionFileNames:['booking_summary.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SinkSummary"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida2_Atomic_CREATE_Historical')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_dummy",
								"type": "DatasetReference"
							},
							"name": "DummySource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Historical_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkHistorical"
						}
					],
					"transformations": [
						{
							"name": "CreateHistoricalRecord"
						},
						{
							"name": "AddAuditFields"
						},
						{
							"name": "SelectFinalColumns"
						}
					],
					"scriptLines": [
						"parameters{",
						"     guid_pk as string,",
						"     reservation_progressiveCode as string,",
						"     reservation_code as string,",
						"     reservation_status as integer,",
						"     invoiceRequired as string,",
						"     customer as decimal(10,2),",
						"     visitDate as string,",
						"     reservationPayment_guid as string,",
						"     parentPayment_guid as string,",
						"     sliced as string,",
						"     reservation_guid as string,",
						"     group_guid as string,",
						"     group_label as string,",
						"     group_email as string,",
						"     paymentCode as string,",
						"     paymentCondition as decimal(10,2),",
						"     reservation_amount as decimal(10,2),",
						"     reservation_amountTax as decimal(10,2),",
						"     status as integer,",
						"     status_text as string,",
						"     stamp as string,",
						"     notes as string,",
						"     transactionType as string,",
						"     transactionType_text as string,",
						"     paymentLimitDate as string,",
						"     paymentDate as string,",
						"     refund as string,",
						"     refunded as string,",
						"     convention_label as string,",
						"     receiptCode as string,",
						"     insertTimestamp as string,",
						"     updateTimestamp as string,",
						"     owner as string,",
						"     owner_text as string,",
						"     sessionId as string,",
						"     terminal_label as string,",
						"     terminalGroup_label as string,",
						"     gateway_guid as string,",
						"     gateway_label as string,",
						"     transactionID as string,",
						"     bankAccount_guid as string,",
						"     bankAccount_label as string,",
						"     channel_guid as string,",
						"     channel_label as string,",
						"     channelType as string,",
						"     detail_guid as string,",
						"     extra_guid as string,",
						"     priceList as string,",
						"     event as string,",
						"     detailType as string,",
						"     detail_text as string,",
						"     detail_label as string,",
						"     detail_count as integer,",
						"     paymentDetail_guid as string,",
						"     detail_payingPartecipants as integer,",
						"     detail_quantity as integer,",
						"     tickets_quantity as integer,",
						"     pax_quantity as integer,",
						"     costCenter_guid as string,",
						"     costCenter_label as string,",
						"     object_receipt as integer,",
						"     object_taxCode as string,",
						"     object_taxNotes as string,",
						"     object_amount as decimal(10,2),",
						"     object_taxPercentage as decimal(10,2),",
						"     amount as decimal(10,2),",
						"     amountNet as decimal(10,2),",
						"     amountPresale as decimal(10,2),",
						"     amountSold as decimal(10,2),",
						"     amountPayed as decimal(10,2),",
						"     amountPending as decimal(10,2),",
						"     amountCanceled as decimal(10,2),",
						"     externalId as string,",
						"     amountRefunded as decimal(10,2),",
						"     invoiceSummary as string,",
						"     eventCalendar_guid as string,",
						"     passDetail_guid as string,",
						"     paymentCostCenter_guid as string,",
						"     organization_guid as string,",
						"     venue_guid as string,",
						"     olapUpdateTimestamp as string,",
						"     row_id as string,",
						"     operationType as string",
						"}",
						"source(output(",
						"          dummy as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     data: 'dummy\\n1') ~> DummySource",
						"DummySource derive(guid_pk = $guid_pk,",
						"          reservation_progressiveCode = $reservation_progressiveCode,",
						"          reservation_code = $reservation_code,",
						"          reservation_status = $reservation_status,",
						"          invoiceRequired = $invoiceRequired,",
						"          customer = $customer,",
						"          visitDate = toDate($visitDate, 'yyyy-MM-dd'),",
						"          reservationPayment_guid = $reservationPayment_guid,",
						"          parentPayment_guid = $parentPayment_guid,",
						"          sliced = $sliced,",
						"          reservation_guid = $reservation_guid,",
						"          group_guid = $group_guid,",
						"          group_label = $group_label,",
						"          group_email = $group_email,",
						"          paymentCode = $paymentCode,",
						"          paymentCondition = $paymentCondition,",
						"          reservation_amount = $reservation_amount,",
						"          reservation_amountTax = $reservation_amountTax,",
						"          status = $status,",
						"          status_text = $status_text,",
						"          stamp = $stamp,",
						"          notes = $notes,",
						"          transactionType = $transactionType,",
						"          transactionType_text = $transactionType_text,",
						"          paymentLimitDate = toDate($paymentLimitDate, 'yyyy-MM-dd'),",
						"          paymentDate = toDate($paymentDate, 'yyyy-MM-dd'),",
						"          refund = $refund,",
						"          refunded = $refunded,",
						"          convention_label = $convention_label,",
						"          receiptCode = $receiptCode,",
						"          insertTimestamp = toDate($insertTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          updateTimestamp = toDate($updateTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          owner = $owner,",
						"          owner_text = $owner_text,",
						"          sessionId = $sessionId,",
						"          terminal_label = $terminal_label,",
						"          terminalGroup_label = $terminalGroup_label,",
						"          gateway_guid = $gateway_guid,",
						"          gateway_label = $gateway_label,",
						"          transactionID = $transactionID,",
						"          bankAccount_guid = $bankAccount_guid,",
						"          bankAccount_label = $bankAccount_label,",
						"          channel_guid = $channel_guid,",
						"          channel_label = $channel_label,",
						"          channelType = $channelType,",
						"          detail_guid = $detail_guid,",
						"          extra_guid = $extra_guid,",
						"          priceList = $priceList,",
						"          event = $event,",
						"          detailType = $detailType,",
						"          detail_text = $detail_text,",
						"          detail_label = $detail_label,",
						"          detail_count = $detail_count,",
						"          paymentDetail_guid = $paymentDetail_guid,",
						"          detail_payingPartecipants = $detail_payingPartecipants,",
						"          detail_quantity = $detail_quantity,",
						"          tickets_quantity = $tickets_quantity,",
						"          pax_quantity = $pax_quantity,",
						"          costCenter_guid = $costCenter_guid,",
						"          costCenter_label = $costCenter_label,",
						"          object_receipt = $object_receipt,",
						"          object_taxCode = $object_taxCode,",
						"          object_taxNotes = $object_taxNotes,",
						"          object_amount = $object_amount,",
						"          object_taxPercentage = $object_taxPercentage,",
						"          amount = $amount,",
						"          amountNet = $amountNet,",
						"          amountPresale = $amountPresale,",
						"          amountSold = $amountSold,",
						"          amountPayed = $amountPayed,",
						"          amountPending = $amountPending,",
						"          amountCanceled = $amountCanceled,",
						"          externalId = $externalId,",
						"          amountRefunded = $amountRefunded,",
						"          invoiceSummary = $invoiceSummary,",
						"          eventCalendar_guid = $eventCalendar_guid,",
						"          passDetail_guid = $passDetail_guid,",
						"          paymentCostCenter_guid = $paymentCostCenter_guid,",
						"          organization_guid = $organization_guid,",
						"          venue_guid = $venue_guid,",
						"          olapUpdateTimestamp = toDate($olapUpdateTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          row_id = $row_id) ~> CreateHistoricalRecord",
						"CreateHistoricalRecord derive(audit_operation = $operationType,",
						"          audit_timestamp = currentTimestamp()) ~> AddAuditFields",
						"AddAuditFields select(mapColumn(",
						"          guid_pk,",
						"          reservation_progressiveCode,",
						"          reservation_code,",
						"          reservation_status,",
						"          invoiceRequired,",
						"          customer,",
						"          visitDate,",
						"          reservationPayment_guid,",
						"          parentPayment_guid,",
						"          sliced,",
						"          reservation_guid,",
						"          group_guid,",
						"          group_label,",
						"          group_email,",
						"          paymentCode,",
						"          paymentCondition,",
						"          reservation_amount,",
						"          reservation_amountTax,",
						"          status,",
						"          status_text,",
						"          stamp,",
						"          notes,",
						"          transactionType,",
						"          transactionType_text,",
						"          paymentLimitDate,",
						"          paymentDate,",
						"          refund,",
						"          refunded,",
						"          convention_label,",
						"          receiptCode,",
						"          insertTimestamp,",
						"          updateTimestamp,",
						"          owner,",
						"          owner_text,",
						"          sessionId,",
						"          terminal_label,",
						"          terminalGroup_label,",
						"          gateway_guid,",
						"          gateway_label,",
						"          transactionID,",
						"          bankAccount_guid,",
						"          bankAccount_label,",
						"          channel_guid,",
						"          channel_label,",
						"          channelType,",
						"          detail_guid,",
						"          extra_guid,",
						"          priceList,",
						"          event,",
						"          detailType,",
						"          detail_text,",
						"          detail_label,",
						"          detail_count,",
						"          paymentDetail_guid,",
						"          detail_payingPartecipants,",
						"          detail_quantity,",
						"          tickets_quantity,",
						"          pax_quantity,",
						"          costCenter_guid,",
						"          costCenter_label,",
						"          object_receipt,",
						"          object_taxCode,",
						"          object_taxNotes,",
						"          object_amount,",
						"          object_taxPercentage,",
						"          amount,",
						"          amountNet,",
						"          amountPresale,",
						"          amountSold,",
						"          amountPayed,",
						"          amountPending,",
						"          amountCanceled,",
						"          externalId,",
						"          amountRefunded,",
						"          invoiceSummary,",
						"          eventCalendar_guid,",
						"          passDetail_guid,",
						"          paymentCostCenter_guid,",
						"          organization_guid,",
						"          venue_guid,",
						"          olapUpdateTimestamp,",
						"          row_id,",
						"          audit_operation,",
						"          audit_timestamp",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinalColumns",
						"SelectFinalColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          guid_pk as string,",
						"          reservation_progressiveCode as string,",
						"          reservation_code as string,",
						"          reservation_status as integer,",
						"          invoiceRequired as string,",
						"          customer as decimal(10,2),",
						"          visitDate as date,",
						"          reservationPayment_guid as string,",
						"          parentPayment_guid as string,",
						"          sliced as string,",
						"          reservation_guid as string,",
						"          group_guid as string,",
						"          group_label as string,",
						"          group_email as string,",
						"          paymentCode as string,",
						"          paymentCondition as decimal(10,2),",
						"          reservation_amount as decimal(10,2),",
						"          reservation_amountTax as decimal(10,2),",
						"          status as integer,",
						"          status_text as string,",
						"          stamp as string,",
						"          notes as string,",
						"          transactionType as string,",
						"          transactionType_text as string,",
						"          paymentLimitDate as date,",
						"          paymentDate as date,",
						"          refund as string,",
						"          refunded as string,",
						"          convention_label as string,",
						"          receiptCode as string,",
						"          insertTimestamp as date,",
						"          updateTimestamp as date,",
						"          owner as string,",
						"          owner_text as string,",
						"          sessionId as string,",
						"          terminal_label as string,",
						"          terminalGroup_label as string,",
						"          gateway_guid as string,",
						"          gateway_label as string,",
						"          transactionID as string,",
						"          bankAccount_guid as string,",
						"          bankAccount_label as string,",
						"          channel_guid as string,",
						"          channel_label as string,",
						"          channelType as string,",
						"          detail_guid as string,",
						"          extra_guid as string,",
						"          priceList as string,",
						"          event as string,",
						"          detailType as string,",
						"          detail_text as string,",
						"          detail_label as string,",
						"          detail_count as integer,",
						"          paymentDetail_guid as string,",
						"          detail_payingPartecipants as integer,",
						"          detail_quantity as integer,",
						"          tickets_quantity as integer,",
						"          pax_quantity as integer,",
						"          costCenter_guid as string,",
						"          costCenter_label as string,",
						"          object_receipt as integer,",
						"          object_taxCode as string,",
						"          object_taxNotes as string,",
						"          object_amount as decimal(10,2),",
						"          object_taxPercentage as decimal(10,2),",
						"          amount as decimal(10,2),",
						"          amountNet as decimal(10,2),",
						"          amountPresale as decimal(10,2),",
						"          amountSold as decimal(10,2),",
						"          amountPayed as decimal(10,2),",
						"          amountPending as decimal(10,2),",
						"          amountCanceled as decimal(10,2),",
						"          externalId as string,",
						"          amountRefunded as decimal(10,2),",
						"          invoiceSummary as string,",
						"          eventCalendar_guid as string,",
						"          passDetail_guid as string,",
						"          paymentCostCenter_guid as string,",
						"          organization_guid as string,",
						"          venue_guid as string,",
						"          olapUpdateTimestamp as date,",
						"          row_id as string,",
						"          operationType as string,",
						"          operationTimestamp as timestamp",
						"     ),",
						"     format: 'parquet',",
						"     partitionFileNames:['booking_historical.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SinkHistorical"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida2_Atomic_DELETE_Booking_Complete')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Complete_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceExistingContent"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkTemp"
						}
					],
					"transformations": [
						{
							"name": "FilterOutDeletedRecord"
						}
					],
					"scriptLines": [
						"parameters{",
						"     row_id as string",
						"}",
						"source(output(",
						"          guid_pk as string,",
						"          reservation_progressiveCode as string,",
						"          reservation_code as string,",
						"          reservation_status as integer,",
						"          invoiceRequired as string,",
						"          customer as decimal(10,2),",
						"          visitDate as date,",
						"          reservationPayment_guid as string,",
						"          parentPayment_guid as string,",
						"          sliced as string,",
						"          reservation_guid as string,",
						"          group_guid as string,",
						"          group_label as string,",
						"          group_email as string,",
						"          paymentCode as string,",
						"          paymentCondition as decimal(10,2),",
						"          reservation_amount as decimal(10,2),",
						"          reservation_amountTax as decimal(10,2),",
						"          status as integer,",
						"          status_text as string,",
						"          stamp as string,",
						"          notes as string,",
						"          transactionType as string,",
						"          transactionType_text as string,",
						"          paymentLimitDate as date,",
						"          paymentDate as date,",
						"          refund as string,",
						"          refunded as string,",
						"          convention_label as string,",
						"          receiptCode as string,",
						"          insertTimestamp as date,",
						"          updateTimestamp as date,",
						"          owner as string,",
						"          owner_text as string,",
						"          sessionId as string,",
						"          terminal_label as string,",
						"          terminalGroup_label as string,",
						"          gateway_guid as string,",
						"          gateway_label as string,",
						"          transactionID as string,",
						"          bankAccount_guid as string,",
						"          bankAccount_label as string,",
						"          channel_guid as string,",
						"          channel_label as string,",
						"          channelType as string,",
						"          detail_guid as string,",
						"          extra_guid as string,",
						"          priceList as string,",
						"          event as string,",
						"          detailType as string,",
						"          detail_text as string,",
						"          detail_label as string,",
						"          detail_count as integer,",
						"          paymentDetail_guid as string,",
						"          detail_payingPartecipants as integer,",
						"          detail_quantity as integer,",
						"          tickets_quantity as integer,",
						"          pax_quantity as integer,",
						"          costCenter_guid as string,",
						"          costCenter_label as string,",
						"          object_receipt as integer,",
						"          object_taxCode as string,",
						"          object_taxNotes as string,",
						"          object_amount as decimal(10,2),",
						"          object_taxPercentage as decimal(10,2),",
						"          amount as decimal(10,2),",
						"          amountNet as decimal(10,2),",
						"          amountPresale as decimal(10,2),",
						"          amountSold as decimal(10,2),",
						"          amountPayed as decimal(10,2),",
						"          amountPending as decimal(10,2),",
						"          amountCanceled as decimal(10,2),",
						"          externalId as string,",
						"          amountRefunded as decimal(10,2),",
						"          invoiceSummary as string,",
						"          eventCalendar_guid as string,",
						"          passDetail_guid as string,",
						"          paymentCostCenter_guid as string,",
						"          organization_guid as string,",
						"          venue_guid as string,",
						"          olapUpdateTimestamp as date,",
						"          row_id as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceExistingContent",
						"SourceExistingContent filter(row_id != $row_id) ~> FilterOutDeletedRecord",
						"FilterOutDeletedRecord sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['temp_delete_complete.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SinkTemp"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida2_Atomic_DELETE_Booking_Summary')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Summary_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceExistingContent"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkTemp"
						}
					],
					"transformations": [
						{
							"name": "FilterOutDeletedRecord"
						}
					],
					"scriptLines": [
						"parameters{",
						"     row_id as string",
						"}",
						"source(output(",
						"          row_id as string,",
						"          reservation_code as string,",
						"          priceList as string,",
						"          channel_label as string,",
						"          pax_quantity as integer,",
						"          insertTimestamp as date,",
						"          updateTimestamp as date,",
						"          reservation_amount as decimal(10,2),",
						"          visitDate as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceExistingContent",
						"SourceExistingContent filter(row_id != $row_id) ~> FilterOutDeletedRecord",
						"FilterOutDeletedRecord sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['temp_delete_summary.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SinkTemp"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida2_Atomic_LOOKUP_Historical')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Historical_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceHistorical"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkTemp"
						}
					],
					"transformations": [
						{
							"name": "FilterByRowId"
						},
						{
							"name": "SelectRequiredFields"
						}
					],
					"scriptLines": [
						"parameters{",
						"     row_id as string",
						"}",
						"source(output(",
						"          guid_pk as string,",
						"          reservation_progressiveCode as string,",
						"          reservation_code as string,",
						"          reservation_status as integer,",
						"          invoiceRequired as string,",
						"          customer as decimal(10,2),",
						"          visitDate as date,",
						"          reservationPayment_guid as string,",
						"          parentPayment_guid as string,",
						"          sliced as string,",
						"          reservation_guid as string,",
						"          group_guid as string,",
						"          group_label as string,",
						"          group_email as string,",
						"          paymentCode as string,",
						"          paymentCondition as decimal(10,2),",
						"          reservation_amount as decimal(10,2),",
						"          reservation_amountTax as decimal(10,2),",
						"          status as integer,",
						"          status_text as string,",
						"          stamp as string,",
						"          notes as string,",
						"          transactionType as string,",
						"          transactionType_text as string,",
						"          paymentLimitDate as date,",
						"          paymentDate as date,",
						"          refund as string,",
						"          refunded as string,",
						"          convention_label as string,",
						"          receiptCode as decimal(10,2),",
						"          insertTimestamp as date,",
						"          updateTimestamp as date,",
						"          owner as string,",
						"          owner_text as string,",
						"          sessionId as string,",
						"          terminal_label as string,",
						"          terminalGroup_label as string,",
						"          gateway_guid as string,",
						"          gateway_label as string,",
						"          transactionID as string,",
						"          bankAccount_guid as string,",
						"          bankAccount_label as string,",
						"          channel_guid as string,",
						"          channel_label as string,",
						"          channelType as string,",
						"          detail_guid as string,",
						"          extra_guid as string,",
						"          priceList as string,",
						"          event as string,",
						"          detailType as string,",
						"          detail_text as string,",
						"          detail_label as string,",
						"          detail_count as integer,",
						"          paymentDetail_guid as string,",
						"          detail_payingPartecipants as integer,",
						"          detail_quantity as integer,",
						"          tickets_quantity as integer,",
						"          pax_quantity as integer,",
						"          costCenter_guid as string,",
						"          costCenter_label as string,",
						"          object_receipt as integer,",
						"          object_taxCode as string,",
						"          object_taxNotes as string,",
						"          object_amount as decimal(10,2),",
						"          object_taxPercentage as decimal(10,2),",
						"          amount as decimal(10,2),",
						"          amountNet as decimal(10,2),",
						"          amountPresale as decimal(10,2),",
						"          amountSold as decimal(10,2),",
						"          amountPayed as decimal(10,2),",
						"          amountPending as decimal(10,2),",
						"          amountCanceled as decimal(10,2),",
						"          externalId as string,",
						"          amountRefunded as decimal(10,2),",
						"          invoiceSummary as decimal(10,2),",
						"          eventCalendar_guid as string,",
						"          passDetail_guid as string,",
						"          paymentCostCenter_guid as string,",
						"          organization_guid as string,",
						"          venue_guid as string,",
						"          olapUpdateTimestamp as date,",
						"          row_id as string,",
						"          operationType as string,",
						"          operationTimestamp as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceHistorical",
						"SourceHistorical filter(row_id == $row_id) ~> FilterByRowId",
						"FilterByRowId select(mapColumn(",
						"          each(match(true()))",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectRequiredFields",
						"SelectRequiredFields sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['temp_lookup_historical.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SinkTemp"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida2_Atomic_LOOKUP_Summary')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Summary_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceSummaryFile"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkTemp"
						}
					],
					"transformations": [
						{
							"name": "FilterByRowId"
						},
						{
							"name": "SelectLookupFields"
						}
					],
					"scriptLines": [
						"parameters{",
						"     row_id as string",
						"}",
						"source(output(",
						"          row_id as string,",
						"          reservation_code as string,",
						"          priceList as string,",
						"          channel_label as string,",
						"          pax_quantity as integer,",
						"          insertTimestamp as date,",
						"          updateTimestamp as date,",
						"          reservation_amount as decimal(10,2),",
						"          visitDate as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceSummaryFile",
						"SourceSummaryFile filter(row_id == $row_id) ~> FilterByRowId",
						"FilterByRowId select(mapColumn(",
						"          row_id,",
						"          reservation_code,",
						"          visitDate,",
						"          updateTimestamp,",
						"          reservation_amount,",
						"          pax_quantity",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectLookupFields",
						"SelectLookupFields sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['temp_lookup_summary.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SinkTemp"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida2_Atomic_UPDATE_Booking_Complete')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "VFD_Big_Data_DL",
								"type": "LinkedServiceReference"
							},
							"name": "DummySource"
						},
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Complete_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceExistingContent"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkTemp"
						}
					],
					"transformations": [
						{
							"name": "CreateNewRecord"
						},
						{
							"name": "SelectNewColumns"
						},
						{
							"name": "FilterOutOldRecord"
						},
						{
							"name": "UnionRecords"
						}
					],
					"scriptLines": [
						"parameters{",
						"     guid_pk as string,",
						"     reservation_progressiveCode as string,",
						"     reservation_code as string,",
						"     reservation_status as integer,",
						"     invoiceRequired as string,",
						"     customer as decimal(10,2),",
						"     visitDate as string,",
						"     reservationPayment_guid as string,",
						"     parentPayment_guid as string,",
						"     sliced as string,",
						"     reservation_guid as string,",
						"     group_guid as string,",
						"     group_label as string,",
						"     group_email as string,",
						"     paymentCode as string,",
						"     paymentCondition as decimal(10,2),",
						"     reservation_amount as decimal(10,2),",
						"     reservation_amountTax as decimal(10,2),",
						"     status as integer,",
						"     status_text as string,",
						"     stamp as string,",
						"     notes as string,",
						"     transactionType as string,",
						"     transactionType_text as string,",
						"     paymentLimitDate as string,",
						"     paymentDate as string,",
						"     refund as string,",
						"     refunded as string,",
						"     convention_label as string,",
						"     receiptCode as string,",
						"     insertTimestamp as string,",
						"     updateTimestamp as string,",
						"     owner as string,",
						"     owner_text as string,",
						"     sessionId as string,",
						"     terminal_label as string,",
						"     terminalGroup_label as string,",
						"     gateway_guid as string,",
						"     gateway_label as string,",
						"     transactionID as string,",
						"     bankAccount_guid as string,",
						"     bankAccount_label as string,",
						"     channel_guid as string,",
						"     channel_label as string,",
						"     channelType as string,",
						"     detail_guid as string,",
						"     extra_guid as string,",
						"     priceList as string,",
						"     event as string,",
						"     detailType as string,",
						"     detail_text as string,",
						"     detail_label as string,",
						"     detail_count as integer,",
						"     paymentDetail_guid as string,",
						"     detail_payingPartecipants as integer,",
						"     detail_quantity as integer,",
						"     tickets_quantity as integer,",
						"     pax_quantity as integer,",
						"     costCenter_guid as string,",
						"     costCenter_label as string,",
						"     object_receipt as integer,",
						"     object_taxCode as string,",
						"     object_taxNotes as string,",
						"     object_amount as decimal(10,2),",
						"     object_taxPercentage as decimal(10,2),",
						"     amount as decimal(10,2),",
						"     amountNet as decimal(10,2),",
						"     amountPresale as decimal(10,2),",
						"     amountSold as decimal(10,2),",
						"     amountPayed as decimal(10,2),",
						"     amountPending as decimal(10,2),",
						"     amountCanceled as decimal(10,2),",
						"     externalId as string,",
						"     amountRefunded as decimal(10,2),",
						"     invoiceSummary as string,",
						"     eventCalendar_guid as string,",
						"     passDetail_guid as string,",
						"     paymentCostCenter_guid as string,",
						"     organization_guid as string,",
						"     venue_guid as string,",
						"     olapUpdateTimestamp as string,",
						"     row_id as string",
						"}",
						"source(output(",
						"          dummy as integer",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'dummy',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     data: 'dummy\\n1') ~> DummySource",
						"source(output(",
						"          guid_pk as string,",
						"          reservation_progressiveCode as string,",
						"          reservation_code as string,",
						"          reservation_status as integer,",
						"          invoiceRequired as string,",
						"          customer as decimal(10,2),",
						"          visitDate as date,",
						"          reservationPayment_guid as string,",
						"          parentPayment_guid as string,",
						"          sliced as string,",
						"          reservation_guid as string,",
						"          group_guid as string,",
						"          group_label as string,",
						"          group_email as string,",
						"          paymentCode as string,",
						"          paymentCondition as decimal(10,2),",
						"          reservation_amount as decimal(10,2),",
						"          reservation_amountTax as decimal(10,2),",
						"          status as integer,",
						"          status_text as string,",
						"          stamp as string,",
						"          notes as string,",
						"          transactionType as string,",
						"          transactionType_text as string,",
						"          paymentLimitDate as date,",
						"          paymentDate as date,",
						"          refund as string,",
						"          refunded as string,",
						"          convention_label as string,",
						"          receiptCode as string,",
						"          insertTimestamp as date,",
						"          updateTimestamp as date,",
						"          owner as string,",
						"          owner_text as string,",
						"          sessionId as string,",
						"          terminal_label as string,",
						"          terminalGroup_label as string,",
						"          gateway_guid as string,",
						"          gateway_label as string,",
						"          transactionID as string,",
						"          bankAccount_guid as string,",
						"          bankAccount_label as string,",
						"          channel_guid as string,",
						"          channel_label as string,",
						"          channelType as string,",
						"          detail_guid as string,",
						"          extra_guid as string,",
						"          priceList as string,",
						"          event as string,",
						"          detailType as string,",
						"          detail_text as string,",
						"          detail_label as string,",
						"          detail_count as integer,",
						"          paymentDetail_guid as string,",
						"          detail_payingPartecipants as integer,",
						"          detail_quantity as integer,",
						"          tickets_quantity as integer,",
						"          pax_quantity as integer,",
						"          costCenter_guid as string,",
						"          costCenter_label as string,",
						"          object_receipt as integer,",
						"          object_taxCode as string,",
						"          object_taxNotes as string,",
						"          object_amount as decimal(10,2),",
						"          object_taxPercentage as decimal(10,2),",
						"          amount as decimal(10,2),",
						"          amountNet as decimal(10,2),",
						"          amountPresale as decimal(10,2),",
						"          amountSold as decimal(10,2),",
						"          amountPayed as decimal(10,2),",
						"          amountPending as decimal(10,2),",
						"          amountCanceled as decimal(10,2),",
						"          externalId as string,",
						"          amountRefunded as decimal(10,2),",
						"          invoiceSummary as string,",
						"          eventCalendar_guid as string,",
						"          passDetail_guid as string,",
						"          paymentCostCenter_guid as string,",
						"          organization_guid as string,",
						"          venue_guid as string,",
						"          olapUpdateTimestamp as date,",
						"          row_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceExistingContent",
						"DummySource derive(guid_pk = $guid_pk,",
						"          reservation_progressiveCode = $reservation_progressiveCode,",
						"          reservation_code = $reservation_code,",
						"          reservation_status = $reservation_status,",
						"          invoiceRequired = $invoiceRequired,",
						"          customer = $customer,",
						"          visitDate = toDate($visitDate, 'yyyy-MM-dd'),",
						"          reservationPayment_guid = $reservationPayment_guid,",
						"          parentPayment_guid = $parentPayment_guid,",
						"          sliced = $sliced,",
						"          reservation_guid = $reservation_guid,",
						"          group_guid = $group_guid,",
						"          group_label = $group_label,",
						"          group_email = $group_email,",
						"          paymentCode = $paymentCode,",
						"          paymentCondition = $paymentCondition,",
						"          reservation_amount = $reservation_amount,",
						"          reservation_amountTax = $reservation_amountTax,",
						"          status = $status,",
						"          status_text = $status_text,",
						"          stamp = $stamp,",
						"          notes = $notes,",
						"          transactionType = $transactionType,",
						"          transactionType_text = $transactionType_text,",
						"          paymentLimitDate = toDate($paymentLimitDate, 'yyyy-MM-dd'),",
						"          paymentDate = toDate($paymentDate, 'yyyy-MM-dd'),",
						"          refund = $refund,",
						"          refunded = $refunded,",
						"          convention_label = $convention_label,",
						"          receiptCode = $receiptCode,",
						"          insertTimestamp = toDate($insertTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          updateTimestamp = toDate($updateTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          owner = $owner,",
						"          owner_text = $owner_text,",
						"          sessionId = $sessionId,",
						"          terminal_label = $terminal_label,",
						"          terminalGroup_label = $terminalGroup_label,",
						"          gateway_guid = $gateway_guid,",
						"          gateway_label = $gateway_label,",
						"          transactionID = $transactionID,",
						"          bankAccount_guid = $bankAccount_guid,",
						"          bankAccount_label = $bankAccount_label,",
						"          channel_guid = $channel_guid,",
						"          channel_label = $channel_label,",
						"          channelType = $channelType,",
						"          detail_guid = $detail_guid,",
						"          extra_guid = $extra_guid,",
						"          priceList = $priceList,",
						"          event = $event,",
						"          detailType = $detailType,",
						"          detail_text = $detail_text,",
						"          detail_label = $detail_label,",
						"          detail_count = $detail_count,",
						"          paymentDetail_guid = $paymentDetail_guid,",
						"          detail_payingPartecipants = $detail_payingPartecipants,",
						"          detail_quantity = $detail_quantity,",
						"          tickets_quantity = $tickets_quantity,",
						"          pax_quantity = $pax_quantity,",
						"          costCenter_guid = $costCenter_guid,",
						"          costCenter_label = $costCenter_label,",
						"          object_receipt = $object_receipt,",
						"          object_taxCode = $object_taxCode,",
						"          object_taxNotes = $object_taxNotes,",
						"          object_amount = $object_amount,",
						"          object_taxPercentage = $object_taxPercentage,",
						"          amount = $amount,",
						"          amountNet = $amountNet,",
						"          amountPresale = $amountPresale,",
						"          amountSold = $amountSold,",
						"          amountPayed = $amountPayed,",
						"          amountPending = $amountPending,",
						"          amountCanceled = $amountCanceled,",
						"          externalId = $externalId,",
						"          amountRefunded = $amountRefunded,",
						"          invoiceSummary = $invoiceSummary,",
						"          eventCalendar_guid = $eventCalendar_guid,",
						"          passDetail_guid = $passDetail_guid,",
						"          paymentCostCenter_guid = $paymentCostCenter_guid,",
						"          organization_guid = $organization_guid,",
						"          venue_guid = $venue_guid,",
						"          olapUpdateTimestamp = toDate($olapUpdateTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          row_id = $row_id) ~> CreateNewRecord",
						"CreateNewRecord select(mapColumn(",
						"          guid_pk,",
						"          reservation_progressiveCode,",
						"          reservation_code,",
						"          reservation_status,",
						"          invoiceRequired,",
						"          customer,",
						"          visitDate,",
						"          reservationPayment_guid,",
						"          parentPayment_guid,",
						"          sliced,",
						"          reservation_guid,",
						"          group_guid,",
						"          group_label,",
						"          group_email,",
						"          paymentCode,",
						"          paymentCondition,",
						"          reservation_amount,",
						"          reservation_amountTax,",
						"          status,",
						"          status_text,",
						"          stamp,",
						"          notes,",
						"          transactionType,",
						"          transactionType_text,",
						"          paymentLimitDate,",
						"          paymentDate,",
						"          refund,",
						"          refunded,",
						"          convention_label,",
						"          receiptCode,",
						"          insertTimestamp,",
						"          updateTimestamp,",
						"          owner,",
						"          owner_text,",
						"          sessionId,",
						"          terminal_label,",
						"          terminalGroup_label,",
						"          gateway_guid,",
						"          gateway_label,",
						"          transactionID,",
						"          bankAccount_guid,",
						"          bankAccount_label,",
						"          channel_guid,",
						"          channel_label,",
						"          channelType,",
						"          detail_guid,",
						"          extra_guid,",
						"          priceList,",
						"          event,",
						"          detailType,",
						"          detail_text,",
						"          detail_label,",
						"          detail_count,",
						"          paymentDetail_guid,",
						"          detail_payingPartecipants,",
						"          detail_quantity,",
						"          tickets_quantity,",
						"          pax_quantity,",
						"          costCenter_guid,",
						"          costCenter_label,",
						"          object_receipt,",
						"          object_taxCode,",
						"          object_taxNotes,",
						"          object_amount,",
						"          object_taxPercentage,",
						"          amount,",
						"          amountNet,",
						"          amountPresale,",
						"          amountSold,",
						"          amountPayed,",
						"          amountPending,",
						"          amountCanceled,",
						"          externalId,",
						"          amountRefunded,",
						"          invoiceSummary,",
						"          eventCalendar_guid,",
						"          passDetail_guid,",
						"          paymentCostCenter_guid,",
						"          organization_guid,",
						"          venue_guid,",
						"          olapUpdateTimestamp,",
						"          row_id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectNewColumns",
						"SourceExistingContent filter(row_id != $row_id) ~> FilterOutOldRecord",
						"FilterOutOldRecord, SelectNewColumns union(byName: true)~> UnionRecords",
						"UnionRecords sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['temp_update_complete.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SinkTemp"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida2_Atomic_UPDATE_Booking_Summary')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "VFD_Big_Data_DL",
								"type": "LinkedServiceReference"
							},
							"name": "DummySource"
						},
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Summary_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceExistingContent"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkTemp"
						}
					],
					"transformations": [
						{
							"name": "CreateNewSummaryRecord"
						},
						{
							"name": "SelectSummaryFields"
						},
						{
							"name": "FilterOutOldRecord"
						},
						{
							"name": "UnionRecords"
						}
					],
					"scriptLines": [
						"parameters{",
						"     row_id as string,",
						"     reservation_code as string,",
						"     priceList as string,",
						"     channel_label as string,",
						"     pax_quantity as integer,",
						"     insertTimestamp as string,",
						"     updateTimestamp as string,",
						"     reservation_amount as decimal(10,2),",
						"     visitDate as string",
						"}",
						"source(output(",
						"          dummy as integer",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'dummy',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     data: 'dummy\\n1') ~> DummySource",
						"source(output(",
						"          row_id as string,",
						"          reservation_code as string,",
						"          priceList as string,",
						"          channel_label as string,",
						"          pax_quantity as integer,",
						"          insertTimestamp as date,",
						"          updateTimestamp as date,",
						"          reservation_amount as decimal(10,2),",
						"          visitDate as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceExistingContent",
						"DummySource derive(row_id = $row_id,",
						"          reservation_code = $reservation_code,",
						"          priceList = $priceList,",
						"          channel_label = $channel_label,",
						"          pax_quantity = $pax_quantity,",
						"          insertTimestamp = toDate($insertTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          updateTimestamp = toDate($updateTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          reservation_amount = $reservation_amount,",
						"          visitDate = toDate($visitDate, 'yyyy-MM-dd')) ~> CreateNewSummaryRecord",
						"CreateNewSummaryRecord select(mapColumn(",
						"          row_id,",
						"          reservation_code,",
						"          priceList,",
						"          channel_label,",
						"          pax_quantity,",
						"          insertTimestamp,",
						"          updateTimestamp,",
						"          reservation_amount,",
						"          visitDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSummaryFields",
						"SourceExistingContent filter(row_id != $row_id) ~> FilterOutOldRecord",
						"FilterOutOldRecord, SelectSummaryFields union(byName: true)~> UnionRecords",
						"UnionRecords sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['temp_update_summary.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SinkTemp"
					]
				}
			},
			"dependsOn": []
		}
	]
}