{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "VFD-Big-Data-DF"
		},
		"VFD_Big_Data_DL_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'VFD_Big_Data_DL'"
		},
		"VFD_LS_Mida_FtpServer_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'VFD_LS_Mida_FtpServer'"
		},
		"VFD_Big_Data_DL_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://vfdbigdataarchiviazione.dfs.core.windows.net/"
		},
		"VFD_LS_Mida_FtpServer_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "217.73.236.242"
		},
		"VFD_LS_Mida_FtpServer_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "vfd_storico_ftp"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/VFD_Big_Data_DL')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Data Lake per la raccolta di tutti i dati da analizzare e utilizzare per la creazione delle dashboard.",
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('VFD_Big_Data_DL_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('VFD_Big_Data_DL_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_LS_Mida_FtpServer')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "FtpServer",
				"typeProperties": {
					"host": "[parameters('VFD_LS_Mida_FtpServer_properties_typeProperties_host')]",
					"port": "52013",
					"enableSsl": false,
					"enableServerCertificateValidation": false,
					"authenticationType": "Basic",
					"userName": "[parameters('VFD_LS_Mida_FtpServer_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('VFD_LS_Mida_FtpServer_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_TRG_Mida_Bookings_FTP_Schedule')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 1,
						"startTime": "2025-04-12T01:16:00",
						"timeZone": "W. Europe Standard Time"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Curated_Mida_Bookings_Parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderPath": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Mida/Bookings"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folderPath",
							"type": "Expression"
						},
						"fileSystem": "curated"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Mida_Bookings_FTPServer_CSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_LS_Mida_FtpServer",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Mida/Bookings"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FtpServerLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						}
					},
					"columnDelimiter": ";",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_LS_Mida_FtpServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Mida_Bookings_FTPServer_Folder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_LS_Mida_FtpServer",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Mida/Bookings"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "FtpServerLocation"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_LS_Mida_FtpServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Mida_Seals_FTPServer_CSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_LS_Mida_FtpServer",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Mida/Seals"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FtpServerLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": "seals"
					},
					"columnDelimiter": ";",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_LS_Mida_FtpServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Mida_Seals_FTPServer_Folder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_LS_Mida_FtpServer",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Mida/Seals"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "FtpServerLocation",
						"folderPath": "seals"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_LS_Mida_FtpServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Processed_Mida_Bookings_Parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderPath": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Mida/Bookings"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folderPath",
							"type": "Expression"
						},
						"fileSystem": "processed"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "guid_pk",
						"type": "UTF8"
					},
					{
						"name": "reservation_progressiveCode",
						"type": "UTF8"
					},
					{
						"name": "reservation_code",
						"type": "UTF8"
					},
					{
						"name": "reservation_status",
						"type": "INT32"
					},
					{
						"name": "invoiceRequired",
						"type": "UTF8"
					},
					{
						"name": "customer",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "visitDate",
						"type": "DATE"
					},
					{
						"name": "reservationPayment_guid",
						"type": "UTF8"
					},
					{
						"name": "parentPayment_guid",
						"type": "UTF8"
					},
					{
						"name": "sliced",
						"type": "UTF8"
					},
					{
						"name": "reservation_guid",
						"type": "UTF8"
					},
					{
						"name": "group_guid",
						"type": "UTF8"
					},
					{
						"name": "group_label",
						"type": "UTF8"
					},
					{
						"name": "group_email",
						"type": "UTF8"
					},
					{
						"name": "paymentCode",
						"type": "UTF8"
					},
					{
						"name": "paymentCondition",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "reservation_amount",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "reservation_amountTax",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "status",
						"type": "INT32"
					},
					{
						"name": "status_text",
						"type": "UTF8"
					},
					{
						"name": "stamp",
						"type": "UTF8"
					},
					{
						"name": "notes",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "transactionType",
						"type": "UTF8"
					},
					{
						"name": "transactionType_text",
						"type": "UTF8"
					},
					{
						"name": "paymentLimitDate",
						"type": "DATE"
					},
					{
						"name": "paymentDate",
						"type": "DATE"
					},
					{
						"name": "refund",
						"type": "UTF8"
					},
					{
						"name": "refunded",
						"type": "UTF8"
					},
					{
						"name": "convention_label",
						"type": "UTF8"
					},
					{
						"name": "receiptCode",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "insertTimestamp",
						"type": "DATE"
					},
					{
						"name": "updateTimestamp",
						"type": "DATE"
					},
					{
						"name": "owner",
						"type": "UTF8"
					},
					{
						"name": "owner_text",
						"type": "UTF8"
					},
					{
						"name": "sessionId",
						"type": "UTF8"
					},
					{
						"name": "terminal_label",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "terminalGroup_label",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "gateway_guid",
						"type": "UTF8"
					},
					{
						"name": "gateway_label",
						"type": "UTF8"
					},
					{
						"name": "transactionID",
						"type": "UTF8"
					},
					{
						"name": "bankAccount_guid",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "bankAccount_label",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "channel_guid",
						"type": "UTF8"
					},
					{
						"name": "channel_label",
						"type": "UTF8"
					},
					{
						"name": "channelType",
						"type": "UTF8"
					},
					{
						"name": "detail_guid",
						"type": "UTF8"
					},
					{
						"name": "extra_guid",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "priceList",
						"type": "UTF8"
					},
					{
						"name": "event",
						"type": "UTF8"
					},
					{
						"name": "detailType",
						"type": "UTF8"
					},
					{
						"name": "detail_text",
						"type": "UTF8"
					},
					{
						"name": "detail_label",
						"type": "UTF8"
					},
					{
						"name": "detail_count",
						"type": "INT32"
					},
					{
						"name": "paymentDetail_guid",
						"type": "UTF8"
					},
					{
						"name": "detail_payingPartecipants",
						"type": "INT32"
					},
					{
						"name": "detail_quantity",
						"type": "INT32"
					},
					{
						"name": "tickets_quantity",
						"type": "INT32"
					},
					{
						"name": "pax_quantity",
						"type": "INT32"
					},
					{
						"name": "costCenter_guid",
						"type": "UTF8"
					},
					{
						"name": "costCenter_label",
						"type": "UTF8"
					},
					{
						"name": "object_receipt",
						"type": "INT32"
					},
					{
						"name": "object_taxCode",
						"type": "UTF8"
					},
					{
						"name": "object_taxNotes",
						"type": "UTF8"
					},
					{
						"name": "object_amount",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "object_taxPercentage",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "amount",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "amountNet",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "amountPresale",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "amountSold",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "amountPayed",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "amountPending",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "amountCanceled",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "externalId",
						"type": "UTF8"
					},
					{
						"name": "amountRefunded",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "invoiceSummary",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "eventCalendar_guid",
						"type": "UTF8"
					},
					{
						"name": "passDetail_guid",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "paymentCostCenter_guid",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "organization_guid",
						"type": "UTF8"
					},
					{
						"name": "venue_guid",
						"type": "UTF8"
					},
					{
						"name": "olapUpdateTimestamp",
						"type": "DATE"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Raw_Mida_Bookings_CSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderPath": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Mida/Bookings"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folderPath",
							"type": "Expression"
						},
						"fileSystem": "raw"
					},
					"columnDelimiter": ";",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "guid_pk",
						"type": "String"
					},
					{
						"name": "reservation_progressiveCode",
						"type": "String"
					},
					{
						"name": "reservation_code",
						"type": "String"
					},
					{
						"name": "reservation_status",
						"type": "String"
					},
					{
						"name": "invoiceRequired",
						"type": "String"
					},
					{
						"name": "customer",
						"type": "String"
					},
					{
						"name": "visitDate",
						"type": "String"
					},
					{
						"name": "reservationPayment_guid",
						"type": "String"
					},
					{
						"name": "parentPayment_guid",
						"type": "String"
					},
					{
						"name": "sliced",
						"type": "String"
					},
					{
						"name": "reservation_guid",
						"type": "String"
					},
					{
						"name": "group_guid",
						"type": "String"
					},
					{
						"name": "group_label",
						"type": "String"
					},
					{
						"name": "group_email",
						"type": "String"
					},
					{
						"name": "paymentCode",
						"type": "String"
					},
					{
						"name": "paymentCondition",
						"type": "String"
					},
					{
						"name": "reservation_amount",
						"type": "String"
					},
					{
						"name": "reservation_amountTax",
						"type": "String"
					},
					{
						"name": "status",
						"type": "String"
					},
					{
						"name": "status_text",
						"type": "String"
					},
					{
						"name": "stamp",
						"type": "String"
					},
					{
						"name": "notes",
						"type": "String"
					},
					{
						"name": "transactionType",
						"type": "String"
					},
					{
						"name": "transactionType_text",
						"type": "String"
					},
					{
						"name": "paymentLimitDate",
						"type": "String"
					},
					{
						"name": "paymentDate",
						"type": "String"
					},
					{
						"name": "refund",
						"type": "String"
					},
					{
						"name": "refunded",
						"type": "String"
					},
					{
						"name": "convention_label",
						"type": "String"
					},
					{
						"name": "receiptCode",
						"type": "String"
					},
					{
						"name": "insertTimestamp",
						"type": "String"
					},
					{
						"name": "updateTimestamp",
						"type": "String"
					},
					{
						"name": "owner",
						"type": "String"
					},
					{
						"name": "owner_text",
						"type": "String"
					},
					{
						"name": "sessionId",
						"type": "String"
					},
					{
						"name": "terminal_label",
						"type": "String"
					},
					{
						"name": "terminalGroup_label",
						"type": "String"
					},
					{
						"name": "gateway_guid",
						"type": "String"
					},
					{
						"name": "gateway_label",
						"type": "String"
					},
					{
						"name": "transactionID",
						"type": "String"
					},
					{
						"name": "bankAccount_guid",
						"type": "String"
					},
					{
						"name": "bankAccount_label",
						"type": "String"
					},
					{
						"name": "channel_guid",
						"type": "String"
					},
					{
						"name": "channel_label",
						"type": "String"
					},
					{
						"name": "channelType",
						"type": "String"
					},
					{
						"name": "detail_guid",
						"type": "String"
					},
					{
						"name": "extra_guid",
						"type": "String"
					},
					{
						"name": "priceList",
						"type": "String"
					},
					{
						"name": "event",
						"type": "String"
					},
					{
						"name": "detailType",
						"type": "String"
					},
					{
						"name": "detail_text",
						"type": "String"
					},
					{
						"name": "detail_label",
						"type": "String"
					},
					{
						"name": "detail_count",
						"type": "String"
					},
					{
						"name": "paymentDetail_guid",
						"type": "String"
					},
					{
						"name": "detail_payingPartecipants",
						"type": "String"
					},
					{
						"name": "detail_quantity",
						"type": "String"
					},
					{
						"name": "tickets_quantity",
						"type": "String"
					},
					{
						"name": "pax_quantity",
						"type": "String"
					},
					{
						"name": "costCenter_guid",
						"type": "String"
					},
					{
						"name": "costCenter_label",
						"type": "String"
					},
					{
						"name": "object_receipt",
						"type": "String"
					},
					{
						"name": "object_taxCode",
						"type": "String"
					},
					{
						"name": "object_taxNotes",
						"type": "String"
					},
					{
						"name": "object_amount",
						"type": "String"
					},
					{
						"name": "object_taxPercentage",
						"type": "String"
					},
					{
						"name": "amount",
						"type": "String"
					},
					{
						"name": "amountNet",
						"type": "String"
					},
					{
						"name": "amountPresale",
						"type": "String"
					},
					{
						"name": "amountSold",
						"type": "String"
					},
					{
						"name": "amountPayed",
						"type": "String"
					},
					{
						"name": "amountPending",
						"type": "String"
					},
					{
						"name": "amountCanceled",
						"type": "String"
					},
					{
						"name": "externalId",
						"type": "String"
					},
					{
						"name": "amountRefunded",
						"type": "String"
					},
					{
						"name": "invoiceSummary",
						"type": "String"
					},
					{
						"name": "eventCalendar_guid",
						"type": "String"
					},
					{
						"name": "passDetail_guid",
						"type": "String"
					},
					{
						"name": "paymentCostCenter_guid",
						"type": "String"
					},
					{
						"name": "organization_guid",
						"type": "String"
					},
					{
						"name": "venue_guid",
						"type": "String"
					},
					{
						"name": "olapUpdateTimestamp",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Raw_Mida_Bookings_Folder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Mida/Bookings"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Mida/Bookings",
						"fileSystem": "raw"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Raw_Month_Folder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderPath": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Mida/Bookings"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().folderPath",
							"type": "Expression"
						},
						"fileSystem": "raw"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Raw_Year_Folder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"yearFolder": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Mida/Bookings"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat('Mida/Bookings/', dataset().yearFolder)",
							"type": "Expression"
						},
						"fileSystem": "raw"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida_Bookings_Processed_Curated_Daily')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Dataflow per filtrare colonne dal parquet processed e scrivere su un file fisso",
				"folder": {
					"name": "Mida/Bookings"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Processed_Mida_Bookings_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceProcessed"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkCurated"
						}
					],
					"transformations": [
						{
							"name": "TransformData"
						},
						{
							"name": "SelectFields"
						}
					],
					"scriptLines": [
						"parameters{",
						"     folderPath as string (\"folder\"),",
						"     fileName as string (\"file\")",
						"}",
						"source(output(",
						"          guid_pk as string,",
						"          reservation_progressiveCode as string,",
						"          reservation_code as string,",
						"          reservation_status as integer,",
						"          invoiceRequired as string,",
						"          customer as decimal(10,2),",
						"          visitDate as date,",
						"          reservationPayment_guid as string,",
						"          parentPayment_guid as string,",
						"          sliced as string,",
						"          reservation_guid as string,",
						"          group_guid as string,",
						"          group_label as string,",
						"          group_email as string,",
						"          paymentCode as string,",
						"          paymentCondition as decimal(10,2),",
						"          reservation_amount as decimal(10,2),",
						"          reservation_amountTax as decimal(10,2),",
						"          status as integer,",
						"          status_text as string,",
						"          stamp as string,",
						"          notes as decimal(10,2),",
						"          transactionType as string,",
						"          transactionType_text as string,",
						"          paymentLimitDate as date,",
						"          paymentDate as date,",
						"          refund as string,",
						"          refunded as string,",
						"          convention_label as string,",
						"          receiptCode as decimal(10,2),",
						"          insertTimestamp as date,",
						"          updateTimestamp as date,",
						"          owner as string,",
						"          owner_text as string,",
						"          sessionId as string,",
						"          terminal_label as decimal(10,2),",
						"          terminalGroup_label as decimal(10,2),",
						"          gateway_guid as string,",
						"          gateway_label as string,",
						"          transactionID as string,",
						"          bankAccount_guid as decimal(10,2),",
						"          bankAccount_label as decimal(10,2),",
						"          channel_guid as string,",
						"          channel_label as string,",
						"          channelType as string,",
						"          detail_guid as string,",
						"          extra_guid as decimal(10,2),",
						"          priceList as string,",
						"          event as string,",
						"          detailType as string,",
						"          detail_text as string,",
						"          detail_label as string,",
						"          detail_count as integer,",
						"          paymentDetail_guid as string,",
						"          detail_payingPartecipants as integer,",
						"          detail_quantity as integer,",
						"          tickets_quantity as integer,",
						"          pax_quantity as integer,",
						"          costCenter_guid as string,",
						"          costCenter_label as string,",
						"          object_receipt as integer,",
						"          object_taxCode as string,",
						"          object_taxNotes as string,",
						"          object_amount as decimal(10,2),",
						"          object_taxPercentage as decimal(10,2),",
						"          amount as decimal(10,2),",
						"          amountNet as decimal(10,2),",
						"          amountPresale as decimal(10,2),",
						"          amountSold as decimal(10,2),",
						"          amountPayed as decimal(10,2),",
						"          amountPending as decimal(10,2),",
						"          amountCanceled as decimal(10,2),",
						"          externalId as string,",
						"          amountRefunded as decimal(10,2),",
						"          invoiceSummary as decimal(10,2),",
						"          eventCalendar_guid as string,",
						"          passDetail_guid as decimal(10,2),",
						"          paymentCostCenter_guid as decimal(10,2),",
						"          organization_guid as string,",
						"          venue_guid as string,",
						"          olapUpdateTimestamp as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     folderPath: folderPath,",
						"     fileName: fileName) ~> SourceProcessed",
						"SourceProcessed derive(adjusted_pax_quantity = iif(status == 6 || status == 7 || status == 101, pax_quantity * -1, pax_quantity),",
						"          adjusted_tickets_quantity = iif(status == 6 || status == 7 || status == 101, tickets_quantity * -1, tickets_quantity),",
						"          adjusted_amount = iif(status == 6 || status == 7 || status == 101, amount * -1, amount)) ~> TransformData",
						"TransformData select(mapColumn(",
						"          pax_quantity = adjusted_pax_quantity,",
						"          priceList,",
						"          tickets_quantity = adjusted_tickets_quantity,",
						"          amount = adjusted_amount,",
						"          visitDate,",
						"          channel_label,",
						"          transactionType_text,",
						"          insertTimestamp,",
						"          paymentDate,",
						"          secondaryVisitDate = visitDate,",
						"          status,",
						"          status_text",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> SelectFields",
						"SelectFields sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['VFD_DFL_Mida_Bookings_Processed_Curated_Daily_output.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     partitionBy('hash', 1),",
						"     fileName: 'VFD_DFL_Mida_Sales_Curated_output.parquet') ~> SinkCurated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Processed_Mida_Bookings_Parquet')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Mida_Bookings_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida_Sales_Raw_Processed')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Dataflow with full schema from CSV to Parquet with dynamic file name.",
				"folder": {
					"name": "Mida/Bookings"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Raw_Mida_Bookings_CSV",
								"type": "DatasetReference"
							},
							"name": "SourceCSV"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Processed_Mida_Bookings_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkParquet",
							"rejectedDataLinkedService": {
								"referenceName": "VFD_Big_Data_DL",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "dataTypeConversions"
						}
					],
					"scriptLines": [
						"parameters{",
						"     folderPath as string (\"folder\"),",
						"     sourcefileName as string (\"source\"),",
						"     destfileName as string (\"dest\")",
						"}",
						"source(output(",
						"          guid_pk as string,",
						"          reservation_progressiveCode as string,",
						"          reservation_code as string,",
						"          reservation_status as integer,",
						"          invoiceRequired as string,",
						"          customer as decimal(10,2),",
						"          visitDate as string,",
						"          reservationPayment_guid as string,",
						"          parentPayment_guid as string,",
						"          sliced as string,",
						"          reservation_guid as string,",
						"          group_guid as string,",
						"          group_label as string,",
						"          group_email as string,",
						"          paymentCode as string,",
						"          paymentCondition as decimal(10,2),",
						"          reservation_amount as decimal(10,2),",
						"          reservation_amountTax as decimal(10,2),",
						"          status as integer,",
						"          status_text as string,",
						"          stamp as string,",
						"          notes as decimal(10,2),",
						"          transactionType as string,",
						"          transactionType_text as string,",
						"          paymentLimitDate as string,",
						"          paymentDate as string,",
						"          refund as string,",
						"          refunded as string,",
						"          convention_label as string,",
						"          receiptCode as decimal(10,2),",
						"          insertTimestamp as string,",
						"          updateTimestamp as string,",
						"          owner as string,",
						"          owner_text as string,",
						"          sessionId as string,",
						"          terminal_label as decimal(10,2),",
						"          terminalGroup_label as decimal(10,2),",
						"          gateway_guid as string,",
						"          gateway_label as string,",
						"          transactionID as string,",
						"          bankAccount_guid as decimal(10,2),",
						"          bankAccount_label as decimal(10,2),",
						"          channel_guid as string,",
						"          channel_label as string,",
						"          channelType as string,",
						"          detail_guid as string,",
						"          extra_guid as decimal(10,2),",
						"          priceList as string,",
						"          event as string,",
						"          detailType as string,",
						"          detail_text as string,",
						"          detail_label as string,",
						"          detail_count as integer,",
						"          paymentDetail_guid as string,",
						"          detail_payingPartecipants as integer,",
						"          detail_quantity as integer,",
						"          tickets_quantity as integer,",
						"          pax_quantity as integer,",
						"          costCenter_guid as string,",
						"          costCenter_label as string,",
						"          object_receipt as integer,",
						"          object_taxCode as string,",
						"          object_taxNotes as string,",
						"          object_amount as decimal(10,2),",
						"          object_taxPercentage as decimal(10,2),",
						"          amount as decimal(10,2),",
						"          amountNet as decimal(10,2),",
						"          amountPresale as decimal(10,2),",
						"          amountSold as decimal(10,2),",
						"          amountPayed as decimal(10,2),",
						"          amountPending as decimal(10,2),",
						"          amountCanceled as decimal(10,2),",
						"          externalId as string,",
						"          amountRefunded as decimal(10,2),",
						"          invoiceSummary as decimal(10,2),",
						"          eventCalendar_guid as string,",
						"          passDetail_guid as decimal(10,2),",
						"          paymentCostCenter_guid as decimal(10,2),",
						"          organization_guid as string,",
						"          venue_guid as string,",
						"          olapUpdateTimestamp as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourceCSV",
						"SourceCSV derive(visitDate = case(!isNull(visitDate) && !equals(trim(visitDate), ''), toDate(visitDate, 'dd/MM/yyyy')),",
						"          paymentLimitDate = case(!isNull(paymentLimitDate) && !equals(trim(paymentLimitDate), ''), toDate(paymentLimitDate, 'dd/MM/yyyy')),",
						"          paymentDate = case(!isNull(paymentDate) && !equals(trim(paymentDate), ''), toDate(paymentDate, 'dd/MM/yyyy')),",
						"          insertTimestamp = case(!isNull(insertTimestamp) && !equals(trim(insertTimestamp), ''), toDate(insertTimestamp, 'dd/MM/yyyy')),",
						"          olapUpdateTimestamp = case(!isNull(olapUpdateTimestamp) && !equals(trim(olapUpdateTimestamp), ''), toDate(olapUpdateTimestamp, 'dd/MM/yyyy')),",
						"          updateTimestamp = case(!isNull(updateTimestamp) && !equals(trim(updateTimestamp), ''), toDate(updateTimestamp, 'dd/MM/yyyy'))) ~> dataTypeConversions",
						"dataTypeConversions sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          guid_pk as string,",
						"          reservation_progressiveCode as string,",
						"          reservation_code as string,",
						"          reservation_status as integer,",
						"          invoiceRequired as string,",
						"          customer as decimal(10,2),",
						"          visitDate as date,",
						"          reservationPayment_guid as string,",
						"          parentPayment_guid as string,",
						"          sliced as string,",
						"          reservation_guid as string,",
						"          group_guid as string,",
						"          group_label as string,",
						"          group_email as string,",
						"          paymentCode as string,",
						"          paymentCondition as decimal(10,2),",
						"          reservation_amount as decimal(10,2),",
						"          reservation_amountTax as decimal(10,2),",
						"          status as integer,",
						"          status_text as string,",
						"          stamp as string,",
						"          notes as decimal(10,2),",
						"          transactionType as string,",
						"          transactionType_text as string,",
						"          paymentLimitDate as date,",
						"          paymentDate as date,",
						"          refund as string,",
						"          refunded as string,",
						"          convention_label as string,",
						"          receiptCode as decimal(10,2),",
						"          insertTimestamp as date,",
						"          updateTimestamp as date,",
						"          owner as string,",
						"          owner_text as string,",
						"          sessionId as string,",
						"          terminal_label as decimal(10,2),",
						"          terminalGroup_label as decimal(10,2),",
						"          gateway_guid as string,",
						"          gateway_label as string,",
						"          transactionID as string,",
						"          bankAccount_guid as decimal(10,2),",
						"          bankAccount_label as decimal(10,2),",
						"          channel_guid as string,",
						"          channel_label as string,",
						"          channelType as string,",
						"          detail_guid as string,",
						"          extra_guid as decimal(10,2),",
						"          priceList as string,",
						"          event as string,",
						"          detailType as string,",
						"          detail_text as string,",
						"          detail_label as string,",
						"          detail_count as integer,",
						"          paymentDetail_guid as string,",
						"          detail_payingPartecipants as integer,",
						"          detail_quantity as integer,",
						"          tickets_quantity as integer,",
						"          pax_quantity as integer,",
						"          costCenter_guid as string,",
						"          costCenter_label as string,",
						"          object_receipt as integer,",
						"          object_taxCode as string,",
						"          object_taxNotes as string,",
						"          object_amount as decimal(10,2),",
						"          object_taxPercentage as decimal(10,2),",
						"          amount as decimal(10,2),",
						"          amountNet as decimal(10,2),",
						"          amountPresale as decimal(10,2),",
						"          amountSold as decimal(10,2),",
						"          amountPayed as decimal(10,2),",
						"          amountPending as decimal(10,2),",
						"          amountCanceled as decimal(10,2),",
						"          externalId as string,",
						"          amountRefunded as decimal(10,2),",
						"          invoiceSummary as decimal(10,2),",
						"          eventCalendar_guid as string,",
						"          passDetail_guid as decimal(10,2),",
						"          paymentCostCenter_guid as decimal(10,2),",
						"          organization_guid as string,",
						"          venue_guid as string,",
						"          olapUpdateTimestamp as date",
						"     ),",
						"     format: 'parquet',",
						"     partitionFileNames:['VFD_DFL_Mida_Sales_Raw_Processed_output.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     partitionBy('hash', 1),",
						"     fileName: $destfileName) ~> SinkParquet"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Raw_Mida_Bookings_CSV')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Processed_Mida_Bookings_Parquet')]",
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Mida_Bookings_Raw_Curated')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline parametrica per convertire CSV in Parquet usando Data Flow",
				"activities": [
					{
						"name": "Raw to Processed Transformation",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_Mida_Sales_Raw_Processed",
								"type": "DataFlowReference",
								"parameters": {
									"folderPath": "\"folder\"",
									"sourcefileName": "\"source\"",
									"destfileName": "\"dest\""
								},
								"datasetParameters": {
									"SourceCSV": {
										"folderPath": "@pipeline().parameters.folderPath",
										"fileName": "@pipeline().parameters.fileName"
									},
									"SinkParquet": {
										"folderPath": "@pipeline().parameters.folderPath",
										"fileName": "@replace(pipeline().parameters.fileName, '.csv', '.parquet')"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 16,
								"computeType": "General"
							},
							"traceLevel": "Fine",
							"parameters": {
								"folderPath": {
									"value": "@pipeline().parameters.folderPath",
									"type": "Expression"
								},
								"sourcefileName": {
									"value": "@pipeline().parameters.fileName",
									"type": "Expression"
								},
								"destfileName": {
									"value": "@replace(pipeline().parameters.fileName, '.csv', '.parquet')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Copy Data from Temporary File",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Raw to Processed Transformation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Processed_Mida_Bookings_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.folderPath",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_Mida_Sales_Raw_Processed_output.parquet"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Processed_Mida_Bookings_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.folderPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@replace(pipeline().parameters.fileName,'.csv','.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Delete Temporary File",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy Data from Temporary File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Processed_Mida_Bookings_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.folderPath",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_Mida_Sales_Raw_Processed_output.parquet"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Processed to Curated Transformation",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Delete Temporary File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_Mida_Bookings_Processed_Curated_Daily",
								"type": "DataFlowReference",
								"parameters": {
									"folderPath": "\"folder\"",
									"fileName": "\"file\""
								},
								"datasetParameters": {
									"SourceProcessed": {
										"folderPath": {
											"value": "@pipeline().parameters.folderPath",
											"type": "Expression"
										},
										"fileName": "@replace(pipeline().parameters.fileName,'.csv','.parquet')"
									},
									"SinkCurated": {
										"folderPath": {
											"value": "@concat('Mida/',pipeline().parameters.year,'/',pipeline().parameters.month,'/') ",
											"type": "Expression"
										},
										"fileName": {
											"value": "@concat('Mida_Merged_',pipeline().parameters.year,pipeline().parameters.month,pipeline().parameters.day)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Copy Data from Temporary Curated",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Processed to Curated Transformation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "@concat('Mida/',pipeline().parameters.year,'/',pipeline().parameters.month,'/') ",
									"fileName": {
										"value": "VFD_DFL_Mida_Bookings_Processed_Curated_Daily_output.parquet",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "@concat('Mida/',pipeline().parameters.year,'/',pipeline().parameters.month,'/') ",
									"fileName": {
										"value": "@concat('Mida_Merged_',pipeline().parameters.year,pipeline().parameters.month,pipeline().parameters.day,'.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Delete Temporary File Curated",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy Data from Temporary Curated",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "@concat('Mida/',pipeline().parameters.year,'/',pipeline().parameters.month,'/') ",
									"fileName": "VFD_DFL_Mida_Bookings_Processed_Curated_Daily_output.parquet"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"folderPath": {
						"type": "String",
						"defaultValue": "Mida/Sales/2025/03"
					},
					"fileName": {
						"type": "String",
						"defaultValue": "export_vw_summary_reservationPayments20250313.csv"
					},
					"year": {
						"type": "string",
						"defaultValue": "2025"
					},
					"month": {
						"type": "string",
						"defaultValue": "03"
					},
					"day": {
						"type": "string",
						"defaultValue": "13"
					}
				},
				"variables": {
					"year": {
						"type": "String"
					},
					"day": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Mida/Bookings"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/VFD_DFL_Mida_Sales_Raw_Processed')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Processed_Mida_Bookings_Parquet')]",
				"[concat(variables('factoryId'), '/dataflows/VFD_DFL_Mida_Bookings_Processed_Curated_Daily')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Mida_Bookings_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Mida_Bookings_FTP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline arricchita: FTP → ADLS solo se nuovo → Data Flow → Copy → Delete",
				"activities": [
					{
						"name": "ListFTPFiles",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Mida_Bookings_FTPServer_Folder",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "FtpReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false,
								"useBinaryTransfer": true,
								"disableChunking": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ForEachFTPFile",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ListFTPFiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListFTPFiles').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetFileName",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileName",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetYear",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetFileName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "year",
										"value": {
											"value": "@substring(item().name, 37, 4)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetMonth",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetYear",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "month",
										"value": {
											"value": "@substring(item().name, 41, 2)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetDay",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetMonth",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "day",
										"value": {
											"value": "@substring(item().name, 43, 2)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetFolderPathVar",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetDay",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "folderPathVar",
										"value": {
											"value": "@concat('Mida/Bookings/', variables('year'), '/', variables('month'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetDateString",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetFolderPathVar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "dateString",
										"value": {
											"value": "@concat(variables('year'), variables('month'), variables('day'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "CheckIfExistsOnADLS",
									"type": "GetMetadata",
									"dependsOn": [
										{
											"activity": "SetDateString",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "VFD_DS_Raw_Mida_Bookings_CSV",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": {
													"value": "@variables('folderPathVar')",
													"type": "Expression"
												},
												"fileName": {
													"value": "@variables('fileName')",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "ProcessFileIfCondition",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "CheckIfExistsOnADLS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@and(and(endswith(toLower(variables('fileName')), '.csv'), greaterOrEquals(int(variables('dateString')), 20240814)), not(activity('CheckIfExistsOnADLS').output.exists))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "CopyFromFTP",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "DelimitedTextSource",
														"storeSettings": {
															"type": "FtpReadSettings",
															"recursive": true,
															"enablePartitionDiscovery": false,
															"useBinaryTransfer": true,
															"disableChunking": false
														},
														"formatSettings": {
															"type": "DelimitedTextReadSettings"
														}
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".txt"
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													},
													"dataset": {
														"referenceName": "VFD_DS_Raw_Mida_Bookings_CSV",
														"type": "DatasetReference",
														"parameters": {
															"folderPath": "@variables('folderPathVar')",
															"fileName": "@variables('fileName')"
														}
													}
												},
												"inputs": [
													{
														"referenceName": "VFD_DS_Mida_Bookings_FTPServer_CSV",
														"type": "DatasetReference",
														"parameters": {
															"fileName": {
																"value": "@variables('fileName')",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "VFD_DS_Raw_Mida_Bookings_CSV",
														"type": "DatasetReference",
														"parameters": {
															"folderPath": {
																"value": "@variables('folderPathVar')",
																"type": "Expression"
															},
															"fileName": {
																"value": "@variables('fileName')",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "Raw to Curated Pipeline",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "CopyFromFTP",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "VFD_PL_Mida_Bookings_Raw_Curated",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"folderPath": {
															"value": "@variables('folderPathVar')",
															"type": "Expression"
														},
														"fileName": {
															"value": "@variables('fileName')",
															"type": "Expression"
														},
														"year": {
															"value": "@variables('year')",
															"type": "Expression"
														},
														"month": {
															"value": "@variables('month')",
															"type": "Expression"
														},
														"day": {
															"value": "@variables('day')",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"fileName": {
						"type": "String"
					},
					"year": {
						"type": "String"
					},
					"month": {
						"type": "String"
					},
					"folderPathVar": {
						"type": "String"
					},
					"day": {
						"type": "String"
					},
					"dateString": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Mida/Bookings"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Mida_Bookings_FTPServer_Folder')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Raw_Mida_Bookings_CSV')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Mida_Bookings_FTPServer_CSV')]",
				"[concat(variables('factoryId'), '/pipelines/VFD_PL_Mida_Bookings_Raw_Curated')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Mida_Bookings_Raw_Reprocess')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline per rielaborare i file dal container raw che non esistono in processed",
				"activities": [
					{
						"name": "GetAllCSVFiles",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Raw_Mida_Bookings_Folder",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"wildcardFileName": "*.csv",
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ForEachCSVFile",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetAllCSVFiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetAllCSVFiles').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetFileName",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileName",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "ExtractPathComponents",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetFileName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "filePath",
										"value": {
											"value": "@substring(item().itemName, 0, sub(length(item().itemName), add(length(item().name), 1)))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetYearMonth",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "ExtractPathComponents",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "folderPathVar",
										"value": {
											"value": "@variables('filePath')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "ExtractDateParts",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetYearMonth",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileDate",
										"value": {
											"value": "@substring(variables('fileName'), add(indexOf(variables('fileName'), 'reservationPayments'), 20), 8)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetYear",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "ExtractDateParts",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "year",
										"value": {
											"value": "@substring(variables('fileDate'), 0, 4)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetMonth",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetYear",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "month",
										"value": {
											"value": "@substring(variables('fileDate'), 4, 2)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetDay",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetMonth",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "day",
										"value": {
											"value": "@substring(variables('fileDate'), 6, 2)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "CheckIfExistsInProcessed",
									"type": "GetMetadata",
									"dependsOn": [
										{
											"activity": "SetDay",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "VFD_DS_Processed_Mida_Bookings_Parquet",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": {
													"value": "@variables('folderPathVar')",
													"type": "Expression"
												},
												"fileName": {
													"value": "@replace(variables('fileName'),'.csv','.parquet')",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "ParquetReadSettings"
										}
									}
								},
								{
									"name": "ProcessFileIfNotExists",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "CheckIfExistsInProcessed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(activity('CheckIfExistsInProcessed').output.exists)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Raw to Curated Pipeline",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"policy": {
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "VFD_PL_Mida_Bookings_Raw_Curated",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"folderPath": {
															"value": "@variables('folderPathVar')",
															"type": "Expression"
														},
														"fileName": {
															"value": "@variables('fileName')",
															"type": "Expression"
														},
														"year": {
															"value": "@variables('year')",
															"type": "Expression"
														},
														"month": {
															"value": "@variables('month')",
															"type": "Expression"
														},
														"day": {
															"value": "@variables('day')",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"fileName": {
						"type": "String"
					},
					"year": {
						"type": "String"
					},
					"month": {
						"type": "String"
					},
					"day": {
						"type": "String"
					},
					"folderPathVar": {
						"type": "String"
					},
					"fileDate": {
						"type": "String"
					},
					"filePath": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Mida/Bookings"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Raw_Mida_Bookings_Folder')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Processed_Mida_Bookings_Parquet')]",
				"[concat(variables('factoryId'), '/pipelines/VFD_PL_Mida_Bookings_Raw_Curated')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Mida')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Process Bookings",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "VFD_PL_Mida_Bookings_FTP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Reprocess Missing Bookings",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Process Bookings",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "VFD_PL_Mida_Bookings_Raw_Reprocess",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Mida"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/VFD_PL_Mida_Bookings_FTP')]",
				"[concat(variables('factoryId'), '/pipelines/VFD_PL_Mida_Bookings_Raw_Reprocess')]"
			]
		}
	]
}