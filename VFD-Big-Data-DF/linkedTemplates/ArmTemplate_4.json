{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "VFD-Big-Data-DF"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida2_Atomic_APPEND_Booking_Complete')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_dummy",
								"type": "DatasetReference"
							},
							"name": "DummySource"
						},
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Complete_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceExistingContent"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkTemp"
						}
					],
					"transformations": [
						{
							"name": "CreateNewRecord"
						},
						{
							"name": "SelectNewColumns"
						},
						{
							"name": "UnionAllRecords"
						}
					],
					"scriptLines": [
						"parameters{",
						"     guid_pk as string,",
						"     reservation_progressiveCode as string,",
						"     reservation_code as string,",
						"     reservation_status as integer,",
						"     invoiceRequired as string,",
						"     customer as decimal(10,2),",
						"     visitDate as string,",
						"     reservationPayment_guid as string,",
						"     parentPayment_guid as string,",
						"     sliced as string,",
						"     reservation_guid as string,",
						"     group_guid as string,",
						"     group_label as string,",
						"     group_email as string,",
						"     paymentCode as string,",
						"     paymentCondition as decimal(10,2),",
						"     reservation_amount as decimal(10,2),",
						"     reservation_amountTax as decimal(10,2),",
						"     status as integer,",
						"     status_text as string,",
						"     stamp as string,",
						"     notes as string,",
						"     transactionType as string,",
						"     transactionType_text as string,",
						"     paymentLimitDate as string,",
						"     paymentDate as string,",
						"     refund as string,",
						"     refunded as string,",
						"     convention_label as string,",
						"     receiptCode as string,",
						"     insertTimestamp as string,",
						"     updateTimestamp as string,",
						"     owner as string,",
						"     owner_text as string,",
						"     sessionId as string,",
						"     terminal_label as string,",
						"     terminalGroup_label as string,",
						"     gateway_guid as string,",
						"     gateway_label as string,",
						"     transactionID as string,",
						"     bankAccount_guid as string,",
						"     bankAccount_label as string,",
						"     channel_guid as string,",
						"     channel_label as string,",
						"     channelType as string,",
						"     detail_guid as string,",
						"     extra_guid as string,",
						"     priceList as string,",
						"     event as string,",
						"     detailType as string,",
						"     detail_text as string,",
						"     detail_label as string,",
						"     detail_count as integer,",
						"     paymentDetail_guid as string,",
						"     detail_payingPartecipants as integer,",
						"     detail_quantity as integer,",
						"     tickets_quantity as integer,",
						"     pax_quantity as integer,",
						"     costCenter_guid as string,",
						"     costCenter_label as string,",
						"     object_receipt as integer,",
						"     object_taxCode as string,",
						"     object_taxNotes as string,",
						"     object_amount as decimal(10,2),",
						"     object_taxPercentage as decimal(10,2),",
						"     amount as decimal(10,2),",
						"     amountNet as decimal(10,2),",
						"     amountPresale as decimal(10,2),",
						"     amountSold as decimal(10,2),",
						"     amountPayed as decimal(10,2),",
						"     amountPending as decimal(10,2),",
						"     amountCanceled as decimal(10,2),",
						"     externalId as string,",
						"     amountRefunded as decimal(10,2),",
						"     invoiceSummary as string,",
						"     eventCalendar_guid as string,",
						"     passDetail_guid as string,",
						"     paymentCostCenter_guid as string,",
						"     organization_guid as string,",
						"     venue_guid as string,",
						"     olapUpdateTimestamp as string,",
						"     row_id as string",
						"}",
						"source(output(",
						"          dummy as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     data: 'dummy\\n1') ~> DummySource",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceExistingContent",
						"DummySource derive(guid_pk = $guid_pk,",
						"          reservation_progressiveCode = $reservation_progressiveCode,",
						"          reservation_code = $reservation_code,",
						"          reservation_status = $reservation_status,",
						"          invoiceRequired = $invoiceRequired,",
						"          customer = $customer,",
						"          visitDate = toDate($visitDate, 'yyyy-MM-dd'),",
						"          reservationPayment_guid = $reservationPayment_guid,",
						"          parentPayment_guid = $parentPayment_guid,",
						"          sliced = $sliced,",
						"          reservation_guid = $reservation_guid,",
						"          group_guid = $group_guid,",
						"          group_label = $group_label,",
						"          group_email = $group_email,",
						"          paymentCode = $paymentCode,",
						"          paymentCondition = $paymentCondition,",
						"          reservation_amount = $reservation_amount,",
						"          reservation_amountTax = $reservation_amountTax,",
						"          status = $status,",
						"          status_text = $status_text,",
						"          stamp = $stamp,",
						"          notes = $notes,",
						"          transactionType = $transactionType,",
						"          transactionType_text = $transactionType_text,",
						"          paymentLimitDate = toDate($paymentLimitDate, 'yyyy-MM-dd'),",
						"          paymentDate = toDate($paymentDate, 'yyyy-MM-dd'),",
						"          refund = $refund,",
						"          refunded = $refunded,",
						"          convention_label = $convention_label,",
						"          receiptCode = $receiptCode,",
						"          insertTimestamp = toDate($insertTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          updateTimestamp = toDate($updateTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          owner = $owner,",
						"          owner_text = $owner_text,",
						"          sessionId = $sessionId,",
						"          terminal_label = $terminal_label,",
						"          terminalGroup_label = $terminalGroup_label,",
						"          gateway_guid = $gateway_guid,",
						"          gateway_label = $gateway_label,",
						"          transactionID = $transactionID,",
						"          bankAccount_guid = $bankAccount_guid,",
						"          bankAccount_label = $bankAccount_label,",
						"          channel_guid = $channel_guid,",
						"          channel_label = $channel_label,",
						"          channelType = $channelType,",
						"          detail_guid = $detail_guid,",
						"          extra_guid = $extra_guid,",
						"          priceList = $priceList,",
						"          event = $event,",
						"          detailType = $detailType,",
						"          detail_text = $detail_text,",
						"          detail_label = $detail_label,",
						"          detail_count = $detail_count,",
						"          paymentDetail_guid = $paymentDetail_guid,",
						"          detail_payingPartecipants = $detail_payingPartecipants,",
						"          detail_quantity = $detail_quantity,",
						"          tickets_quantity = $tickets_quantity,",
						"          pax_quantity = $pax_quantity,",
						"          costCenter_guid = $costCenter_guid,",
						"          costCenter_label = $costCenter_label,",
						"          object_receipt = $object_receipt,",
						"          object_taxCode = $object_taxCode,",
						"          object_taxNotes = $object_taxNotes,",
						"          object_amount = $object_amount,",
						"          object_taxPercentage = $object_taxPercentage,",
						"          amount = $amount,",
						"          amountNet = $amountNet,",
						"          amountPresale = $amountPresale,",
						"          amountSold = $amountSold,",
						"          amountPayed = $amountPayed,",
						"          amountPending = $amountPending,",
						"          amountCanceled = $amountCanceled,",
						"          externalId = $externalId,",
						"          amountRefunded = $amountRefunded,",
						"          invoiceSummary = $invoiceSummary,",
						"          eventCalendar_guid = $eventCalendar_guid,",
						"          passDetail_guid = $passDetail_guid,",
						"          paymentCostCenter_guid = $paymentCostCenter_guid,",
						"          organization_guid = $organization_guid,",
						"          venue_guid = $venue_guid,",
						"          olapUpdateTimestamp = toDate($olapUpdateTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          row_id = $row_id) ~> CreateNewRecord",
						"CreateNewRecord select(mapColumn(",
						"          guid_pk,",
						"          reservation_progressiveCode,",
						"          reservation_code,",
						"          reservation_status,",
						"          invoiceRequired,",
						"          customer,",
						"          visitDate,",
						"          reservationPayment_guid,",
						"          parentPayment_guid,",
						"          sliced,",
						"          reservation_guid,",
						"          group_guid,",
						"          group_label,",
						"          group_email,",
						"          paymentCode,",
						"          paymentCondition,",
						"          reservation_amount,",
						"          reservation_amountTax,",
						"          status,",
						"          status_text,",
						"          stamp,",
						"          notes,",
						"          transactionType,",
						"          transactionType_text,",
						"          paymentLimitDate,",
						"          paymentDate,",
						"          refund,",
						"          refunded,",
						"          convention_label,",
						"          receiptCode,",
						"          insertTimestamp,",
						"          updateTimestamp,",
						"          owner,",
						"          owner_text,",
						"          sessionId,",
						"          terminal_label,",
						"          terminalGroup_label,",
						"          gateway_guid,",
						"          gateway_label,",
						"          transactionID,",
						"          bankAccount_guid,",
						"          bankAccount_label,",
						"          channel_guid,",
						"          channel_label,",
						"          channelType,",
						"          detail_guid,",
						"          extra_guid,",
						"          priceList,",
						"          event,",
						"          detailType,",
						"          detail_text,",
						"          detail_label,",
						"          detail_count,",
						"          paymentDetail_guid,",
						"          detail_payingPartecipants,",
						"          detail_quantity,",
						"          tickets_quantity,",
						"          pax_quantity,",
						"          costCenter_guid,",
						"          costCenter_label,",
						"          object_receipt,",
						"          object_taxCode,",
						"          object_taxNotes,",
						"          object_amount,",
						"          object_taxPercentage,",
						"          amount,",
						"          amountNet,",
						"          amountPresale,",
						"          amountSold,",
						"          amountPayed,",
						"          amountPending,",
						"          amountCanceled,",
						"          externalId,",
						"          amountRefunded,",
						"          invoiceSummary,",
						"          eventCalendar_guid,",
						"          passDetail_guid,",
						"          paymentCostCenter_guid,",
						"          organization_guid,",
						"          venue_guid,",
						"          olapUpdateTimestamp,",
						"          row_id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectNewColumns",
						"SourceExistingContent, SelectNewColumns union(byName: true)~> UnionAllRecords",
						"UnionAllRecords sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['temp_complete.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SinkTemp"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida2_Atomic_APPEND_Booking_Summary')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_dummy",
								"type": "DatasetReference"
							},
							"name": "DummySource"
						},
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Summary_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceExistingContent"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkTemp"
						}
					],
					"transformations": [
						{
							"name": "CreateNewSummaryRecord"
						},
						{
							"name": "SelectSummaryFields"
						},
						{
							"name": "UnionByName"
						}
					],
					"scriptLines": [
						"parameters{",
						"     row_id as string,",
						"     reservation_code as string,",
						"     priceList as string,",
						"     channel_label as string,",
						"     pax_quantity as integer,",
						"     insertTimestamp as string,",
						"     updateTimestamp as string,",
						"     reservation_amount as decimal(10,2),",
						"     visitDate as string",
						"}",
						"source(output(",
						"          dummy as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     data: 'dummy\\n1') ~> DummySource",
						"source(output(",
						"          row_id as string,",
						"          reservation_code as string,",
						"          priceList as string,",
						"          channel_label as string,",
						"          pax_quantity as integer,",
						"          insertTimestamp as date,",
						"          updateTimestamp as date,",
						"          reservation_amount as decimal(10,2),",
						"          visitDate as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceExistingContent",
						"DummySource derive(row_id = $row_id,",
						"          reservation_code = $reservation_code,",
						"          priceList = $priceList,",
						"          channel_label = $channel_label,",
						"          pax_quantity = $pax_quantity,",
						"          insertTimestamp = toDate($insertTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          updateTimestamp = toDate($updateTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          reservation_amount = $reservation_amount,",
						"          visitDate = toDate($visitDate, 'yyyy-MM-dd')) ~> CreateNewSummaryRecord",
						"CreateNewSummaryRecord select(mapColumn(",
						"          row_id,",
						"          reservation_code,",
						"          priceList,",
						"          channel_label,",
						"          pax_quantity,",
						"          insertTimestamp,",
						"          updateTimestamp,",
						"          reservation_amount,",
						"          visitDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSummaryFields",
						"SourceExistingContent, SelectSummaryFields union(byName: true)~> UnionByName",
						"UnionByName sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['temp_append_summary.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SinkTemp"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida2_Atomic_APPEND_Historical')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_dummy",
								"type": "DatasetReference"
							},
							"name": "DummySource"
						},
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Historical_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceExistingHistorical"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkTemp"
						}
					],
					"transformations": [
						{
							"name": "CreateNewRecord"
						},
						{
							"name": "AddAuditFields"
						},
						{
							"name": "SelectNewColumns"
						},
						{
							"name": "UnionByName"
						}
					],
					"scriptLines": [
						"parameters{",
						"     guid_pk as string,",
						"     reservation_progressiveCode as string,",
						"     reservation_code as string,",
						"     reservation_status as integer,",
						"     invoiceRequired as string,",
						"     customer as decimal(10,2),",
						"     visitDate as string,",
						"     reservationPayment_guid as string,",
						"     parentPayment_guid as string,",
						"     sliced as string,",
						"     reservation_guid as string,",
						"     group_guid as string,",
						"     group_label as string,",
						"     group_email as string,",
						"     paymentCode as string,",
						"     paymentCondition as decimal(10,2),",
						"     reservation_amount as decimal(10,2),",
						"     reservation_amountTax as decimal(10,2),",
						"     status as integer,",
						"     status_text as string,",
						"     stamp as string,",
						"     notes as string,",
						"     transactionType as string,",
						"     transactionType_text as string,",
						"     paymentLimitDate as string,",
						"     paymentDate as string,",
						"     refund as string,",
						"     refunded as string,",
						"     convention_label as string,",
						"     receiptCode as string,",
						"     insertTimestamp as string,",
						"     updateTimestamp as string,",
						"     owner as string,",
						"     owner_text as string,",
						"     sessionId as string,",
						"     terminal_label as string,",
						"     terminalGroup_label as string,",
						"     gateway_guid as string,",
						"     gateway_label as string,",
						"     transactionID as string,",
						"     bankAccount_guid as string,",
						"     bankAccount_label as string,",
						"     channel_guid as string,",
						"     channel_label as string,",
						"     channelType as string,",
						"     detail_guid as string,",
						"     extra_guid as string,",
						"     priceList as string,",
						"     event as string,",
						"     detailType as string,",
						"     detail_text as string,",
						"     detail_label as string,",
						"     detail_count as integer,",
						"     paymentDetail_guid as string,",
						"     detail_payingPartecipants as integer,",
						"     detail_quantity as integer,",
						"     tickets_quantity as integer,",
						"     pax_quantity as integer,",
						"     costCenter_guid as string,",
						"     costCenter_label as string,",
						"     object_receipt as integer,",
						"     object_taxCode as string,",
						"     object_taxNotes as string,",
						"     object_amount as decimal(10,2),",
						"     object_taxPercentage as decimal(10,2),",
						"     amount as decimal(10,2),",
						"     amountNet as decimal(10,2),",
						"     amountPresale as decimal(10,2),",
						"     amountSold as decimal(10,2),",
						"     amountPayed as decimal(10,2),",
						"     amountPending as decimal(10,2),",
						"     amountCanceled as decimal(10,2),",
						"     externalId as string,",
						"     amountRefunded as decimal(10,2),",
						"     invoiceSummary as string,",
						"     eventCalendar_guid as string,",
						"     passDetail_guid as string,",
						"     paymentCostCenter_guid as string,",
						"     organization_guid as string,",
						"     venue_guid as string,",
						"     olapUpdateTimestamp as string,",
						"     row_id as string,",
						"     operationType as string",
						"}",
						"source(output(",
						"          dummy as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     data: 'dummy\\n1') ~> DummySource",
						"source(output(",
						"          guid_pk as string,",
						"          reservation_progressiveCode as string,",
						"          reservation_code as string,",
						"          reservation_status as integer,",
						"          invoiceRequired as string,",
						"          customer as decimal(10,2),",
						"          visitDate as date,",
						"          reservationPayment_guid as string,",
						"          parentPayment_guid as string,",
						"          sliced as string,",
						"          reservation_guid as string,",
						"          group_guid as string,",
						"          group_label as string,",
						"          group_email as string,",
						"          paymentCode as string,",
						"          paymentCondition as decimal(10,2),",
						"          reservation_amount as decimal(10,2),",
						"          reservation_amountTax as decimal(10,2),",
						"          status as integer,",
						"          status_text as string,",
						"          stamp as string,",
						"          notes as string,",
						"          transactionType as string,",
						"          transactionType_text as string,",
						"          paymentLimitDate as date,",
						"          paymentDate as date,",
						"          refund as string,",
						"          refunded as string,",
						"          convention_label as string,",
						"          receiptCode as string,",
						"          insertTimestamp as date,",
						"          updateTimestamp as date,",
						"          owner as string,",
						"          owner_text as string,",
						"          sessionId as string,",
						"          terminal_label as string,",
						"          terminalGroup_label as string,",
						"          gateway_guid as string,",
						"          gateway_label as string,",
						"          transactionID as string,",
						"          bankAccount_guid as string,",
						"          bankAccount_label as string,",
						"          channel_guid as string,",
						"          channel_label as string,",
						"          channelType as string,",
						"          detail_guid as string,",
						"          extra_guid as string,",
						"          priceList as string,",
						"          event as string,",
						"          detailType as string,",
						"          detail_text as string,",
						"          detail_label as string,",
						"          detail_count as integer,",
						"          paymentDetail_guid as string,",
						"          detail_payingPartecipants as integer,",
						"          detail_quantity as integer,",
						"          tickets_quantity as integer,",
						"          pax_quantity as integer,",
						"          costCenter_guid as string,",
						"          costCenter_label as string,",
						"          object_receipt as integer,",
						"          object_taxCode as string,",
						"          object_taxNotes as string,",
						"          object_amount as decimal(10,2),",
						"          object_taxPercentage as decimal(10,2),",
						"          amount as decimal(10,2),",
						"          amountNet as decimal(10,2),",
						"          amountPresale as decimal(10,2),",
						"          amountSold as decimal(10,2),",
						"          amountPayed as decimal(10,2),",
						"          amountPending as decimal(10,2),",
						"          amountCanceled as decimal(10,2),",
						"          externalId as string,",
						"          amountRefunded as decimal(10,2),",
						"          invoiceSummary as string,",
						"          eventCalendar_guid as string,",
						"          passDetail_guid as string,",
						"          paymentCostCenter_guid as string,",
						"          organization_guid as string,",
						"          venue_guid as string,",
						"          olapUpdateTimestamp as date,",
						"          row_id as string,",
						"          operationType as string,",
						"          operationTimestamp as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceExistingHistorical",
						"DummySource derive(guid_pk = $guid_pk,",
						"          reservation_progressiveCode = $reservation_progressiveCode,",
						"          reservation_code = $reservation_code,",
						"          reservation_status = $reservation_status,",
						"          invoiceRequired = $invoiceRequired,",
						"          customer = $customer,",
						"          visitDate = toDate($visitDate, 'yyyy-MM-dd'),",
						"          reservationPayment_guid = $reservationPayment_guid,",
						"          parentPayment_guid = $parentPayment_guid,",
						"          sliced = $sliced,",
						"          reservation_guid = $reservation_guid,",
						"          group_guid = $group_guid,",
						"          group_label = $group_label,",
						"          group_email = $group_email,",
						"          paymentCode = $paymentCode,",
						"          paymentCondition = $paymentCondition,",
						"          reservation_amount = $reservation_amount,",
						"          reservation_amountTax = $reservation_amountTax,",
						"          status = $status,",
						"          status_text = $status_text,",
						"          stamp = $stamp,",
						"          notes = $notes,",
						"          transactionType = $transactionType,",
						"          transactionType_text = $transactionType_text,",
						"          paymentLimitDate = toDate($paymentLimitDate, 'yyyy-MM-dd'),",
						"          paymentDate = toDate($paymentDate, 'yyyy-MM-dd'),",
						"          refund = $refund,",
						"          refunded = $refunded,",
						"          convention_label = $convention_label,",
						"          receiptCode = $receiptCode,",
						"          insertTimestamp = toDate($insertTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          updateTimestamp = toDate($updateTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          owner = $owner,",
						"          owner_text = $owner_text,",
						"          sessionId = $sessionId,",
						"          terminal_label = $terminal_label,",
						"          terminalGroup_label = $terminalGroup_label,",
						"          gateway_guid = $gateway_guid,",
						"          gateway_label = $gateway_label,",
						"          transactionID = $transactionID,",
						"          bankAccount_guid = $bankAccount_guid,",
						"          bankAccount_label = $bankAccount_label,",
						"          channel_guid = $channel_guid,",
						"          channel_label = $channel_label,",
						"          channelType = $channelType,",
						"          detail_guid = $detail_guid,",
						"          extra_guid = $extra_guid,",
						"          priceList = $priceList,",
						"          event = $event,",
						"          detailType = $detailType,",
						"          detail_text = $detail_text,",
						"          detail_label = $detail_label,",
						"          detail_count = $detail_count,",
						"          paymentDetail_guid = $paymentDetail_guid,",
						"          detail_payingPartecipants = $detail_payingPartecipants,",
						"          detail_quantity = $detail_quantity,",
						"          tickets_quantity = $tickets_quantity,",
						"          pax_quantity = $pax_quantity,",
						"          costCenter_guid = $costCenter_guid,",
						"          costCenter_label = $costCenter_label,",
						"          object_receipt = $object_receipt,",
						"          object_taxCode = $object_taxCode,",
						"          object_taxNotes = $object_taxNotes,",
						"          object_amount = $object_amount,",
						"          object_taxPercentage = $object_taxPercentage,",
						"          amount = $amount,",
						"          amountNet = $amountNet,",
						"          amountPresale = $amountPresale,",
						"          amountSold = $amountSold,",
						"          amountPayed = $amountPayed,",
						"          amountPending = $amountPending,",
						"          amountCanceled = $amountCanceled,",
						"          externalId = $externalId,",
						"          amountRefunded = $amountRefunded,",
						"          invoiceSummary = $invoiceSummary,",
						"          eventCalendar_guid = $eventCalendar_guid,",
						"          passDetail_guid = $passDetail_guid,",
						"          paymentCostCenter_guid = $paymentCostCenter_guid,",
						"          organization_guid = $organization_guid,",
						"          venue_guid = $venue_guid,",
						"          olapUpdateTimestamp = toDate($olapUpdateTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          row_id = $row_id) ~> CreateNewRecord",
						"CreateNewRecord derive(audit_operation = $operationType,",
						"          audit_timestamp = currentTimestamp()) ~> AddAuditFields",
						"AddAuditFields select(mapColumn(",
						"          guid_pk,",
						"          reservation_progressiveCode,",
						"          reservation_code,",
						"          reservation_status,",
						"          invoiceRequired,",
						"          customer,",
						"          visitDate,",
						"          reservationPayment_guid,",
						"          parentPayment_guid,",
						"          sliced,",
						"          reservation_guid,",
						"          group_guid,",
						"          group_label,",
						"          group_email,",
						"          paymentCode,",
						"          paymentCondition,",
						"          reservation_amount,",
						"          reservation_amountTax,",
						"          status,",
						"          status_text,",
						"          stamp,",
						"          notes,",
						"          transactionType,",
						"          transactionType_text,",
						"          paymentLimitDate,",
						"          paymentDate,",
						"          refund,",
						"          refunded,",
						"          convention_label,",
						"          receiptCode,",
						"          insertTimestamp,",
						"          updateTimestamp,",
						"          owner,",
						"          owner_text,",
						"          sessionId,",
						"          terminal_label,",
						"          terminalGroup_label,",
						"          gateway_guid,",
						"          gateway_label,",
						"          transactionID,",
						"          bankAccount_guid,",
						"          bankAccount_label,",
						"          channel_guid,",
						"          channel_label,",
						"          channelType,",
						"          detail_guid,",
						"          extra_guid,",
						"          priceList,",
						"          event,",
						"          detailType,",
						"          detail_text,",
						"          detail_label,",
						"          detail_count,",
						"          paymentDetail_guid,",
						"          detail_payingPartecipants,",
						"          detail_quantity,",
						"          tickets_quantity,",
						"          pax_quantity,",
						"          costCenter_guid,",
						"          costCenter_label,",
						"          object_receipt,",
						"          object_taxCode,",
						"          object_taxNotes,",
						"          object_amount,",
						"          object_taxPercentage,",
						"          amount,",
						"          amountNet,",
						"          amountPresale,",
						"          amountSold,",
						"          amountPayed,",
						"          amountPending,",
						"          amountCanceled,",
						"          externalId,",
						"          amountRefunded,",
						"          invoiceSummary,",
						"          eventCalendar_guid,",
						"          passDetail_guid,",
						"          paymentCostCenter_guid,",
						"          organization_guid,",
						"          venue_guid,",
						"          olapUpdateTimestamp,",
						"          row_id,",
						"          audit_operation,",
						"          audit_timestamp",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectNewColumns",
						"SourceExistingHistorical, SelectNewColumns union(byName: true)~> UnionByName",
						"UnionByName sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['temp_append_historical.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SinkTemp"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida2_Atomic_CREATE_Booking_Complete')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_dummy",
								"type": "DatasetReference"
							},
							"name": "DummySource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Complete_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkComplete"
						}
					],
					"transformations": [
						{
							"name": "CreateRecordFromParameters"
						},
						{
							"name": "SelectFinalColumns"
						}
					],
					"scriptLines": [
						"parameters{",
						"     guid_pk as string,",
						"     reservation_progressiveCode as string,",
						"     reservation_code as string,",
						"     reservation_status as integer,",
						"     invoiceRequired as string,",
						"     customer as decimal(10,2),",
						"     visitDate as string,",
						"     reservationPayment_guid as string,",
						"     parentPayment_guid as string,",
						"     sliced as string,",
						"     reservation_guid as string,",
						"     group_guid as string,",
						"     group_label as string,",
						"     group_email as string,",
						"     paymentCode as string,",
						"     paymentCondition as decimal(10,2),",
						"     reservation_amount as decimal(10,2),",
						"     reservation_amountTax as decimal(10,2),",
						"     status as integer,",
						"     status_text as string,",
						"     stamp as string,",
						"     notes as string,",
						"     transactionType as string,",
						"     transactionType_text as string,",
						"     paymentLimitDate as string,",
						"     paymentDate as string,",
						"     refund as string,",
						"     refunded as string,",
						"     convention_label as string,",
						"     receiptCode as string,",
						"     insertTimestamp as string,",
						"     updateTimestamp as string,",
						"     owner as string,",
						"     owner_text as string,",
						"     sessionId as string,",
						"     terminal_label as string,",
						"     terminalGroup_label as string,",
						"     gateway_guid as string,",
						"     gateway_label as string,",
						"     transactionID as string,",
						"     bankAccount_guid as string,",
						"     bankAccount_label as string,",
						"     channel_guid as string,",
						"     channel_label as string,",
						"     channelType as string,",
						"     detail_guid as string,",
						"     extra_guid as string,",
						"     priceList as string,",
						"     event as string,",
						"     detailType as string,",
						"     detail_text as string,",
						"     detail_label as string,",
						"     detail_count as integer,",
						"     paymentDetail_guid as string,",
						"     detail_payingPartecipants as integer,",
						"     detail_quantity as integer,",
						"     tickets_quantity as integer,",
						"     pax_quantity as integer,",
						"     costCenter_guid as string,",
						"     costCenter_label as string,",
						"     object_receipt as integer,",
						"     object_taxCode as string,",
						"     object_taxNotes as string,",
						"     object_amount as decimal(10,2),",
						"     object_taxPercentage as decimal(10,2),",
						"     amount as decimal(10,2),",
						"     amountNet as decimal(10,2),",
						"     amountPresale as decimal(10,2),",
						"     amountSold as decimal(10,2),",
						"     amountPayed as decimal(10,2),",
						"     amountPending as decimal(10,2),",
						"     amountCanceled as decimal(10,2),",
						"     externalId as string,",
						"     amountRefunded as decimal(10,2),",
						"     invoiceSummary as string,",
						"     eventCalendar_guid as string,",
						"     passDetail_guid as string,",
						"     paymentCostCenter_guid as string,",
						"     organization_guid as string,",
						"     venue_guid as string,",
						"     olapUpdateTimestamp as string,",
						"     row_id as string",
						"}",
						"source(output(",
						"          dummy as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DummySource",
						"DummySource derive(guid_pk = $guid_pk,",
						"          reservation_progressiveCode = $reservation_progressiveCode,",
						"          reservation_code = $reservation_code,",
						"          reservation_status = $reservation_status,",
						"          invoiceRequired = $invoiceRequired,",
						"          customer = $customer,",
						"          visitDate = toDate($visitDate, 'yyyy-MM-dd'),",
						"          reservationPayment_guid = $reservationPayment_guid,",
						"          parentPayment_guid = $parentPayment_guid,",
						"          sliced = $sliced,",
						"          reservation_guid = $reservation_guid,",
						"          group_guid = $group_guid,",
						"          group_label = $group_label,",
						"          group_email = $group_email,",
						"          paymentCode = $paymentCode,",
						"          paymentCondition = $paymentCondition,",
						"          reservation_amount = $reservation_amount,",
						"          reservation_amountTax = $reservation_amountTax,",
						"          status = $status,",
						"          status_text = $status_text,",
						"          stamp = $stamp,",
						"          notes = $notes,",
						"          transactionType = $transactionType,",
						"          transactionType_text = $transactionType_text,",
						"          paymentLimitDate = toDate($paymentLimitDate, 'yyyy-MM-dd'),",
						"          paymentDate = toDate($paymentDate, 'yyyy-MM-dd'),",
						"          refund = $refund,",
						"          refunded = $refunded,",
						"          convention_label = $convention_label,",
						"          receiptCode = $receiptCode,",
						"          insertTimestamp = toDate($insertTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          updateTimestamp = toDate($updateTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          owner = $owner,",
						"          owner_text = $owner_text,",
						"          sessionId = $sessionId,",
						"          terminal_label = $terminal_label,",
						"          terminalGroup_label = $terminalGroup_label,",
						"          gateway_guid = $gateway_guid,",
						"          gateway_label = $gateway_label,",
						"          transactionID = $transactionID,",
						"          bankAccount_guid = $bankAccount_guid,",
						"          bankAccount_label = $bankAccount_label,",
						"          channel_guid = $channel_guid,",
						"          channel_label = $channel_label,",
						"          channelType = $channelType,",
						"          detail_guid = $detail_guid,",
						"          extra_guid = $extra_guid,",
						"          priceList = $priceList,",
						"          event = $event,",
						"          detailType = $detailType,",
						"          detail_text = $detail_text,",
						"          detail_label = $detail_label,",
						"          detail_count = $detail_count,",
						"          paymentDetail_guid = $paymentDetail_guid,",
						"          detail_payingPartecipants = $detail_payingPartecipants,",
						"          detail_quantity = $detail_quantity,",
						"          tickets_quantity = $tickets_quantity,",
						"          pax_quantity = $pax_quantity,",
						"          costCenter_guid = $costCenter_guid,",
						"          costCenter_label = $costCenter_label,",
						"          object_receipt = $object_receipt,",
						"          object_taxCode = $object_taxCode,",
						"          object_taxNotes = $object_taxNotes,",
						"          object_amount = $object_amount,",
						"          object_taxPercentage = $object_taxPercentage,",
						"          amount = $amount,",
						"          amountNet = $amountNet,",
						"          amountPresale = $amountPresale,",
						"          amountSold = $amountSold,",
						"          amountPayed = $amountPayed,",
						"          amountPending = $amountPending,",
						"          amountCanceled = $amountCanceled,",
						"          externalId = $externalId,",
						"          amountRefunded = $amountRefunded,",
						"          invoiceSummary = $invoiceSummary,",
						"          eventCalendar_guid = $eventCalendar_guid,",
						"          passDetail_guid = $passDetail_guid,",
						"          paymentCostCenter_guid = $paymentCostCenter_guid,",
						"          organization_guid = $organization_guid,",
						"          venue_guid = $venue_guid,",
						"          olapUpdateTimestamp = toDate($olapUpdateTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          row_id = $row_id) ~> CreateRecordFromParameters",
						"CreateRecordFromParameters select(mapColumn(",
						"          guid_pk,",
						"          reservation_progressiveCode,",
						"          reservation_code,",
						"          reservation_status,",
						"          invoiceRequired,",
						"          customer,",
						"          visitDate,",
						"          reservationPayment_guid,",
						"          parentPayment_guid,",
						"          sliced,",
						"          reservation_guid,",
						"          group_guid,",
						"          group_label,",
						"          group_email,",
						"          paymentCode,",
						"          paymentCondition,",
						"          reservation_amount,",
						"          reservation_amountTax,",
						"          status,",
						"          status_text,",
						"          stamp,",
						"          notes,",
						"          transactionType,",
						"          transactionType_text,",
						"          paymentLimitDate,",
						"          paymentDate,",
						"          refund,",
						"          refunded,",
						"          convention_label,",
						"          receiptCode,",
						"          insertTimestamp,",
						"          updateTimestamp,",
						"          owner,",
						"          owner_text,",
						"          sessionId,",
						"          terminal_label,",
						"          terminalGroup_label,",
						"          gateway_guid,",
						"          gateway_label,",
						"          transactionID,",
						"          bankAccount_guid,",
						"          bankAccount_label,",
						"          channel_guid,",
						"          channel_label,",
						"          channelType,",
						"          detail_guid,",
						"          extra_guid,",
						"          priceList,",
						"          event,",
						"          detailType,",
						"          detail_text,",
						"          detail_label,",
						"          detail_count,",
						"          paymentDetail_guid,",
						"          detail_payingPartecipants,",
						"          detail_quantity,",
						"          tickets_quantity,",
						"          pax_quantity,",
						"          costCenter_guid,",
						"          costCenter_label,",
						"          object_receipt,",
						"          object_taxCode,",
						"          object_taxNotes,",
						"          object_amount,",
						"          object_taxPercentage,",
						"          amount,",
						"          amountNet,",
						"          amountPresale,",
						"          amountSold,",
						"          amountPayed,",
						"          amountPending,",
						"          amountCanceled,",
						"          externalId,",
						"          amountRefunded,",
						"          invoiceSummary,",
						"          eventCalendar_guid,",
						"          passDetail_guid,",
						"          paymentCostCenter_guid,",
						"          organization_guid,",
						"          venue_guid,",
						"          olapUpdateTimestamp,",
						"          row_id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinalColumns",
						"SelectFinalColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          guid_pk as string,",
						"          reservation_progressiveCode as string,",
						"          reservation_code as string,",
						"          reservation_status as integer,",
						"          invoiceRequired as string,",
						"          customer as decimal(10,2),",
						"          visitDate as date,",
						"          reservationPayment_guid as string,",
						"          parentPayment_guid as string,",
						"          sliced as string,",
						"          reservation_guid as string,",
						"          group_guid as string,",
						"          group_label as string,",
						"          group_email as string,",
						"          paymentCode as string,",
						"          paymentCondition as decimal(10,2),",
						"          reservation_amount as decimal(10,2),",
						"          reservation_amountTax as decimal(10,2),",
						"          status as integer,",
						"          status_text as string,",
						"          stamp as string,",
						"          notes as string,",
						"          transactionType as string,",
						"          transactionType_text as string,",
						"          paymentLimitDate as date,",
						"          paymentDate as date,",
						"          refund as string,",
						"          refunded as string,",
						"          convention_label as string,",
						"          receiptCode as string,",
						"          insertTimestamp as date,",
						"          updateTimestamp as date,",
						"          owner as string,",
						"          owner_text as string,",
						"          sessionId as string,",
						"          terminal_label as string,",
						"          terminalGroup_label as string,",
						"          gateway_guid as string,",
						"          gateway_label as string,",
						"          transactionID as string,",
						"          bankAccount_guid as string,",
						"          bankAccount_label as string,",
						"          channel_guid as string,",
						"          channel_label as string,",
						"          channelType as string,",
						"          detail_guid as string,",
						"          extra_guid as string,",
						"          priceList as string,",
						"          event as string,",
						"          detailType as string,",
						"          detail_text as string,",
						"          detail_label as string,",
						"          detail_count as integer,",
						"          paymentDetail_guid as string,",
						"          detail_payingPartecipants as integer,",
						"          detail_quantity as integer,",
						"          tickets_quantity as integer,",
						"          pax_quantity as integer,",
						"          costCenter_guid as string,",
						"          costCenter_label as string,",
						"          object_receipt as integer,",
						"          object_taxCode as string,",
						"          object_taxNotes as string,",
						"          object_amount as decimal(10,2),",
						"          object_taxPercentage as decimal(10,2),",
						"          amount as decimal(10,2),",
						"          amountNet as decimal(10,2),",
						"          amountPresale as decimal(10,2),",
						"          amountSold as decimal(10,2),",
						"          amountPayed as decimal(10,2),",
						"          amountPending as decimal(10,2),",
						"          amountCanceled as decimal(10,2),",
						"          externalId as string,",
						"          amountRefunded as decimal(10,2),",
						"          invoiceSummary as string,",
						"          eventCalendar_guid as string,",
						"          passDetail_guid as string,",
						"          paymentCostCenter_guid as string,",
						"          organization_guid as string,",
						"          venue_guid as string,",
						"          olapUpdateTimestamp as date,",
						"          row_id as string",
						"     ),",
						"     format: 'parquet',",
						"     partitionFileNames:['booking_complete.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SinkComplete"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida2_Atomic_CREATE_Booking_Summary')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_dummy",
								"type": "DatasetReference"
							},
							"name": "DummySource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Summary_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkSummary"
						}
					],
					"transformations": [
						{
							"name": "CreateSummaryRecord"
						},
						{
							"name": "SelectSummaryFields"
						}
					],
					"scriptLines": [
						"parameters{",
						"     row_id as string,",
						"     reservation_code as string,",
						"     priceList as string,",
						"     channel_label as string,",
						"     pax_quantity as integer,",
						"     insertTimestamp as string,",
						"     updateTimestamp as string,",
						"     reservation_amount as decimal(10,2),",
						"     visitDate as string",
						"}",
						"source(output(",
						"          dummy as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     data: 'dummy\\n1') ~> DummySource",
						"DummySource derive(row_id = $row_id,",
						"          reservation_code = $reservation_code,",
						"          priceList = $priceList,",
						"          channel_label = $channel_label,",
						"          pax_quantity = $pax_quantity,",
						"          insertTimestamp = toDate($insertTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          updateTimestamp = toDate($updateTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          reservation_amount = $reservation_amount,",
						"          visitDate = toDate($visitDate, 'yyyy-MM-dd')) ~> CreateSummaryRecord",
						"CreateSummaryRecord select(mapColumn(",
						"          row_id,",
						"          reservation_code,",
						"          priceList,",
						"          channel_label,",
						"          pax_quantity,",
						"          insertTimestamp,",
						"          updateTimestamp,",
						"          reservation_amount,",
						"          visitDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSummaryFields",
						"SelectSummaryFields sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          row_id as string,",
						"          reservation_code as string,",
						"          priceList as string,",
						"          channel_label as string,",
						"          pax_quantity as integer,",
						"          insertTimestamp as date,",
						"          updateTimestamp as date,",
						"          reservation_amount as decimal(10,2),",
						"          visitDate as date",
						"     ),",
						"     format: 'parquet',",
						"     partitionFileNames:['booking_summary.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SinkSummary"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida2_Atomic_CREATE_Historical')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_dummy",
								"type": "DatasetReference"
							},
							"name": "DummySource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Historical_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkHistorical"
						}
					],
					"transformations": [
						{
							"name": "CreateHistoricalRecord"
						},
						{
							"name": "AddAuditFields"
						},
						{
							"name": "SelectFinalColumns"
						}
					],
					"scriptLines": [
						"parameters{",
						"     guid_pk as string,",
						"     reservation_progressiveCode as string,",
						"     reservation_code as string,",
						"     reservation_status as integer,",
						"     invoiceRequired as string,",
						"     customer as decimal(10,2),",
						"     visitDate as string,",
						"     reservationPayment_guid as string,",
						"     parentPayment_guid as string,",
						"     sliced as string,",
						"     reservation_guid as string,",
						"     group_guid as string,",
						"     group_label as string,",
						"     group_email as string,",
						"     paymentCode as string,",
						"     paymentCondition as decimal(10,2),",
						"     reservation_amount as decimal(10,2),",
						"     reservation_amountTax as decimal(10,2),",
						"     status as integer,",
						"     status_text as string,",
						"     stamp as string,",
						"     notes as string,",
						"     transactionType as string,",
						"     transactionType_text as string,",
						"     paymentLimitDate as string,",
						"     paymentDate as string,",
						"     refund as string,",
						"     refunded as string,",
						"     convention_label as string,",
						"     receiptCode as string,",
						"     insertTimestamp as string,",
						"     updateTimestamp as string,",
						"     owner as string,",
						"     owner_text as string,",
						"     sessionId as string,",
						"     terminal_label as string,",
						"     terminalGroup_label as string,",
						"     gateway_guid as string,",
						"     gateway_label as string,",
						"     transactionID as string,",
						"     bankAccount_guid as string,",
						"     bankAccount_label as string,",
						"     channel_guid as string,",
						"     channel_label as string,",
						"     channelType as string,",
						"     detail_guid as string,",
						"     extra_guid as string,",
						"     priceList as string,",
						"     event as string,",
						"     detailType as string,",
						"     detail_text as string,",
						"     detail_label as string,",
						"     detail_count as integer,",
						"     paymentDetail_guid as string,",
						"     detail_payingPartecipants as integer,",
						"     detail_quantity as integer,",
						"     tickets_quantity as integer,",
						"     pax_quantity as integer,",
						"     costCenter_guid as string,",
						"     costCenter_label as string,",
						"     object_receipt as integer,",
						"     object_taxCode as string,",
						"     object_taxNotes as string,",
						"     object_amount as decimal(10,2),",
						"     object_taxPercentage as decimal(10,2),",
						"     amount as decimal(10,2),",
						"     amountNet as decimal(10,2),",
						"     amountPresale as decimal(10,2),",
						"     amountSold as decimal(10,2),",
						"     amountPayed as decimal(10,2),",
						"     amountPending as decimal(10,2),",
						"     amountCanceled as decimal(10,2),",
						"     externalId as string,",
						"     amountRefunded as decimal(10,2),",
						"     invoiceSummary as string,",
						"     eventCalendar_guid as string,",
						"     passDetail_guid as string,",
						"     paymentCostCenter_guid as string,",
						"     organization_guid as string,",
						"     venue_guid as string,",
						"     olapUpdateTimestamp as string,",
						"     row_id as string,",
						"     operationType as string",
						"}",
						"source(output(",
						"          dummy as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     data: 'dummy\\n1') ~> DummySource",
						"DummySource derive(guid_pk = $guid_pk,",
						"          reservation_progressiveCode = $reservation_progressiveCode,",
						"          reservation_code = $reservation_code,",
						"          reservation_status = $reservation_status,",
						"          invoiceRequired = $invoiceRequired,",
						"          customer = $customer,",
						"          visitDate = toDate($visitDate, 'yyyy-MM-dd'),",
						"          reservationPayment_guid = $reservationPayment_guid,",
						"          parentPayment_guid = $parentPayment_guid,",
						"          sliced = $sliced,",
						"          reservation_guid = $reservation_guid,",
						"          group_guid = $group_guid,",
						"          group_label = $group_label,",
						"          group_email = $group_email,",
						"          paymentCode = $paymentCode,",
						"          paymentCondition = $paymentCondition,",
						"          reservation_amount = $reservation_amount,",
						"          reservation_amountTax = $reservation_amountTax,",
						"          status = $status,",
						"          status_text = $status_text,",
						"          stamp = $stamp,",
						"          notes = $notes,",
						"          transactionType = $transactionType,",
						"          transactionType_text = $transactionType_text,",
						"          paymentLimitDate = toDate($paymentLimitDate, 'yyyy-MM-dd'),",
						"          paymentDate = toDate($paymentDate, 'yyyy-MM-dd'),",
						"          refund = $refund,",
						"          refunded = $refunded,",
						"          convention_label = $convention_label,",
						"          receiptCode = $receiptCode,",
						"          insertTimestamp = toDate($insertTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          updateTimestamp = toDate($updateTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          owner = $owner,",
						"          owner_text = $owner_text,",
						"          sessionId = $sessionId,",
						"          terminal_label = $terminal_label,",
						"          terminalGroup_label = $terminalGroup_label,",
						"          gateway_guid = $gateway_guid,",
						"          gateway_label = $gateway_label,",
						"          transactionID = $transactionID,",
						"          bankAccount_guid = $bankAccount_guid,",
						"          bankAccount_label = $bankAccount_label,",
						"          channel_guid = $channel_guid,",
						"          channel_label = $channel_label,",
						"          channelType = $channelType,",
						"          detail_guid = $detail_guid,",
						"          extra_guid = $extra_guid,",
						"          priceList = $priceList,",
						"          event = $event,",
						"          detailType = $detailType,",
						"          detail_text = $detail_text,",
						"          detail_label = $detail_label,",
						"          detail_count = $detail_count,",
						"          paymentDetail_guid = $paymentDetail_guid,",
						"          detail_payingPartecipants = $detail_payingPartecipants,",
						"          detail_quantity = $detail_quantity,",
						"          tickets_quantity = $tickets_quantity,",
						"          pax_quantity = $pax_quantity,",
						"          costCenter_guid = $costCenter_guid,",
						"          costCenter_label = $costCenter_label,",
						"          object_receipt = $object_receipt,",
						"          object_taxCode = $object_taxCode,",
						"          object_taxNotes = $object_taxNotes,",
						"          object_amount = $object_amount,",
						"          object_taxPercentage = $object_taxPercentage,",
						"          amount = $amount,",
						"          amountNet = $amountNet,",
						"          amountPresale = $amountPresale,",
						"          amountSold = $amountSold,",
						"          amountPayed = $amountPayed,",
						"          amountPending = $amountPending,",
						"          amountCanceled = $amountCanceled,",
						"          externalId = $externalId,",
						"          amountRefunded = $amountRefunded,",
						"          invoiceSummary = $invoiceSummary,",
						"          eventCalendar_guid = $eventCalendar_guid,",
						"          passDetail_guid = $passDetail_guid,",
						"          paymentCostCenter_guid = $paymentCostCenter_guid,",
						"          organization_guid = $organization_guid,",
						"          venue_guid = $venue_guid,",
						"          olapUpdateTimestamp = toDate($olapUpdateTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          row_id = $row_id) ~> CreateHistoricalRecord",
						"CreateHistoricalRecord derive(audit_operation = $operationType,",
						"          audit_timestamp = currentTimestamp()) ~> AddAuditFields",
						"AddAuditFields select(mapColumn(",
						"          guid_pk,",
						"          reservation_progressiveCode,",
						"          reservation_code,",
						"          reservation_status,",
						"          invoiceRequired,",
						"          customer,",
						"          visitDate,",
						"          reservationPayment_guid,",
						"          parentPayment_guid,",
						"          sliced,",
						"          reservation_guid,",
						"          group_guid,",
						"          group_label,",
						"          group_email,",
						"          paymentCode,",
						"          paymentCondition,",
						"          reservation_amount,",
						"          reservation_amountTax,",
						"          status,",
						"          status_text,",
						"          stamp,",
						"          notes,",
						"          transactionType,",
						"          transactionType_text,",
						"          paymentLimitDate,",
						"          paymentDate,",
						"          refund,",
						"          refunded,",
						"          convention_label,",
						"          receiptCode,",
						"          insertTimestamp,",
						"          updateTimestamp,",
						"          owner,",
						"          owner_text,",
						"          sessionId,",
						"          terminal_label,",
						"          terminalGroup_label,",
						"          gateway_guid,",
						"          gateway_label,",
						"          transactionID,",
						"          bankAccount_guid,",
						"          bankAccount_label,",
						"          channel_guid,",
						"          channel_label,",
						"          channelType,",
						"          detail_guid,",
						"          extra_guid,",
						"          priceList,",
						"          event,",
						"          detailType,",
						"          detail_text,",
						"          detail_label,",
						"          detail_count,",
						"          paymentDetail_guid,",
						"          detail_payingPartecipants,",
						"          detail_quantity,",
						"          tickets_quantity,",
						"          pax_quantity,",
						"          costCenter_guid,",
						"          costCenter_label,",
						"          object_receipt,",
						"          object_taxCode,",
						"          object_taxNotes,",
						"          object_amount,",
						"          object_taxPercentage,",
						"          amount,",
						"          amountNet,",
						"          amountPresale,",
						"          amountSold,",
						"          amountPayed,",
						"          amountPending,",
						"          amountCanceled,",
						"          externalId,",
						"          amountRefunded,",
						"          invoiceSummary,",
						"          eventCalendar_guid,",
						"          passDetail_guid,",
						"          paymentCostCenter_guid,",
						"          organization_guid,",
						"          venue_guid,",
						"          olapUpdateTimestamp,",
						"          row_id,",
						"          audit_operation,",
						"          audit_timestamp",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinalColumns",
						"SelectFinalColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          guid_pk as string,",
						"          reservation_progressiveCode as string,",
						"          reservation_code as string,",
						"          reservation_status as integer,",
						"          invoiceRequired as string,",
						"          customer as decimal(10,2),",
						"          visitDate as date,",
						"          reservationPayment_guid as string,",
						"          parentPayment_guid as string,",
						"          sliced as string,",
						"          reservation_guid as string,",
						"          group_guid as string,",
						"          group_label as string,",
						"          group_email as string,",
						"          paymentCode as string,",
						"          paymentCondition as decimal(10,2),",
						"          reservation_amount as decimal(10,2),",
						"          reservation_amountTax as decimal(10,2),",
						"          status as integer,",
						"          status_text as string,",
						"          stamp as string,",
						"          notes as string,",
						"          transactionType as string,",
						"          transactionType_text as string,",
						"          paymentLimitDate as date,",
						"          paymentDate as date,",
						"          refund as string,",
						"          refunded as string,",
						"          convention_label as string,",
						"          receiptCode as string,",
						"          insertTimestamp as date,",
						"          updateTimestamp as date,",
						"          owner as string,",
						"          owner_text as string,",
						"          sessionId as string,",
						"          terminal_label as string,",
						"          terminalGroup_label as string,",
						"          gateway_guid as string,",
						"          gateway_label as string,",
						"          transactionID as string,",
						"          bankAccount_guid as string,",
						"          bankAccount_label as string,",
						"          channel_guid as string,",
						"          channel_label as string,",
						"          channelType as string,",
						"          detail_guid as string,",
						"          extra_guid as string,",
						"          priceList as string,",
						"          event as string,",
						"          detailType as string,",
						"          detail_text as string,",
						"          detail_label as string,",
						"          detail_count as integer,",
						"          paymentDetail_guid as string,",
						"          detail_payingPartecipants as integer,",
						"          detail_quantity as integer,",
						"          tickets_quantity as integer,",
						"          pax_quantity as integer,",
						"          costCenter_guid as string,",
						"          costCenter_label as string,",
						"          object_receipt as integer,",
						"          object_taxCode as string,",
						"          object_taxNotes as string,",
						"          object_amount as decimal(10,2),",
						"          object_taxPercentage as decimal(10,2),",
						"          amount as decimal(10,2),",
						"          amountNet as decimal(10,2),",
						"          amountPresale as decimal(10,2),",
						"          amountSold as decimal(10,2),",
						"          amountPayed as decimal(10,2),",
						"          amountPending as decimal(10,2),",
						"          amountCanceled as decimal(10,2),",
						"          externalId as string,",
						"          amountRefunded as decimal(10,2),",
						"          invoiceSummary as string,",
						"          eventCalendar_guid as string,",
						"          passDetail_guid as string,",
						"          paymentCostCenter_guid as string,",
						"          organization_guid as string,",
						"          venue_guid as string,",
						"          olapUpdateTimestamp as date,",
						"          row_id as string,",
						"          operationType as string,",
						"          operationTimestamp as timestamp",
						"     ),",
						"     format: 'parquet',",
						"     partitionFileNames:['booking_historical.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SinkHistorical"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida2_Atomic_DELETE_Booking_Complete')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Complete_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceExistingContent"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkTemp"
						}
					],
					"transformations": [
						{
							"name": "FilterOutDeletedRecord"
						}
					],
					"scriptLines": [
						"parameters{",
						"     row_id as string",
						"}",
						"source(output(",
						"          guid_pk as string,",
						"          reservation_progressiveCode as string,",
						"          reservation_code as string,",
						"          reservation_status as integer,",
						"          invoiceRequired as string,",
						"          customer as decimal(10,2),",
						"          visitDate as date,",
						"          reservationPayment_guid as string,",
						"          parentPayment_guid as string,",
						"          sliced as string,",
						"          reservation_guid as string,",
						"          group_guid as string,",
						"          group_label as string,",
						"          group_email as string,",
						"          paymentCode as string,",
						"          paymentCondition as decimal(10,2),",
						"          reservation_amount as decimal(10,2),",
						"          reservation_amountTax as decimal(10,2),",
						"          status as integer,",
						"          status_text as string,",
						"          stamp as string,",
						"          notes as string,",
						"          transactionType as string,",
						"          transactionType_text as string,",
						"          paymentLimitDate as date,",
						"          paymentDate as date,",
						"          refund as string,",
						"          refunded as string,",
						"          convention_label as string,",
						"          receiptCode as string,",
						"          insertTimestamp as date,",
						"          updateTimestamp as date,",
						"          owner as string,",
						"          owner_text as string,",
						"          sessionId as string,",
						"          terminal_label as string,",
						"          terminalGroup_label as string,",
						"          gateway_guid as string,",
						"          gateway_label as string,",
						"          transactionID as string,",
						"          bankAccount_guid as string,",
						"          bankAccount_label as string,",
						"          channel_guid as string,",
						"          channel_label as string,",
						"          channelType as string,",
						"          detail_guid as string,",
						"          extra_guid as string,",
						"          priceList as string,",
						"          event as string,",
						"          detailType as string,",
						"          detail_text as string,",
						"          detail_label as string,",
						"          detail_count as integer,",
						"          paymentDetail_guid as string,",
						"          detail_payingPartecipants as integer,",
						"          detail_quantity as integer,",
						"          tickets_quantity as integer,",
						"          pax_quantity as integer,",
						"          costCenter_guid as string,",
						"          costCenter_label as string,",
						"          object_receipt as integer,",
						"          object_taxCode as string,",
						"          object_taxNotes as string,",
						"          object_amount as decimal(10,2),",
						"          object_taxPercentage as decimal(10,2),",
						"          amount as decimal(10,2),",
						"          amountNet as decimal(10,2),",
						"          amountPresale as decimal(10,2),",
						"          amountSold as decimal(10,2),",
						"          amountPayed as decimal(10,2),",
						"          amountPending as decimal(10,2),",
						"          amountCanceled as decimal(10,2),",
						"          externalId as string,",
						"          amountRefunded as decimal(10,2),",
						"          invoiceSummary as string,",
						"          eventCalendar_guid as string,",
						"          passDetail_guid as string,",
						"          paymentCostCenter_guid as string,",
						"          organization_guid as string,",
						"          venue_guid as string,",
						"          olapUpdateTimestamp as date,",
						"          row_id as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceExistingContent",
						"SourceExistingContent filter(row_id != $row_id) ~> FilterOutDeletedRecord",
						"FilterOutDeletedRecord sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['temp_delete_complete.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SinkTemp"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida2_Atomic_DELETE_Booking_Summary')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Summary_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceExistingContent"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkTemp"
						}
					],
					"transformations": [
						{
							"name": "FilterOutDeletedRecord"
						}
					],
					"scriptLines": [
						"parameters{",
						"     row_id as string",
						"}",
						"source(output(",
						"          row_id as string,",
						"          reservation_code as string,",
						"          priceList as string,",
						"          channel_label as string,",
						"          pax_quantity as integer,",
						"          insertTimestamp as date,",
						"          updateTimestamp as date,",
						"          reservation_amount as decimal(10,2),",
						"          visitDate as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceExistingContent",
						"SourceExistingContent filter(row_id != $row_id) ~> FilterOutDeletedRecord",
						"FilterOutDeletedRecord sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['temp_delete_summary.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SinkTemp"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida2_Atomic_LOOKUP_Historical')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Historical_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceHistorical"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkTemp"
						}
					],
					"transformations": [
						{
							"name": "FilterByRowId"
						},
						{
							"name": "SelectRequiredFields"
						}
					],
					"scriptLines": [
						"parameters{",
						"     row_id as string",
						"}",
						"source(output(",
						"          guid_pk as string,",
						"          reservation_progressiveCode as string,",
						"          reservation_code as string,",
						"          reservation_status as integer,",
						"          invoiceRequired as string,",
						"          customer as decimal(10,2),",
						"          visitDate as date,",
						"          reservationPayment_guid as string,",
						"          parentPayment_guid as string,",
						"          sliced as string,",
						"          reservation_guid as string,",
						"          group_guid as string,",
						"          group_label as string,",
						"          group_email as string,",
						"          paymentCode as string,",
						"          paymentCondition as decimal(10,2),",
						"          reservation_amount as decimal(10,2),",
						"          reservation_amountTax as decimal(10,2),",
						"          status as integer,",
						"          status_text as string,",
						"          stamp as string,",
						"          notes as string,",
						"          transactionType as string,",
						"          transactionType_text as string,",
						"          paymentLimitDate as date,",
						"          paymentDate as date,",
						"          refund as string,",
						"          refunded as string,",
						"          convention_label as string,",
						"          receiptCode as decimal(10,2),",
						"          insertTimestamp as date,",
						"          updateTimestamp as date,",
						"          owner as string,",
						"          owner_text as string,",
						"          sessionId as string,",
						"          terminal_label as string,",
						"          terminalGroup_label as string,",
						"          gateway_guid as string,",
						"          gateway_label as string,",
						"          transactionID as string,",
						"          bankAccount_guid as string,",
						"          bankAccount_label as string,",
						"          channel_guid as string,",
						"          channel_label as string,",
						"          channelType as string,",
						"          detail_guid as string,",
						"          extra_guid as string,",
						"          priceList as string,",
						"          event as string,",
						"          detailType as string,",
						"          detail_text as string,",
						"          detail_label as string,",
						"          detail_count as integer,",
						"          paymentDetail_guid as string,",
						"          detail_payingPartecipants as integer,",
						"          detail_quantity as integer,",
						"          tickets_quantity as integer,",
						"          pax_quantity as integer,",
						"          costCenter_guid as string,",
						"          costCenter_label as string,",
						"          object_receipt as integer,",
						"          object_taxCode as string,",
						"          object_taxNotes as string,",
						"          object_amount as decimal(10,2),",
						"          object_taxPercentage as decimal(10,2),",
						"          amount as decimal(10,2),",
						"          amountNet as decimal(10,2),",
						"          amountPresale as decimal(10,2),",
						"          amountSold as decimal(10,2),",
						"          amountPayed as decimal(10,2),",
						"          amountPending as decimal(10,2),",
						"          amountCanceled as decimal(10,2),",
						"          externalId as string,",
						"          amountRefunded as decimal(10,2),",
						"          invoiceSummary as decimal(10,2),",
						"          eventCalendar_guid as string,",
						"          passDetail_guid as string,",
						"          paymentCostCenter_guid as string,",
						"          organization_guid as string,",
						"          venue_guid as string,",
						"          olapUpdateTimestamp as date,",
						"          row_id as string,",
						"          operationType as string,",
						"          operationTimestamp as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceHistorical",
						"SourceHistorical filter(row_id == $row_id) ~> FilterByRowId",
						"FilterByRowId select(mapColumn(",
						"          each(match(true()))",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectRequiredFields",
						"SelectRequiredFields sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['temp_lookup_historical.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SinkTemp"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida2_Atomic_LOOKUP_Summary')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Summary_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceSummaryFile"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkTemp"
						}
					],
					"transformations": [
						{
							"name": "FilterByRowId"
						},
						{
							"name": "SelectLookupFields"
						}
					],
					"scriptLines": [
						"parameters{",
						"     row_id as string",
						"}",
						"source(output(",
						"          row_id as string,",
						"          reservation_code as string,",
						"          priceList as string,",
						"          channel_label as string,",
						"          pax_quantity as integer,",
						"          insertTimestamp as date,",
						"          updateTimestamp as date,",
						"          reservation_amount as decimal(10,2),",
						"          visitDate as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceSummaryFile",
						"SourceSummaryFile filter(row_id == $row_id) ~> FilterByRowId",
						"FilterByRowId select(mapColumn(",
						"          row_id,",
						"          reservation_code,",
						"          visitDate,",
						"          updateTimestamp,",
						"          reservation_amount,",
						"          pax_quantity",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectLookupFields",
						"SelectLookupFields sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['temp_lookup_summary.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SinkTemp"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida2_Atomic_UPDATE_Booking_Complete')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "VFD_Big_Data_DL",
								"type": "LinkedServiceReference"
							},
							"name": "DummySource"
						},
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Complete_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceExistingContent"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkTemp"
						}
					],
					"transformations": [
						{
							"name": "CreateNewRecord"
						},
						{
							"name": "SelectNewColumns"
						},
						{
							"name": "FilterOutOldRecord"
						},
						{
							"name": "UnionRecords"
						}
					],
					"scriptLines": [
						"parameters{",
						"     guid_pk as string,",
						"     reservation_progressiveCode as string,",
						"     reservation_code as string,",
						"     reservation_status as integer,",
						"     invoiceRequired as string,",
						"     customer as decimal(10,2),",
						"     visitDate as string,",
						"     reservationPayment_guid as string,",
						"     parentPayment_guid as string,",
						"     sliced as string,",
						"     reservation_guid as string,",
						"     group_guid as string,",
						"     group_label as string,",
						"     group_email as string,",
						"     paymentCode as string,",
						"     paymentCondition as decimal(10,2),",
						"     reservation_amount as decimal(10,2),",
						"     reservation_amountTax as decimal(10,2),",
						"     status as integer,",
						"     status_text as string,",
						"     stamp as string,",
						"     notes as string,",
						"     transactionType as string,",
						"     transactionType_text as string,",
						"     paymentLimitDate as string,",
						"     paymentDate as string,",
						"     refund as string,",
						"     refunded as string,",
						"     convention_label as string,",
						"     receiptCode as string,",
						"     insertTimestamp as string,",
						"     updateTimestamp as string,",
						"     owner as string,",
						"     owner_text as string,",
						"     sessionId as string,",
						"     terminal_label as string,",
						"     terminalGroup_label as string,",
						"     gateway_guid as string,",
						"     gateway_label as string,",
						"     transactionID as string,",
						"     bankAccount_guid as string,",
						"     bankAccount_label as string,",
						"     channel_guid as string,",
						"     channel_label as string,",
						"     channelType as string,",
						"     detail_guid as string,",
						"     extra_guid as string,",
						"     priceList as string,",
						"     event as string,",
						"     detailType as string,",
						"     detail_text as string,",
						"     detail_label as string,",
						"     detail_count as integer,",
						"     paymentDetail_guid as string,",
						"     detail_payingPartecipants as integer,",
						"     detail_quantity as integer,",
						"     tickets_quantity as integer,",
						"     pax_quantity as integer,",
						"     costCenter_guid as string,",
						"     costCenter_label as string,",
						"     object_receipt as integer,",
						"     object_taxCode as string,",
						"     object_taxNotes as string,",
						"     object_amount as decimal(10,2),",
						"     object_taxPercentage as decimal(10,2),",
						"     amount as decimal(10,2),",
						"     amountNet as decimal(10,2),",
						"     amountPresale as decimal(10,2),",
						"     amountSold as decimal(10,2),",
						"     amountPayed as decimal(10,2),",
						"     amountPending as decimal(10,2),",
						"     amountCanceled as decimal(10,2),",
						"     externalId as string,",
						"     amountRefunded as decimal(10,2),",
						"     invoiceSummary as string,",
						"     eventCalendar_guid as string,",
						"     passDetail_guid as string,",
						"     paymentCostCenter_guid as string,",
						"     organization_guid as string,",
						"     venue_guid as string,",
						"     olapUpdateTimestamp as string,",
						"     row_id as string",
						"}",
						"source(output(",
						"          dummy as integer",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'dummy',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     data: 'dummy\\n1') ~> DummySource",
						"source(output(",
						"          guid_pk as string,",
						"          reservation_progressiveCode as string,",
						"          reservation_code as string,",
						"          reservation_status as integer,",
						"          invoiceRequired as string,",
						"          customer as decimal(10,2),",
						"          visitDate as date,",
						"          reservationPayment_guid as string,",
						"          parentPayment_guid as string,",
						"          sliced as string,",
						"          reservation_guid as string,",
						"          group_guid as string,",
						"          group_label as string,",
						"          group_email as string,",
						"          paymentCode as string,",
						"          paymentCondition as decimal(10,2),",
						"          reservation_amount as decimal(10,2),",
						"          reservation_amountTax as decimal(10,2),",
						"          status as integer,",
						"          status_text as string,",
						"          stamp as string,",
						"          notes as string,",
						"          transactionType as string,",
						"          transactionType_text as string,",
						"          paymentLimitDate as date,",
						"          paymentDate as date,",
						"          refund as string,",
						"          refunded as string,",
						"          convention_label as string,",
						"          receiptCode as string,",
						"          insertTimestamp as date,",
						"          updateTimestamp as date,",
						"          owner as string,",
						"          owner_text as string,",
						"          sessionId as string,",
						"          terminal_label as string,",
						"          terminalGroup_label as string,",
						"          gateway_guid as string,",
						"          gateway_label as string,",
						"          transactionID as string,",
						"          bankAccount_guid as string,",
						"          bankAccount_label as string,",
						"          channel_guid as string,",
						"          channel_label as string,",
						"          channelType as string,",
						"          detail_guid as string,",
						"          extra_guid as string,",
						"          priceList as string,",
						"          event as string,",
						"          detailType as string,",
						"          detail_text as string,",
						"          detail_label as string,",
						"          detail_count as integer,",
						"          paymentDetail_guid as string,",
						"          detail_payingPartecipants as integer,",
						"          detail_quantity as integer,",
						"          tickets_quantity as integer,",
						"          pax_quantity as integer,",
						"          costCenter_guid as string,",
						"          costCenter_label as string,",
						"          object_receipt as integer,",
						"          object_taxCode as string,",
						"          object_taxNotes as string,",
						"          object_amount as decimal(10,2),",
						"          object_taxPercentage as decimal(10,2),",
						"          amount as decimal(10,2),",
						"          amountNet as decimal(10,2),",
						"          amountPresale as decimal(10,2),",
						"          amountSold as decimal(10,2),",
						"          amountPayed as decimal(10,2),",
						"          amountPending as decimal(10,2),",
						"          amountCanceled as decimal(10,2),",
						"          externalId as string,",
						"          amountRefunded as decimal(10,2),",
						"          invoiceSummary as string,",
						"          eventCalendar_guid as string,",
						"          passDetail_guid as string,",
						"          paymentCostCenter_guid as string,",
						"          organization_guid as string,",
						"          venue_guid as string,",
						"          olapUpdateTimestamp as date,",
						"          row_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceExistingContent",
						"DummySource derive(guid_pk = $guid_pk,",
						"          reservation_progressiveCode = $reservation_progressiveCode,",
						"          reservation_code = $reservation_code,",
						"          reservation_status = $reservation_status,",
						"          invoiceRequired = $invoiceRequired,",
						"          customer = $customer,",
						"          visitDate = toDate($visitDate, 'yyyy-MM-dd'),",
						"          reservationPayment_guid = $reservationPayment_guid,",
						"          parentPayment_guid = $parentPayment_guid,",
						"          sliced = $sliced,",
						"          reservation_guid = $reservation_guid,",
						"          group_guid = $group_guid,",
						"          group_label = $group_label,",
						"          group_email = $group_email,",
						"          paymentCode = $paymentCode,",
						"          paymentCondition = $paymentCondition,",
						"          reservation_amount = $reservation_amount,",
						"          reservation_amountTax = $reservation_amountTax,",
						"          status = $status,",
						"          status_text = $status_text,",
						"          stamp = $stamp,",
						"          notes = $notes,",
						"          transactionType = $transactionType,",
						"          transactionType_text = $transactionType_text,",
						"          paymentLimitDate = toDate($paymentLimitDate, 'yyyy-MM-dd'),",
						"          paymentDate = toDate($paymentDate, 'yyyy-MM-dd'),",
						"          refund = $refund,",
						"          refunded = $refunded,",
						"          convention_label = $convention_label,",
						"          receiptCode = $receiptCode,",
						"          insertTimestamp = toDate($insertTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          updateTimestamp = toDate($updateTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          owner = $owner,",
						"          owner_text = $owner_text,",
						"          sessionId = $sessionId,",
						"          terminal_label = $terminal_label,",
						"          terminalGroup_label = $terminalGroup_label,",
						"          gateway_guid = $gateway_guid,",
						"          gateway_label = $gateway_label,",
						"          transactionID = $transactionID,",
						"          bankAccount_guid = $bankAccount_guid,",
						"          bankAccount_label = $bankAccount_label,",
						"          channel_guid = $channel_guid,",
						"          channel_label = $channel_label,",
						"          channelType = $channelType,",
						"          detail_guid = $detail_guid,",
						"          extra_guid = $extra_guid,",
						"          priceList = $priceList,",
						"          event = $event,",
						"          detailType = $detailType,",
						"          detail_text = $detail_text,",
						"          detail_label = $detail_label,",
						"          detail_count = $detail_count,",
						"          paymentDetail_guid = $paymentDetail_guid,",
						"          detail_payingPartecipants = $detail_payingPartecipants,",
						"          detail_quantity = $detail_quantity,",
						"          tickets_quantity = $tickets_quantity,",
						"          pax_quantity = $pax_quantity,",
						"          costCenter_guid = $costCenter_guid,",
						"          costCenter_label = $costCenter_label,",
						"          object_receipt = $object_receipt,",
						"          object_taxCode = $object_taxCode,",
						"          object_taxNotes = $object_taxNotes,",
						"          object_amount = $object_amount,",
						"          object_taxPercentage = $object_taxPercentage,",
						"          amount = $amount,",
						"          amountNet = $amountNet,",
						"          amountPresale = $amountPresale,",
						"          amountSold = $amountSold,",
						"          amountPayed = $amountPayed,",
						"          amountPending = $amountPending,",
						"          amountCanceled = $amountCanceled,",
						"          externalId = $externalId,",
						"          amountRefunded = $amountRefunded,",
						"          invoiceSummary = $invoiceSummary,",
						"          eventCalendar_guid = $eventCalendar_guid,",
						"          passDetail_guid = $passDetail_guid,",
						"          paymentCostCenter_guid = $paymentCostCenter_guid,",
						"          organization_guid = $organization_guid,",
						"          venue_guid = $venue_guid,",
						"          olapUpdateTimestamp = toDate($olapUpdateTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          row_id = $row_id) ~> CreateNewRecord",
						"CreateNewRecord select(mapColumn(",
						"          guid_pk,",
						"          reservation_progressiveCode,",
						"          reservation_code,",
						"          reservation_status,",
						"          invoiceRequired,",
						"          customer,",
						"          visitDate,",
						"          reservationPayment_guid,",
						"          parentPayment_guid,",
						"          sliced,",
						"          reservation_guid,",
						"          group_guid,",
						"          group_label,",
						"          group_email,",
						"          paymentCode,",
						"          paymentCondition,",
						"          reservation_amount,",
						"          reservation_amountTax,",
						"          status,",
						"          status_text,",
						"          stamp,",
						"          notes,",
						"          transactionType,",
						"          transactionType_text,",
						"          paymentLimitDate,",
						"          paymentDate,",
						"          refund,",
						"          refunded,",
						"          convention_label,",
						"          receiptCode,",
						"          insertTimestamp,",
						"          updateTimestamp,",
						"          owner,",
						"          owner_text,",
						"          sessionId,",
						"          terminal_label,",
						"          terminalGroup_label,",
						"          gateway_guid,",
						"          gateway_label,",
						"          transactionID,",
						"          bankAccount_guid,",
						"          bankAccount_label,",
						"          channel_guid,",
						"          channel_label,",
						"          channelType,",
						"          detail_guid,",
						"          extra_guid,",
						"          priceList,",
						"          event,",
						"          detailType,",
						"          detail_text,",
						"          detail_label,",
						"          detail_count,",
						"          paymentDetail_guid,",
						"          detail_payingPartecipants,",
						"          detail_quantity,",
						"          tickets_quantity,",
						"          pax_quantity,",
						"          costCenter_guid,",
						"          costCenter_label,",
						"          object_receipt,",
						"          object_taxCode,",
						"          object_taxNotes,",
						"          object_amount,",
						"          object_taxPercentage,",
						"          amount,",
						"          amountNet,",
						"          amountPresale,",
						"          amountSold,",
						"          amountPayed,",
						"          amountPending,",
						"          amountCanceled,",
						"          externalId,",
						"          amountRefunded,",
						"          invoiceSummary,",
						"          eventCalendar_guid,",
						"          passDetail_guid,",
						"          paymentCostCenter_guid,",
						"          organization_guid,",
						"          venue_guid,",
						"          olapUpdateTimestamp,",
						"          row_id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectNewColumns",
						"SourceExistingContent filter(row_id != $row_id) ~> FilterOutOldRecord",
						"FilterOutOldRecord, SelectNewColumns union(byName: true)~> UnionRecords",
						"UnionRecords sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['temp_update_complete.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SinkTemp"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida2_Atomic_UPDATE_Booking_Summary')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "VFD_Big_Data_DL",
								"type": "LinkedServiceReference"
							},
							"name": "DummySource"
						},
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Summary_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceExistingContent"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkTemp"
						}
					],
					"transformations": [
						{
							"name": "CreateNewSummaryRecord"
						},
						{
							"name": "SelectSummaryFields"
						},
						{
							"name": "FilterOutOldRecord"
						},
						{
							"name": "UnionRecords"
						}
					],
					"scriptLines": [
						"parameters{",
						"     row_id as string,",
						"     reservation_code as string,",
						"     priceList as string,",
						"     channel_label as string,",
						"     pax_quantity as integer,",
						"     insertTimestamp as string,",
						"     updateTimestamp as string,",
						"     reservation_amount as decimal(10,2),",
						"     visitDate as string",
						"}",
						"source(output(",
						"          dummy as integer",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'dummy',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     data: 'dummy\\n1') ~> DummySource",
						"source(output(",
						"          row_id as string,",
						"          reservation_code as string,",
						"          priceList as string,",
						"          channel_label as string,",
						"          pax_quantity as integer,",
						"          insertTimestamp as date,",
						"          updateTimestamp as date,",
						"          reservation_amount as decimal(10,2),",
						"          visitDate as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceExistingContent",
						"DummySource derive(row_id = $row_id,",
						"          reservation_code = $reservation_code,",
						"          priceList = $priceList,",
						"          channel_label = $channel_label,",
						"          pax_quantity = $pax_quantity,",
						"          insertTimestamp = toDate($insertTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          updateTimestamp = toDate($updateTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          reservation_amount = $reservation_amount,",
						"          visitDate = toDate($visitDate, 'yyyy-MM-dd')) ~> CreateNewSummaryRecord",
						"CreateNewSummaryRecord select(mapColumn(",
						"          row_id,",
						"          reservation_code,",
						"          priceList,",
						"          channel_label,",
						"          pax_quantity,",
						"          insertTimestamp,",
						"          updateTimestamp,",
						"          reservation_amount,",
						"          visitDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSummaryFields",
						"SourceExistingContent filter(row_id != $row_id) ~> FilterOutOldRecord",
						"FilterOutOldRecord, SelectSummaryFields union(byName: true)~> UnionRecords",
						"UnionRecords sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['temp_update_summary.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SinkTemp"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida_Bookings_Processed_Curated_Daily')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Dataflow per filtrare colonne dal parquet processed e scrivere su un file fisso",
				"folder": {
					"name": "Mida/Bookings"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Processed_Mida_Bookings_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceProcessed"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkCurated"
						}
					],
					"transformations": [
						{
							"name": "TransformData"
						},
						{
							"name": "SelectFields"
						}
					],
					"scriptLines": [
						"parameters{",
						"     folderPath as string (\"folder\"),",
						"     fileName as string (\"file\")",
						"}",
						"source(output(",
						"          guid_pk as string,",
						"          reservation_progressiveCode as string,",
						"          reservation_code as string,",
						"          reservation_status as integer,",
						"          invoiceRequired as string,",
						"          customer as decimal(10,2),",
						"          visitDate as date,",
						"          reservationPayment_guid as string,",
						"          parentPayment_guid as string,",
						"          sliced as string,",
						"          reservation_guid as string,",
						"          group_guid as string,",
						"          group_label as string,",
						"          group_email as string,",
						"          paymentCode as string,",
						"          paymentCondition as decimal(10,2),",
						"          reservation_amount as decimal(10,2),",
						"          reservation_amountTax as decimal(10,2),",
						"          status as integer,",
						"          status_text as string,",
						"          stamp as string,",
						"          notes as decimal(10,2),",
						"          transactionType as string,",
						"          transactionType_text as string,",
						"          paymentLimitDate as date,",
						"          paymentDate as date,",
						"          refund as string,",
						"          refunded as string,",
						"          convention_label as string,",
						"          receiptCode as decimal(10,2),",
						"          insertTimestamp as date,",
						"          updateTimestamp as date,",
						"          owner as string,",
						"          owner_text as string,",
						"          sessionId as string,",
						"          terminal_label as decimal(10,2),",
						"          terminalGroup_label as decimal(10,2),",
						"          gateway_guid as string,",
						"          gateway_label as string,",
						"          transactionID as string,",
						"          bankAccount_guid as decimal(10,2),",
						"          bankAccount_label as decimal(10,2),",
						"          channel_guid as string,",
						"          channel_label as string,",
						"          channelType as string,",
						"          detail_guid as string,",
						"          extra_guid as decimal(10,2),",
						"          priceList as string,",
						"          event as string,",
						"          detailType as string,",
						"          detail_text as string,",
						"          detail_label as string,",
						"          detail_count as integer,",
						"          paymentDetail_guid as string,",
						"          detail_payingPartecipants as integer,",
						"          detail_quantity as integer,",
						"          tickets_quantity as integer,",
						"          pax_quantity as integer,",
						"          costCenter_guid as string,",
						"          costCenter_label as string,",
						"          object_receipt as integer,",
						"          object_taxCode as string,",
						"          object_taxNotes as string,",
						"          object_amount as decimal(10,2),",
						"          object_taxPercentage as decimal(10,2),",
						"          amount as decimal(10,2),",
						"          amountNet as decimal(10,2),",
						"          amountPresale as decimal(10,2),",
						"          amountSold as decimal(10,2),",
						"          amountPayed as decimal(10,2),",
						"          amountPending as decimal(10,2),",
						"          amountCanceled as decimal(10,2),",
						"          externalId as string,",
						"          amountRefunded as decimal(10,2),",
						"          invoiceSummary as decimal(10,2),",
						"          eventCalendar_guid as string,",
						"          passDetail_guid as decimal(10,2),",
						"          paymentCostCenter_guid as decimal(10,2),",
						"          organization_guid as string,",
						"          venue_guid as string,",
						"          olapUpdateTimestamp as date,",
						"          row_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     folderPath: folderPath,",
						"     fileName: fileName) ~> SourceProcessed",
						"SourceProcessed derive(adjusted_pax_quantity = iif(status == 6 || status == 7 || status == 101, pax_quantity * -1, pax_quantity),",
						"          adjusted_tickets_quantity = iif(status == 6 || status == 7 || status == 101, tickets_quantity * -1, tickets_quantity),",
						"          adjusted_amount = iif(status == 6 || status == 7 || status == 101, amount * -1, amount)) ~> TransformData",
						"TransformData select(mapColumn(",
						"          pax_quantity = adjusted_pax_quantity,",
						"          priceList,",
						"          tickets_quantity = adjusted_tickets_quantity,",
						"          amount = adjusted_amount,",
						"          visitDate,",
						"          channel_label,",
						"          transactionType_text,",
						"          insertTimestamp,",
						"          paymentDate,",
						"          secondaryVisitDate = visitDate,",
						"          status,",
						"          status_text",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> SelectFields",
						"SelectFields sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['VFD_DFL_Mida_Bookings_Processed_Curated_Daily_output.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     partitionBy('hash', 1),",
						"     fileName: 'VFD_DFL_Mida_Sales_Curated_output.parquet') ~> SinkCurated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida_Seals_Processed_Curated_Daily')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Dataflow per selezionare campi rilevanti dal parquet processed",
				"folder": {
					"name": "Mida/Seals"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Processed_Mida_Seals_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceProcessed"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Seals_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkCurated"
						}
					],
					"transformations": [
						{
							"name": "SelectFields"
						}
					],
					"scriptLines": [
						"source(output(",
						"          sealCode as string,",
						"          reservationCode as string,",
						"          TicketLabel as string,",
						"          EventLabel as string,",
						"          List as string,",
						"          externalCode as string,",
						"          processing_date as timestamp,",
						"          data_source as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceProcessed",
						"SourceProcessed select(mapColumn(",
						"          sealCode,",
						"          reservationCode,",
						"          ticketLabel = TicketLabel,",
						"          eventLabel = EventLabel,",
						"          list = List,",
						"          externalCode,",
						"          processing_date",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> SelectFields",
						"SelectFields sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['VFD_DFL_Mida_Seals_Processed_Curated_Daily_output.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     partitionBy('hash', 1),",
						"     compressionCodec: 'snappy') ~> SinkCurated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida_Seals_Raw_Processed')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Dataflow per convertire Excel Seals in Parquet con conversioni di tipo",
				"folder": {
					"name": "Mida/Seals"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Raw_Mida_Seals_Excel",
								"type": "DatasetReference"
							},
							"name": "SourceExcel"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Processed_Mida_Seals_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkParquet",
							"rejectedDataLinkedService": {
								"referenceName": "VFD_Big_Data_DL",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "dataTypeConversions"
						}
					],
					"scriptLines": [
						"source(output(",
						"          sealCode as string,",
						"          reservationCode as string,",
						"          TicketLabel as string,",
						"          EventLabel as string,",
						"          List as string,",
						"          externalCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourceExcel",
						"SourceExcel derive(processing_date = currentUTC(),",
						"          data_source = 'mida_seals') ~> dataTypeConversions",
						"dataTypeConversions sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['VFD_DFL_Mida_Seals_Raw_Processed_output.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     partitionBy('hash', 1),",
						"     compressionCodec: 'snappy') ~> SinkParquet"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida_Users_Processed_Curated_Daily')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Dataflow per filtrare colonne dal parquet processed e scrivere su un file fisso",
				"folder": {
					"name": "Mida/Users"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Processed_Mida_Bookings_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceProcessed"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Users_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkCurated"
						}
					],
					"transformations": [
						{
							"name": "SelectFields"
						}
					],
					"scriptLines": [
						"parameters{",
						"     folderPath as string (\"folder\"),",
						"     fileName as string (\"file\")",
						"}",
						"source(output(",
						"          guid_pk as string,",
						"          reservation_progressiveCode as string,",
						"          reservation_code as string,",
						"          reservation_status as integer,",
						"          invoiceRequired as string,",
						"          customer as decimal(10,2),",
						"          visitDate as date,",
						"          reservationPayment_guid as string,",
						"          parentPayment_guid as string,",
						"          sliced as string,",
						"          reservation_guid as string,",
						"          group_guid as string,",
						"          group_label as string,",
						"          group_email as string,",
						"          paymentCode as string,",
						"          paymentCondition as decimal(10,2),",
						"          reservation_amount as decimal(10,2),",
						"          reservation_amountTax as decimal(10,2),",
						"          status as integer,",
						"          status_text as string,",
						"          stamp as string,",
						"          notes as decimal(10,2),",
						"          transactionType as string,",
						"          transactionType_text as string,",
						"          paymentLimitDate as date,",
						"          paymentDate as date,",
						"          refund as string,",
						"          refunded as string,",
						"          convention_label as string,",
						"          receiptCode as decimal(10,2),",
						"          insertTimestamp as date,",
						"          updateTimestamp as date,",
						"          owner as string,",
						"          owner_text as string,",
						"          sessionId as string,",
						"          terminal_label as decimal(10,2),",
						"          terminalGroup_label as decimal(10,2),",
						"          gateway_guid as string,",
						"          gateway_label as string,",
						"          transactionID as string,",
						"          bankAccount_guid as decimal(10,2),",
						"          bankAccount_label as decimal(10,2),",
						"          channel_guid as string,",
						"          channel_label as string,",
						"          channelType as string,",
						"          detail_guid as string,",
						"          extra_guid as decimal(10,2),",
						"          priceList as string,",
						"          event as string,",
						"          detailType as string,",
						"          detail_text as string,",
						"          detail_label as string,",
						"          detail_count as integer,",
						"          paymentDetail_guid as string,",
						"          detail_payingPartecipants as integer,",
						"          detail_quantity as integer,",
						"          tickets_quantity as integer,",
						"          pax_quantity as integer,",
						"          costCenter_guid as string,",
						"          costCenter_label as string,",
						"          object_receipt as integer,",
						"          object_taxCode as string,",
						"          object_taxNotes as string,",
						"          object_amount as decimal(10,2),",
						"          object_taxPercentage as decimal(10,2),",
						"          amount as decimal(10,2),",
						"          amountNet as decimal(10,2),",
						"          amountPresale as decimal(10,2),",
						"          amountSold as decimal(10,2),",
						"          amountPayed as decimal(10,2),",
						"          amountPending as decimal(10,2),",
						"          amountCanceled as decimal(10,2),",
						"          externalId as string,",
						"          amountRefunded as decimal(10,2),",
						"          invoiceSummary as decimal(10,2),",
						"          eventCalendar_guid as string,",
						"          passDetail_guid as decimal(10,2),",
						"          paymentCostCenter_guid as decimal(10,2),",
						"          organization_guid as string,",
						"          venue_guid as string,",
						"          olapUpdateTimestamp as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     folderPath: folderPath,",
						"     fileName: fileName) ~> SourceProcessed",
						"SourceProcessed select(mapColumn(",
						"          reservation_progressiveCode,",
						"          reservation_code,",
						"          group_label,",
						"          group_email",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> SelectFields",
						"SelectFields sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['VFD_DFL_Mida_Bookings_Processed_Curated_Daily_output.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     partitionBy('hash', 1),",
						"     fileName: 'VFD_DFL_Mida_Sales_Curated_output.parquet') ~> SinkCurated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida_Validations_Processed_Curated_Daily')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Dataflow per selezionare campi rilevanti dal parquet processed",
				"folder": {
					"name": "Mida/Validations"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Processed_Mida_Validations_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceProcessed"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Validations_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkCurated"
						}
					],
					"transformations": [
						{
							"name": "SelectFields"
						}
					],
					"scriptLines": [
						"source(output(",
						"          event_guid as string,",
						"          siae as integer,",
						"          seal as string,",
						"          reservationCode as string,",
						"          inGateTimestamp as timestamp,",
						"          entranceLabel as string,",
						"          passCode as string,",
						"          externalCode as string,",
						"          processing_date as timestamp,",
						"          data_source as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceProcessed",
						"SourceProcessed select(mapColumn(",
						"          event_guid,",
						"          siae,",
						"          seal,",
						"          reservationCode,",
						"          inGateTimestamp,",
						"          entranceLabel,",
						"          passCode,",
						"          externalCode,",
						"          processing_date,",
						"          data_source",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> SelectFields",
						"SelectFields sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['VFD_DFL_Mida_Validations_Processed_Curated_Daily_output.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     partitionBy('hash', 1),",
						"     compressionCodec: 'snappy') ~> SinkCurated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida_Validations_Raw_Processed')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Dataflow per convertire Excel Validations in Parquet con conversioni di tipo",
				"folder": {
					"name": "Mida/Validations"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Raw_Mida_Validations_Excel",
								"type": "DatasetReference"
							},
							"name": "SourceExcel"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Processed_Mida_Validations_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkParquet",
							"rejectedDataLinkedService": {
								"referenceName": "VFD_Big_Data_DL",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "dataTypeConversions"
						}
					],
					"scriptLines": [
						"source(output(",
						"          event_guid as string,",
						"          siae as integer,",
						"          seal as string,",
						"          reservationCode as string,",
						"          inGateTimestamp as string,",
						"          entranceLabel as string,",
						"          passCode as string,",
						"          externalCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourceExcel",
						"SourceExcel derive(processing_date = currentUTC(),",
						"          data_source = 'mida_validations') ~> dataTypeConversions",
						"dataTypeConversions sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['VFD_DFL_Mida_Validations_Raw_Processed_output.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     partitionBy('hash', 1),",
						"     compressionCodec: 'snappy') ~> SinkParquet"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Test_Single_Parameter')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Test"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Processed_Mida_Bookings_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceProcessed"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkTest"
						}
					],
					"transformations": [
						{
							"name": "FilterByParam"
						}
					],
					"scriptLines": [
						"parameters{",
						"     test_param as string",
						"}",
						"source(output(",
						"          guid_pk as string,",
						"          reservation_progressiveCode as string,",
						"          reservation_code as string,",
						"          reservation_status as integer,",
						"          invoiceRequired as string,",
						"          customer as decimal(10,2),",
						"          visitDate as date,",
						"          reservationPayment_guid as string,",
						"          parentPayment_guid as string,",
						"          sliced as string,",
						"          reservation_guid as string,",
						"          group_guid as string,",
						"          group_label as string,",
						"          group_email as string,",
						"          paymentCode as string,",
						"          paymentCondition as decimal(10,2),",
						"          reservation_amount as decimal(10,2),",
						"          reservation_amountTax as decimal(10,2),",
						"          status as integer,",
						"          status_text as string,",
						"          stamp as string,",
						"          notes as decimal(10,2),",
						"          transactionType as string,",
						"          transactionType_text as string,",
						"          paymentLimitDate as date,",
						"          paymentDate as date,",
						"          refund as string,",
						"          refunded as string,",
						"          convention_label as string,",
						"          receiptCode as decimal(10,2),",
						"          insertTimestamp as date,",
						"          updateTimestamp as date,",
						"          owner as string,",
						"          owner_text as string,",
						"          sessionId as string,",
						"          terminal_label as decimal(10,2),",
						"          terminalGroup_label as decimal(10,2),",
						"          gateway_guid as string,",
						"          gateway_label as string,",
						"          transactionID as string,",
						"          bankAccount_guid as decimal(10,2),",
						"          bankAccount_label as decimal(10,2),",
						"          channel_guid as string,",
						"          channel_label as string,",
						"          channelType as string,",
						"          detail_guid as string,",
						"          extra_guid as decimal(10,2),",
						"          priceList as string,",
						"          event as string,",
						"          detailType as string,",
						"          detail_text as string,",
						"          detail_label as string,",
						"          detail_count as integer,",
						"          paymentDetail_guid as string,",
						"          detail_payingPartecipants as integer,",
						"          detail_quantity as integer,",
						"          tickets_quantity as integer,",
						"          pax_quantity as integer,",
						"          costCenter_guid as string,",
						"          costCenter_label as string,",
						"          object_receipt as integer,",
						"          object_taxCode as string,",
						"          object_taxNotes as string,",
						"          object_amount as decimal(10,2),",
						"          object_taxPercentage as decimal(10,2),",
						"          amount as decimal(10,2),",
						"          amountNet as decimal(10,2),",
						"          amountPresale as decimal(10,2),",
						"          amountSold as decimal(10,2),",
						"          amountPayed as decimal(10,2),",
						"          amountPending as decimal(10,2),",
						"          amountCanceled as decimal(10,2),",
						"          externalId as string,",
						"          amountRefunded as decimal(10,2),",
						"          invoiceSummary as decimal(10,2),",
						"          eventCalendar_guid as string,",
						"          passDetail_guid as decimal(10,2),",
						"          paymentCostCenter_guid as decimal(10,2),",
						"          organization_guid as string,",
						"          venue_guid as string,",
						"          olapUpdateTimestamp as date,",
						"          row_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceProcessed",
						"SourceProcessed filter(reservation_code == $test_param) ~> FilterByParam",
						"FilterByParam sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['test_output.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SinkTest"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Weather_Raw_Processed')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Conversione CSV meteo in Parquet senza modifiche",
				"folder": {
					"name": "Visual Crossing/Weather"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Raw_Weather_CSV",
								"type": "DatasetReference"
							},
							"name": "SourceRaw"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Processed_Weather_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkProcessed",
							"rejectedDataLinkedService": {
								"referenceName": "VFD_Big_Data_DL",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "AddProcessingMetadata"
						}
					],
					"scriptLines": [
						"source(output(",
						"          name as string,",
						"          datetime as string,",
						"          tempmax as double,",
						"          tempmin as double,",
						"          temp as double,",
						"          feelslikemax as double,",
						"          feelslikemin as double,",
						"          feelslike as double,",
						"          humidity as double,",
						"          precip as double,",
						"          precipprob as double,",
						"          preciptype as string,",
						"          windgust as double,",
						"          windspeed as double,",
						"          cloudcover as double,",
						"          visibility as double,",
						"          sunset as string,",
						"          conditions as string,",
						"          description as string,",
						"          icon as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourceRaw",
						"SourceRaw derive(processing_date = currentUTC(),",
						"          data_source = 'visual_crossing_api',",
						"          datetime_parsed = toDate(datetime)) ~> AddProcessingMetadata",
						"AddProcessingMetadata sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['VFD_DFL_Weather_Raw_Processed_output.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     partitionBy('hash', 1),",
						"     compressionCodec: 'snappy') ~> SinkProcessed"
					]
				}
			},
			"dependsOn": []
		}
	]
}