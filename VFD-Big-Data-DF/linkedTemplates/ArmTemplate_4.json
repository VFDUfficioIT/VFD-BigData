{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "VFD-Big-Data-DF"
		},
		"VFD_TRG_Weather_API_Daily_properties_VFD_PL_Weather_API_Daily_parameters_location": {
			"type": "string",
			"defaultValue": "Milano"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_MIDA_SQL_Master_Seals')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline madre: scansiona 3 FTP folder, scarica file mancanti, chiama pipeline figlie",
				"activities": [
					{
						"name": "ScanSealsFTP",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Mida_Seals_FTPServer_Folder",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "FtpReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false,
								"useBinaryTransfer": true,
								"disableChunking": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ProcessSealsFiles",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ScanSealsFTP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ScanSealsFTP').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetSealsFileName",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "sealsFileName",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "ParseSealsDate",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetSealsFileName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "sealsDate",
										"value": {
											"value": "@substring(variables('sealsFileName'), 25, 8)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetSealsFolderPath",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "ParseSealsDate",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "sealsFolderPath",
										"value": {
											"value": "@concat('Mida/Seals/', substring(variables('sealsDate'), 0, 4), '/', substring(variables('sealsDate'), 4, 2))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "CheckSealsExists",
									"type": "GetMetadata",
									"dependsOn": [
										{
											"activity": "SetSealsFolderPath",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "VFD_DS_Raw_Mida_Seals_Excel",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": "@variables('sealsFolderPath')",
												"fileName": "@variables('sealsFileName')"
											}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "IfSealsNotExists",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "CheckSealsExists",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(activity('CheckSealsExists').output.exists)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "DownloadSealsFromFTP",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "FtpReadSettings",
															"recursive": false,
															"useBinaryTransfer": true,
															"disableChunking": false
														},
														"formatSettings": {
															"type": "BinaryReadSettings"
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "VFD_DS_Mida_Seals_FTPServer_Binary",
														"type": "DatasetReference",
														"parameters": {
															"fileName": "@variables('sealsFileName')"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "VFD_DS_Raw_Mida_Seals_Binary",
														"type": "DatasetReference",
														"parameters": {
															"folderPath": "@variables('sealsFolderPath')",
															"fileName": "@variables('sealsFileName')"
														}
													}
												]
											}
										]
									}
								},
								{
									"name": "ProcessSealsPipeline",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "IfSealsNotExists",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "VFD_PL_Process_Seals_SQL",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"folderPath": {
												"value": "@variables('sealsFolderPath')",
												"type": "Expression"
											},
											"fileName": {
												"value": "@variables('sealsFileName')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"bookingsFileName": {
						"type": "String"
					},
					"bookingsDate": {
						"type": "String"
					},
					"bookingsFolderPath": {
						"type": "String"
					},
					"sealsFileName": {
						"type": "String"
					},
					"sealsDate": {
						"type": "String"
					},
					"sealsFolderPath": {
						"type": "String"
					},
					"validationsFileName": {
						"type": "String"
					},
					"validationsDate": {
						"type": "String"
					},
					"validationsFolderPath": {
						"type": "String"
					}
				},
				"folder": {
					"name": "MIDA_SQL"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_MIDA_SQL_Master_Validations')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline madre: scansiona 3 FTP folder, scarica file mancanti, chiama pipeline figlie",
				"activities": [
					{
						"name": "ScanValidationsFTP",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Mida_Validations_FTPServer_Folder",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "FtpReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false,
								"useBinaryTransfer": true,
								"disableChunking": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ProcessValidationsFiles",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ScanValidationsFTP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ScanValidationsFTP').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetValidationsFileName",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "validationsFileName",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "ParseValidationsDate",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetValidationsFileName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "validationsDate",
										"value": {
											"value": "@substring(variables('validationsFileName'), 27, 8)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetValidationsFolderPath",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "ParseValidationsDate",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "validationsFolderPath",
										"value": {
											"value": "@concat('Mida/Validations/', substring(variables('validationsDate'), 0, 4), '/', substring(variables('validationsDate'), 4, 2))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "CheckValidationsExists",
									"type": "GetMetadata",
									"dependsOn": [
										{
											"activity": "SetValidationsFolderPath",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "VFD_DS_Raw_Mida_Validations_Excel",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": "@variables('validationsFolderPath')",
												"fileName": "@variables('validationsFileName')"
											}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "IfValidationsNotExists",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "CheckValidationsExists",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(activity('CheckValidationsExists').output.exists)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "DownloadValidationsFromFTP",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "FtpReadSettings",
															"recursive": false,
															"useBinaryTransfer": true,
															"disableChunking": false
														},
														"formatSettings": {
															"type": "BinaryReadSettings"
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "VFD_DS_Mida_Validations_FTPServer_Binary",
														"type": "DatasetReference",
														"parameters": {
															"fileName": "@variables('validationsFileName')"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "VFD_DS_Raw_Mida_Validations_Binary",
														"type": "DatasetReference",
														"parameters": {
															"folderPath": "@variables('validationsFolderPath')",
															"fileName": "@variables('validationsFileName')"
														}
													}
												]
											}
										]
									}
								},
								{
									"name": "ProcessValidationsPipeline",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "IfValidationsNotExists",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "VFD_PL_Process_Validations_SQL",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"folderPath": {
												"value": "@variables('validationsFolderPath')",
												"type": "Expression"
											},
											"fileName": {
												"value": "@variables('validationsFileName')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"bookingsFileName": {
						"type": "String"
					},
					"bookingsDate": {
						"type": "String"
					},
					"bookingsFolderPath": {
						"type": "String"
					},
					"sealsFileName": {
						"type": "String"
					},
					"sealsDate": {
						"type": "String"
					},
					"sealsFolderPath": {
						"type": "String"
					},
					"validationsFileName": {
						"type": "String"
					},
					"validationsDate": {
						"type": "String"
					},
					"validationsFolderPath": {
						"type": "String"
					}
				},
				"folder": {
					"name": "MIDA_SQL"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Weather_Raw_Curated')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline per convertire CSV meteo in Parquet e aggiornare file mensili con ForEach",
				"activities": [
					{
						"name": "Raw to Processed Transformation",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_Weather_Raw_Processed",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceRaw": {
										"folderPath": {
											"value": "@pipeline().parameters.folderPath",
											"type": "Expression"
										},
										"fileName": {
											"value": "@pipeline().parameters.fileName",
											"type": "Expression"
										}
									},
									"SinkProcessed": {
										"folderPath": {
											"value": "@pipeline().parameters.folderPath",
											"type": "Expression"
										},
										"fileName": "VFD_DFL_Weather_Raw_Processed_output.parquet"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					},
					{
						"name": "Copy Raw to Processed",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Raw to Processed Transformation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Processed_Weather_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.folderPath",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_Weather_Raw_Processed_output.parquet"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Processed_Weather_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.folderPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@replace(pipeline().parameters.fileName, '.csv', '.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Delete Temporary Processed",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy Raw to Processed",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Processed_Weather_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.folderPath",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_Weather_Raw_Processed_output.parquet"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Get Processed Data Rows",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Delete Temporary Processed",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"dataset": {
								"referenceName": "VFD_DS_Processed_Weather_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.folderPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@replace(pipeline().parameters.fileName, '.csv', '.parquet')",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Weather Row",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Processed Data Rows",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Processed Data Rows').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetRowYear",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "rowYear",
										"value": {
											"value": "@substring(item().datetime, 0, 4)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetRowMonth",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetRowYear",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "rowMonth",
										"value": {
											"value": "@substring(item().datetime, 5, 2)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetRowDate",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetRowMonth",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "rowDate",
										"value": {
											"value": "@item().datetime",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Update Monthly File",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "SetRowDate",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "VFD_DFL_Weather_Single_Row_To_Monthly",
											"type": "DataFlowReference",
											"parameters": {
												"target_date": {
													"value": "'@{variables('rowDate')}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"SourceProcessed": {
													"folderPath": {
														"value": "@pipeline().parameters.folderPath",
														"type": "Expression"
													},
													"fileName": {
														"value": "@replace(pipeline().parameters.fileName, '.csv', '.parquet')",
														"type": "Expression"
													}
												},
												"SourceCuratedExisting": {
													"folderPath": {
														"value": "@concat('Weather/',variables('rowYear'))",
														"type": "Expression"
													},
													"fileName": {
														"value": "@concat('weather_monthly_', variables('rowYear'), variables('rowMonth'), '.parquet')",
														"type": "Expression"
													}
												},
												"SinkCurated": {
													"folderPath": {
														"value": "@concat('Weather/',variables('rowYear'))",
														"type": "Expression"
													},
													"fileName": {
														"value": "@concat('VFD_DFL_Weather_Single_Row_To_Monthly_', variables('rowYear'), variables('rowMonth'), '_output.parquet')",
														"type": "Expression"
													}
												}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Coarse"
									}
								},
								{
									"name": "Copy to Final Monthly File",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Update Monthly File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "ParquetReadSettings"
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "VFD_DS_Curated_Weather_Parquet",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": {
													"value": "@concat('Weather/',variables('rowYear'))",
													"type": "Expression"
												},
												"fileName": {
													"value": "VFD_DFL_Weather_Single_Row_To_Monthly_output.parquet",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "VFD_DS_Curated_Weather_Parquet",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": {
													"value": "@concat('Weather/',variables('rowYear'))",
													"type": "Expression"
												},
												"fileName": {
													"value": "@concat('weather_monthly_', variables('rowYear'), variables('rowMonth'), '.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete Temporary Monthly",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Copy to Final Monthly File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "VFD_DS_Curated_Weather_Parquet",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": {
													"value": "@concat('Weather/',variables('rowYear'))",
													"type": "Expression"
												},
												"fileName": {
													"value": "VFD_DFL_Weather_Single_Row_To_Monthly_output.parquet",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"folderPath": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					},
					"year": {
						"type": "String"
					},
					"month": {
						"type": "String"
					}
				},
				"variables": {
					"rowYear": {
						"type": "String"
					},
					"rowMonth": {
						"type": "String"
					},
					"rowDate": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Visual Crossing/Weather"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Affluences_Historical_Recovery')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline per il recupero storico dei dati Affluences dall'1 novembre 2024 al 15 maggio 2025",
				"activities": [
					{
						"name": "SetStartDate",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "currentDate",
							"value": {
								"value": "@formatDateTime('2025-06-07', 'yyyy-MM-dd')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetEndDate",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "endDate",
							"value": {
								"value": "@formatDateTime('2025-06-09', 'yyyy-MM-dd')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ProcessUntilEndDate",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "SetStartDate",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetEndDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(variables('currentDate'), variables('endDate'))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "ExecuteDailyPipeline",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "VFD_PL_Affluences_Daily_v2",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"date": {
												"value": "@variables('currentDate')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "CalculateNextDate",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "ExecuteDailyPipeline",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "tempDate",
										"value": {
											"value": "@formatDateTime(addDays(variables('currentDate'), 1), 'yyyy-MM-dd')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "UpdateCurrentDate",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "CalculateNextDate",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "currentDate",
										"value": {
											"value": "@variables('tempDate')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "WaitForCooldown",
									"type": "Wait",
									"dependsOn": [
										{
											"activity": "UpdateCurrentDate",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 10
									}
								}
							],
							"timeout": "7.00:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"currentDate": {
						"type": "String"
					},
					"endDate": {
						"type": "String"
					},
					"tempDate": {
						"type": "String"
					},
					"progressMessage": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Affluences"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_DuomoWiFi_Daily')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline wrapper per esecuzione giornaliera automatica - usa SEMPRE la data di ieri",
				"activities": [
					{
						"name": "Set_Yesterday_Date",
						"description": "Imposta la data di ieri per entrambi i parametri",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "yesterday_date",
							"value": {
								"value": "@formatDateTime(addDays(utcNow(), -1), 'yyyy-MM-dd')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute_WiFi_Extract_Transform",
						"description": "Esegue la pipeline principale con la data di ieri",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Set_Yesterday_Date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "VFD_PL_DuomoWiFi_Extract_Transform",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"p_dateStart": {
									"value": "@variables('yesterday_date')",
									"type": "Expression"
								},
								"p_dateStop": {
									"value": "@variables('yesterday_date')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"yesterday_date": {
						"type": "String"
					}
				},
				"folder": {
					"name": "WiFi"
				},
				"annotations": [
					"Daily Execution",
					"Wrapper Pipeline",
					"No Parameters"
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_DuomoWiFi_Reprocessing')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SetFirstDate",
						"description": "Imposta per la prima volta la currentDate in base a startDate",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "currentDate",
							"value": {
								"value": "@formatDateTime(pipeline().parameters.startDate, 'yyyy-MM-dd')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "RepeatUntilEndDate",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "SetFirstDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(variables('currentDate'),pipeline().parameters.endDate)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "ProcessCurrentDate",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "VFD_PL_DuomoWiFi_Extract_Transform",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"p_dateStart": {
												"value": "@variables('currentDate')",
												"type": "Expression"
											},
											"p_dateStop": {
												"value": "@variables('currentDate')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "CalculateNextDate",
									"description": "Usa una variabile temp per calcolare il valore di currentDate + 1",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "ProcessCurrentDate",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nextDate",
										"value": {
											"value": "@formatDateTime(addDays(variables('currentDate'), 1), 'yyyy-MM-dd')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetCurrentDate",
									"description": "Imposta il valore di currentDate con nextDate",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "CalculateNextDate",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "currentDate",
										"value": {
											"value": "@variables('nextDate')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "WaitForCooldown",
									"type": "Wait",
									"dependsOn": [
										{
											"activity": "SetCurrentDate",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 10
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"startDate": {
						"type": "string"
					},
					"endDate": {
						"type": "string"
					}
				},
				"variables": {
					"currentDate": {
						"type": "String"
					},
					"nextDate": {
						"type": "String"
					}
				},
				"folder": {
					"name": "WiFi"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Weather_API_Daily')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline per acquisire dati meteo da Visual Crossing API e processarli",
				"activities": [
					{
						"name": "SetDataInizio",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "data_inizio",
							"value": {
								"value": "@coalesce(pipeline().parameters.data_inizio, formatDateTime(addDays(utcNow(), -1), 'yyyy-MM-dd'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetDataFine",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "data_fine",
							"value": {
								"value": "@coalesce(pipeline().parameters.data_fine, formatDateTime(addDays(utcNow(), -1), 'yyyy-MM-dd'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetLocation",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "location",
							"value": {
								"value": "@coalesce(pipeline().parameters.location, 'Milano')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetYear",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetDataInizio",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "year",
							"value": {
								"value": "@substring(variables('data_inizio'), 0, 4)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetMonth",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetYear",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "month",
							"value": {
								"value": "@substring(variables('data_inizio'), 5, 2)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetFolderPath",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetMonth",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "folderPath",
							"value": {
								"value": "@concat('Weather/', variables('year'), '/', variables('month'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetFileName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetDataFine",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetFolderPath",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileName",
							"value": {
								"value": "@concat('weather_', replace(variables('data_inizio'), '-', ''), '_', replace(variables('data_fine'), '-', ''), '.csv')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CheckIfExistsInRaw",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "SetFileName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Raw_Weather_CSV",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@variables('folderPath')",
										"type": "Expression"
									},
									"fileName": {
										"value": "@variables('fileName')",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "IfNotExistsInRaw",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckIfExistsInRaw",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(activity('CheckIfExistsInRaw').output.exists)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "CopyFromAPI",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET"
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".csv"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "VFD_DS_VisualCrossing_HTTP_CSV",
											"type": "DatasetReference",
											"parameters": {
												"data_inizio": "@variables('data_inizio')",
												"data_fine": "@variables('data_fine')",
												"location": "@variables('location')"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "VFD_DS_Raw_Weather_CSV",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": {
													"value": "@variables('folderPath')",
													"type": "Expression"
												},
												"fileName": {
													"value": "@variables('fileName')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Raw to Curated Pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "IfNotExistsInRaw",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "VFD_PL_Weather_Raw_Curated",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"folderPath": {
									"value": "@variables('folderPath')",
									"type": "Expression"
								},
								"fileName": {
									"value": "@variables('fileName')",
									"type": "Expression"
								},
								"year": {
									"value": "@variables('year')",
									"type": "Expression"
								},
								"month": {
									"value": "@variables('month')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"data_inizio": {
						"type": "String"
					},
					"data_fine": {
						"type": "String"
					},
					"location": {
						"type": "String",
						"defaultValue": "Milano"
					}
				},
				"variables": {
					"data_inizio": {
						"type": "String"
					},
					"data_fine": {
						"type": "String"
					},
					"location": {
						"type": "String"
					},
					"year": {
						"type": "String"
					},
					"month": {
						"type": "String"
					},
					"folderPath": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Visual Crossing/Weather"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/VFD_PL_Weather_Raw_Curated')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_TRG_Affluences_Daily')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "VFD_PL_Affluences_Daily_v2",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2025-06-11T06:00:00",
						"timeZone": "W. Europe Standard Time"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_TRG_Mida_Bookings_FTP_Schedule')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "VFD_PL_MIDA_SQL_Master",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2025-07-11T04:00:00",
						"timeZone": "W. Europe Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								6
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_TRG_Weather_API_Daily')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "VFD_PL_Weather_API_Daily",
							"type": "PipelineReference"
						},
						"parameters": {
							"location": "[parameters('VFD_TRG_Weather_API_Daily_properties_VFD_PL_Weather_API_Daily_parameters_location')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2025-07-05T06:00:00",
						"timeZone": "W. Europe Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/VFD_PL_Weather_API_Daily')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_TRG_WiFi_Daily')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "VFD_PL_DuomoWiFi_Daily",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2025-07-11T16:00:00",
						"timeZone": "W. Europe Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								4
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/VFD_PL_DuomoWiFi_Daily')]"
			]
		}
	]
}