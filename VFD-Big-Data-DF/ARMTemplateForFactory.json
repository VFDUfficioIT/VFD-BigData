{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Nome Data Factory",
			"defaultValue": "VFD-Big-Data-DF"
		},
		"VFD_Big_Data_Azure_Sql_password": {
			"type": "secureString",
			"metadata": "Stringa sicura per 'password' di 'VFD_Big_Data_Azure_Sql'"
		},
		"VFD_Big_Data_DL_accountKey": {
			"type": "secureString",
			"metadata": "Stringa sicura per 'accountKey' di 'VFD_Big_Data_DL'"
		},
		"VFD_LS_Mida_FtpServer_password": {
			"type": "secureString",
			"metadata": "Stringa sicura per 'password' di 'VFD_LS_Mida_FtpServer'"
		},
		"VFD_Big_Data_Azure_Sql_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "vfdbigdataserversql.database.windows.net"
		},
		"VFD_Big_Data_Azure_Sql_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "vfdbigdatasql"
		},
		"VFD_Big_Data_Azure_Sql_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "user_vfdbigdataserversql"
		},
		"VFD_Big_Data_DL_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://vfdbigdataarchiviazione.dfs.core.windows.net/"
		},
		"VFD_LS_Affluences_API_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://data.affluences.com/v1/data"
		},
		"VFD_LS_Cloud4Wi_API_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://explore.cloud4wi.com"
		},
		"VFD_LS_Mida_FtpServer_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "217.73.236.242"
		},
		"VFD_LS_Mida_FtpServer_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "vfd_storico_ftp"
		},
		"VFD_LS_VisualCrossing_API_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/"
		},
		"VFD_LS_VisualCrossing_HTTP_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/"
		},
		"VFD_TRG_Weather_API_Daily_properties_VFD_PL_Weather_API_Daily_parameters_location": {
			"type": "string",
			"defaultValue": "Milano"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/TestPL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "TestDFL",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "VFD-IR-DataflowExecution",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/TestDFL')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/VFD-IR-DataflowExecution')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Affluences_Daily_v2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline v2 per acquisire i dati giornalieri Affluences con architettura Raw->Processed->Curated",
				"activities": [
					{
						"name": "SetProcessDate",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "processDate",
							"value": {
								"value": "@if(empty(pipeline().parameters.date), formatDateTime(addDays(utcnow(), -1), 'yyyy-MM-dd'), pipeline().parameters.date)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetYear",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetProcessDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "year",
							"value": {
								"value": "@substring(variables('processDate'), 0, 4)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetMonth",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetYear",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "month",
							"value": {
								"value": "@substring(variables('processDate'), 5, 2)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetDateFormatted",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetMonth",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "dateFormatted",
							"value": {
								"value": "@replace(variables('processDate'), '-', '')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetYearMonth",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetDateFormatted",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "yearMonth",
							"value": {
								"value": "@concat(variables('year'), variables('month'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEachSite",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetYearMonth",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@createArray(json('{\"name\":\"Terrazze\",\"uuid\":\"5a2757bc-e1c6-4d5e-9db3-edfc4e9c9307\"}'), json('{\"name\":\"AscensoreNord\",\"uuid\":\"ca2dae61-4a99-4cb7-8051-26cb852ea408\"}'), json('{\"name\":\"AscensoreSud\",\"uuid\":\"aa6c22f1-84b6-441a-bbb0-bd429e63536d\"}'), json('{\"name\":\"SalitaPiedi\",\"uuid\":\"8358df5f-0186-4a11-87ad-11fc19cda749\"}'), json('{\"name\":\"DiscesaPiedi\",\"uuid\":\"639bc326-010a-402f-ba5f-3c75e2740d9d\"}'), json('{\"name\":\"Camminamento Nord\",\"uuid\":\"7aa7cba8-5304-4004-9f6e-d2682171f1d6\"}'),\njson('{\"name\":\"Camminamento Sud\",\"uuid\":\"a0c0589a-99c2-4362-8738-08dc197493f7\"}'),\njson('{\"name\":\"Biglietteria - Sala delle Colonne (interna)\",\"uuid\":\"505bc53f-c1c7-405c-b8bb-ce9cf3d09ee2\"}'),\njson('{\"name\":\"Interno Cattedrale\",\"uuid\":\"0348a0da-4dd2-4f27-a05f-48af4403c4d7\"}'),\njson('{\"name\":\"Retrocoro\",\"uuid\":\"7a77ed7f-a721-49b0-bdb6-b971bb356ef8\"}'),\njson('{\"name\":\"Controfacciata Sud\",\"uuid\":\"15ebae77-84f6-4531-bbf8-aeb93f3a42ff\"}'),\njson('{\"name\":\"Controfacciata Nord\",\"uuid\":\"5515cda5-6aca-4e01-99d1-28f18d29a23b\"}'),\njson('{\"name\":\"Totale sito - Duomo di Milano\",\"uuid\":\"37f04685-c7f5-47dc-9503-6aeeb96670ce\"}'),\njson('{\"name\":\"4e - Facciata - Portone estremo Nord\",\"uuid\":\"439ec300-cc77-4741-9797-8b4e6f99a5d7\"}'),\njson('{\"name\":\"4d - Facciata - Portone mediano Nord\",\"uuid\":\"271a2467-e84a-41b2-9365-e50195c6f140\"}'),\njson('{\"name\":\"4c - Facciata - Portone centrale\",\"uuid\":\"bfbd2f6d-5ab0-4227-8ea9-8fbca8532ca2\"}'),\njson('{\"name\":\"4b - Facciata - Portone mediano Sud\",\"uuid\":\"7ee3fc1b-7e88-4893-ae2a-da8ac24e145c\"}'),\njson('{\"name\":\"4a - Facciata - Portone estremo Sud\",\"uuid\":\"356ff213-0101-4736-a9d4-41d6e028814f\"}'),\njson('{\"name\":\"8b - Portina uscita visitatori\",\"uuid\":\"bafb1070-294a-4e2e-946c-d442864f8b0b\"}'),\njson('{\"name\":\"8a - Portina ingresso fedeli\",\"uuid\":\"a9c1ddc4-ab1d-4db5-b9cd-e62545fc36df\"}'),\njson('{\"name\":\"Terrazza Centrale\",\"uuid\":\"f83757c5-3cb6-42db-8693-31b3dec5f34f\"}'),\njson('{\"name\":\"Cattedrale Fedeli\",\"uuid\":\"cec6caef-3c29-44ed-af84-15357f3a1d6d\"}'),\njson('{\"name\":\"Cattedrale Visitatori (con biglietto)\",\"uuid\":\"43a31887-e907-4d30-959a-dddf2b9d30bd\"}'),\njson('{\"name\":\"Entrate Camminamento Nord - Retrocoro uscita\",\"uuid\":\"281187e6-8430-42ee-8b42-7cacc4a1049b\"}'), json('{\"name\":\"ATTESA - ASCENSORE SUD\",\"uuid\":\"58914401-0e45-42b0-b4aa-795fff056eb2\"}'),\njson('{\"name\":\"ATTESA - ASCENSORE NORD\",\"uuid\":\"abd51dae-b178-4135-bd70-e57dd8cef99a\"}'),\njson('{\"name\":\"ATTESA - SALITA A PIEDI\",\"uuid\":\"cd8c3b53-98e2-4794-90d8-4e0a20f8270e\"}'),\njson('{\"name\":\"ATTESA - ACCESSO AL DUOMO\",\"uuid\":\"c3a83ec1-a1f5-4ed5-ad2a-00df3767a380\"}'), json('{\"name\":\"ATTESA BIGLIETTERIA (fila esterna)\",\"uuid\":\"2aba3fc3-2c00-4af6-bf12-64521f50f884\"}'),\njson('{\"name\":\"ATTESA BIGLIETTERIA\",\"uuid\":\"605fa1ca-fc2e-43be-9c6e-5865f2a38419\"}'), json('{\"name\":\"ATTESA - MUSEO DEL DUOMO\",\"uuid\":\"6775d267-82b6-46e7-897f-63ed58bd8542\"}'))",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 15,
							"activities": [
								{
									"name": "CallAPI",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 2,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET"
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "VFD_DS_Affluences_API",
											"type": "DatasetReference",
											"parameters": {
												"siteUUID": {
													"value": "@item().uuid",
													"type": "Expression"
												},
												"date": {
													"value": "@variables('processDate')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "VFD_DS_Raw_Affluences_JSON",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": {
													"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
													"type": "Expression"
												},
												"fileName": {
													"value": "@concat('VFD_Affluences_', variables('dateFormatted'), '_', item().uuid, '.json')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "TransformToProcessed",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ForEachSite",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_Affluences_JSON_to_Processed",
								"type": "DataFlowReference",
								"parameters": {
									"year": {
										"value": "'@{variables('year')}'",
										"type": "Expression"
									},
									"month": {
										"value": "'@{variables('month')}'",
										"type": "Expression"
									},
									"dateFormatted": {
										"value": "'@{variables('dateFormatted')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SourceJSON": {
										"folderPath": {
											"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
											"type": "Expression"
										},
										"fileName": {
											"value": "@concat('VFD_Affluences_', variables('dateFormatted'), '_*.json')",
											"type": "Expression"
										}
									},
									"SinkProcessed": {
										"folderPath": {
											"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
											"type": "Expression"
										},
										"fileName": "VFD_DFL_Affluences_JSON_to_Processed_output.parquet"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "VFD-IR-DataflowExecution",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Coarse"
						}
					},
					{
						"name": "CopyProcessedToFinal",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "TransformToProcessed",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Processed_Affluences_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_Affluences_JSON_to_Processed_output.parquet"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Processed_Affluences_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
										"type": "Expression"
									},
									"fileName": {
										"value": "@concat('VFD_Affluences_', variables('dateFormatted'), '.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "DeleteProcessedTemp",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "CopyProcessedToFinal",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Processed_Affluences_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_Affluences_JSON_to_Processed_output.parquet"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": false
							}
						}
					},
					{
						"name": "CreateCuratedDaily",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DeleteProcessedTemp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_Affluences_Daily_to_Curated",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceProcessed": {
										"folderPath": {
											"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
											"type": "Expression"
										},
										"fileName": {
											"value": "@concat('VFD_Affluences_', variables('dateFormatted'), '.parquet')",
											"type": "Expression"
										}
									},
									"SinkCuratedDaily": {
										"folderPath": {
											"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
											"type": "Expression"
										},
										"fileName": "VFD_DFL_Affluences_Daily_to_Curated_output.parquet"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "VFD-IR-DataflowExecution",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Coarse"
						}
					},
					{
						"name": "CopyCuratedDailyToFinal",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CreateCuratedDaily",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Curated_Affluences_Daily_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_Affluences_Daily_to_Curated_output.parquet"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Curated_Affluences_Daily_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
										"type": "Expression"
									},
									"fileName": {
										"value": "@concat('VFD_Affluences_Daily_', variables('dateFormatted'), '.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "DeleteCuratedDailyTemp",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "CopyCuratedDailyToFinal",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Curated_Affluences_Daily_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_Affluences_Daily_to_Curated_output.parquet"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": false
							}
						}
					},
					{
						"name": "UpdateMonthlyAggregation",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DeleteCuratedDailyTemp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_Affluences_Monthly_Aggregation",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceNewData": {
										"folderPath": {
											"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
											"type": "Expression"
										},
										"fileName": {
											"value": "@concat('VFD_Affluences_', variables('dateFormatted'), '.parquet')",
											"type": "Expression"
										}
									},
									"SourceExistingMonthly": {
										"folderPath": {
											"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
											"type": "Expression"
										},
										"fileName": {
											"value": "@concat('VFD_Affluences_Monthly_', variables('yearMonth'), '.parquet')",
											"type": "Expression"
										}
									},
									"SinkMonthly": {
										"folderPath": {
											"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
											"type": "Expression"
										},
										"fileName": "VFD_DFL_Affluences_Monthly_Aggregation_output.parquet"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "VFD-IR-DataflowExecution",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Coarse"
						}
					},
					{
						"name": "CopyMonthlyToFinal",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "UpdateMonthlyAggregation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Curated_Affluences_Monthly_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_Affluences_Monthly_Aggregation_output.parquet"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Curated_Affluences_Monthly_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
										"type": "Expression"
									},
									"fileName": {
										"value": "@concat('VFD_Affluences_Monthly_', variables('yearMonth'), '.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "DeleteMonthlyTemp",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "CopyMonthlyToFinal",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Curated_Affluences_Monthly_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_Affluences_Monthly_Aggregation_output.parquet"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"date": {
						"type": "string"
					}
				},
				"variables": {
					"processDate": {
						"type": "String"
					},
					"year": {
						"type": "String"
					},
					"month": {
						"type": "String"
					},
					"dateFormatted": {
						"type": "String"
					},
					"yearMonth": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Affluences"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/VFD_DFL_Affluences_JSON_to_Processed')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/VFD-IR-DataflowExecution')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Processed_Affluences_Parquet')]",
				"[concat(variables('factoryId'), '/dataflows/VFD_DFL_Affluences_Daily_to_Curated')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Affluences_Daily_Parquet')]",
				"[concat(variables('factoryId'), '/dataflows/VFD_DFL_Affluences_Monthly_Aggregation')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Affluences_Monthly_Parquet')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Affluences_API')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Raw_Affluences_JSON')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Affluences_Historical_Recovery')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline per il recupero storico dei dati Affluences dall'1 novembre 2024 al 15 maggio 2025",
				"activities": [
					{
						"name": "SetStartDate",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "currentDate",
							"value": {
								"value": "@formatDateTime(pipeline().parameters.startDate, 'yyyy-MM-dd')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetEndDate",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "endDate",
							"value": {
								"value": "@formatDateTime(pipeline().parameters.endDate, 'yyyy-MM-dd')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ProcessUntilEndDate",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "SetStartDate",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetEndDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(variables('currentDate'), variables('endDate'))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "ExecuteDailyPipeline",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "VFD_PL_Affluences_Daily_v2",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"date": {
												"value": "@variables('currentDate')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "CalculateNextDate",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "ExecuteDailyPipeline",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "tempDate",
										"value": {
											"value": "@formatDateTime(addDays(variables('currentDate'), 1), 'yyyy-MM-dd')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "UpdateCurrentDate",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "CalculateNextDate",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "currentDate",
										"value": {
											"value": "@variables('tempDate')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "WaitForCooldown",
									"type": "Wait",
									"dependsOn": [
										{
											"activity": "UpdateCurrentDate",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 10
									}
								}
							],
							"timeout": "7.00:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"startDate": {
						"type": "string"
					},
					"endDate": {
						"type": "string"
					}
				},
				"variables": {
					"currentDate": {
						"type": "String"
					},
					"endDate": {
						"type": "String"
					},
					"tempDate": {
						"type": "String"
					},
					"progressMessage": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Affluences"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/VFD_PL_Affluences_Daily_v2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Batch_Historical_Processing')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline per processare automaticamente tutti i file storico con Copy Data diretta a production_bookings",
				"activities": [
					{
						"name": "GetHistoricalFiles",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Raw_Mida_Bookings_Folder",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.baseFolderPath",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": false,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ProcessFilesInOrder",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetHistoricalFiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetHistoricalFiles').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "CheckIfPartFile",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@contains(item().name, '_part')",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Copy Historical File to Production",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "ExcelSource",
														"additionalColumns": [
															{
																"name": "processing_timestamp",
																"value": {
																	"value": "@utcNow()",
																	"type": "Expression"
																}
															},
															{
																"name": "source_file",
																"value": {
																	"value": "@item().name",
																	"type": "Expression"
																}
															}
														],
														"storeSettings": {
															"type": "AzureBlobFSReadSettings",
															"recursive": true,
															"enablePartitionDiscovery": false
														}
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false,
														"disableMetricsCollection": false
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "VFD_DS_Raw_Mida_Bookings_Excel",
														"type": "DatasetReference",
														"parameters": {
															"folderPath": {
																"value": "@pipeline().parameters.baseFolderPath",
																"type": "Expression"
															},
															"fileName": {
																"value": "@item().name",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "VFD_DS_SQL_Test_Bookings",
														"type": "DatasetReference",
														"parameters": {}
													}
												]
											},
											{
												"name": "LogProcessedFile",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Copy Historical File to Production",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "currentFile",
													"value": {
														"value": "@concat('Processed: ', item().name, ' - Rows copied: ', activity('Copy Historical File to Production').output.rowsCopied, ' at ', utcNow())",
														"type": "Expression"
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"baseFolderPath": {
						"type": "string",
						"defaultValue": "Mida/Storico/Bookings"
					}
				},
				"variables": {
					"currentFile": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Mida/Batch"
				},
				"annotations": [
					"Processamento automatico file storici con Copy Data diretta a production_bookings"
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Raw_Mida_Bookings_Folder')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Raw_Mida_Bookings_Excel')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_SQL_Test_Bookings')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Copy_Single_Historical_File')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline per copiare un singolo file storico specificato in test_bookings",
				"activities": [
					{
						"name": "Copy Single File to Test Bookings",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"additionalColumns": [
									{
										"name": "processing_timestamp",
										"value": {
											"value": "@utcNow()",
											"type": "Expression"
										}
									},
									{
										"name": "source_file",
										"value": {
											"value": "@pipeline().parameters.fileName",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Raw_Mida_Bookings_Excel",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.folderPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_SQL_Test_Bookings",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"fileName": {
						"type": "string",
						"defaultValue": "Storico_-_Vendite_20241001_20241231_part01.xlsx"
					},
					"folderPath": {
						"type": "string",
						"defaultValue": "Mida/Storico/Bookings"
					}
				},
				"folder": {
					"name": "Mida/Utilities"
				},
				"annotations": [
					"Pipeline utility per processare singolo file storico specificato"
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Raw_Mida_Bookings_Excel')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_SQL_Test_Bookings')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_DuomoWiFi_Daily')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline wrapper per esecuzione giornaliera automatica - usa SEMPRE la data di ieri",
				"activities": [
					{
						"name": "Set_Yesterday_Date",
						"description": "Imposta la data di ieri per entrambi i parametri",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "yesterday_date",
							"value": {
								"value": "@formatDateTime(addDays(utcNow(), -1), 'yyyy-MM-dd')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute_WiFi_Extract_Transform",
						"description": "Esegue la pipeline principale con la data di ieri",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Set_Yesterday_Date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "VFD_PL_DuomoWiFi_Extract_Transform",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"p_dateStart": {
									"value": "@variables('yesterday_date')",
									"type": "Expression"
								},
								"p_dateStop": {
									"value": "@variables('yesterday_date')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"yesterday_date": {
						"type": "String"
					}
				},
				"folder": {
					"name": "WiFi"
				},
				"annotations": [
					"Daily Execution",
					"Wrapper Pipeline",
					"No Parameters"
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/VFD_PL_DuomoWiFi_Extract_Transform')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_DuomoWiFi_Extract_Transform')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline principale per l'estrazione e trasformazione dei dati WiFi del Duomo",
				"activities": [
					{
						"name": "ExtractConnections",
						"description": "Estrae le connessioni WiFi dall'API Cloud4Wi",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "AuthRequest",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET",
									"additionalHeaders": {
										"value": "Authorization: Bearer @{activity('AuthRequest').output.token}",
										"type": "Expression"
									},
									"requestTimeout": "00:01:40"
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Cloud4Wi_Connections_HTTP",
								"type": "DatasetReference",
								"parameters": {
									"dateStart": {
										"value": "@pipeline().parameters.p_dateStart",
										"type": "Expression"
									},
									"dateStop": {
										"value": "@pipeline().parameters.p_dateStop",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Raw_DuomoWiFi_Connections_JSON",
								"type": "DatasetReference",
								"parameters": {
									"year": {
										"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
										"type": "Expression"
									},
									"month": {
										"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
										"type": "Expression"
									},
									"fileName": {
										"value": "@concat('VFD_Wifi_connections_', substring(pipeline().parameters.p_dateStart, 0, 4), substring(pipeline().parameters.p_dateStart, 5, 2), substring(pipeline().parameters.p_dateStart, 8, 2), '.json')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "LookupUsernames",
						"description": "Estrae la lista di username unici dal file delle connessioni",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ExtractConnections",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:05:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "VFD_DS_Raw_DuomoWiFi_Connections_JSON",
								"type": "DatasetReference",
								"parameters": {
									"year": {
										"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)\n",
										"type": "Expression"
									},
									"month": {
										"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)\n",
										"type": "Expression"
									},
									"fileName": {
										"value": "@concat('VFD_Wifi_connections_', \n    substring(pipeline().parameters.p_dateStart, 0, 4),\n    substring(pipeline().parameters.p_dateStart, 5, 2), \n    substring(pipeline().parameters.p_dateStart, 8, 2),\n    '.json')",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachUsername",
						"description": "Itera su ogni username per estrarre i dati utente",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookupUsernames",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupUsernames').output.value[0].connections",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 10,
							"activities": [
								{
									"name": "ExtractUserData",
									"description": "Estrae i dati di un singolo utente",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 3,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET",
												"additionalHeaders": {
													"value": "Authorization: Bearer @{activity('AuthRequest').output.token}",
													"type": "Expression"
												},
												"requestTimeout": "00:01:40"
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "VFD_DS_Cloud4Wi_Users_HTTP",
											"type": "DatasetReference",
											"parameters": {
												"username": {
													"value": "@item().customerId",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "VFD_DS_Raw_DuomoWiFi_Users_JSON",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@concat('VFD_Wifi_user_', item().username, '.json')",
													"type": "Expression"
												},
												"year": {
													"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
													"type": "Expression"
												},
												"month": {
													"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "TransformConnectionsRawToProcessed",
						"description": "Trasforma le connessioni da JSON Raw a Parquet Processed",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ForEachUsername",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_DuomoWiFi_Connections_Raw_Processed",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceConnectionsJSON": {
										"year": {
											"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
											"type": "Expression"
										},
										"month": {
											"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
											"type": "Expression"
										},
										"fileName": {
											"value": "@concat('VFD_Wifi_connections_', substring(pipeline().parameters.p_dateStart, 0, 4), substring(pipeline().parameters.p_dateStart, 5, 2), substring(pipeline().parameters.p_dateStart, 8, 2), '.json')",
											"type": "Expression"
										}
									},
									"SinkConnectionsParquet": {
										"year": {
											"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
											"type": "Expression"
										},
										"month": {
											"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
											"type": "Expression"
										},
										"fileName": "VFD_DFL_DuomoWiFi_Connections_Raw_Processed_output.parquet"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "VFD-IR-DataflowExecution",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Coarse"
						}
					},
					{
						"name": "CopyConnectionsProcessedToFinal",
						"description": "Copia il file temporaneo al nome finale",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "TransformConnectionsRawToProcessed",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Processed_DuomoWiFi_Connections_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"year": {
										"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
										"type": "Expression"
									},
									"month": {
										"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_DuomoWiFi_Connections_Raw_Processed_output.parquet"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Processed_DuomoWiFi_Connections_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"year": {
										"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
										"type": "Expression"
									},
									"month": {
										"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
										"type": "Expression"
									},
									"fileName": {
										"value": "@concat('VFD_Wifi_connections_', substring(pipeline().parameters.p_dateStart, 0, 4), substring(pipeline().parameters.p_dateStart, 5, 2), substring(pipeline().parameters.p_dateStart, 8, 2), '.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "DeleteTempConnectionsFile",
						"description": "Elimina il file temporaneo delle connessioni",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "CopyConnectionsProcessedToFinal",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:05:00",
							"retry": 1,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Processed_DuomoWiFi_Connections_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"year": {
										"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
										"type": "Expression"
									},
									"month": {
										"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_DuomoWiFi_Connections_Raw_Processed_output.parquet"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "TransformUsersRawToProcessed",
						"description": "Consolida tutti i file JSON degli utenti in un singolo Parquet",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DeleteTempConnectionsFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_DuomoWiFi_Users_Raw_Processed",
								"type": "DataFlowReference",
								"parameters": {
									"year": {
										"value": "'@{substring(pipeline().parameters.p_dateStart, 0, 4)}'",
										"type": "Expression"
									},
									"month": {
										"value": "'@{substring(pipeline().parameters.p_dateStart, 5, 2)}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SourceUsersJSON": {
										"fileName": "dummy.json",
										"year": {
											"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
											"type": "Expression"
										},
										"month": {
											"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
											"type": "Expression"
										}
									},
									"SinkUsersParquet": {
										"year": {
											"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
											"type": "Expression"
										},
										"month": {
											"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
											"type": "Expression"
										},
										"fileName": "VFD_DFL_DuomoWiFi_Users_Raw_Processed_output.parquet"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "VFD-IR-DataflowExecution",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Coarse"
						}
					},
					{
						"name": "CopyUsersProcessedToFinal",
						"description": "Copia il file temporaneo degli utenti al nome finale",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "TransformUsersRawToProcessed",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Processed_DuomoWiFi_Users_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"year": {
										"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
										"type": "Expression"
									},
									"month": {
										"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_DuomoWiFi_Users_Raw_Processed_output.parquet"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Processed_DuomoWiFi_Users_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"year": {
										"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
										"type": "Expression"
									},
									"month": {
										"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
										"type": "Expression"
									},
									"fileName": {
										"value": "@concat('VFD_Wifi_Users_', substring(pipeline().parameters.p_dateStart, 0, 4), substring(pipeline().parameters.p_dateStart, 5, 2), substring(pipeline().parameters.p_dateStart, 8, 2), '.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "DeleteTempUsersFile",
						"description": "Elimina il file temporaneo degli utenti",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "CopyUsersProcessedToFinal",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:05:00",
							"retry": 1,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Processed_DuomoWiFi_Users_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"year": {
										"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
										"type": "Expression"
									},
									"month": {
										"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_DuomoWiFi_Users_Raw_Processed_output.parquet"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "TransformProcessedToCurated",
						"description": "Esegue join tra connessioni e utenti per dataset finale arricchito",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DeleteTempUsersFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_DuomoWiFi_Processed_Curated",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceConnections": {
										"year": {
											"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
											"type": "Expression"
										},
										"month": {
											"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
											"type": "Expression"
										},
										"fileName": {
											"value": "@concat('VFD_Wifi_connections_', substring(pipeline().parameters.p_dateStart, 0, 4), substring(pipeline().parameters.p_dateStart, 5, 2), substring(pipeline().parameters.p_dateStart, 8, 2), '.parquet')",
											"type": "Expression"
										}
									},
									"SourceUsers": {
										"year": {
											"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
											"type": "Expression"
										},
										"month": {
											"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
											"type": "Expression"
										},
										"fileName": {
											"value": "@concat('VFD_Wifi_Users_', substring(pipeline().parameters.p_dateStart, 0, 4), substring(pipeline().parameters.p_dateStart, 5, 2), substring(pipeline().parameters.p_dateStart, 8, 2), '.parquet')",
											"type": "Expression"
										}
									},
									"SinkEnrichedData": {
										"year": {
											"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
											"type": "Expression"
										},
										"month": {
											"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
											"type": "Expression"
										},
										"fileName": "VFD_DFL_DuomoWiFi_Processed_Curated_output.parquet"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "VFD-IR-DataflowExecution",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Coarse"
						}
					},
					{
						"name": "CopyCuratedToFinal",
						"description": "Copia il file temporaneo arricchito al nome finale",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "TransformProcessedToCurated",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Curated_DuomoWiFi_Enriched_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"year": {
										"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
										"type": "Expression"
									},
									"month": {
										"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_DuomoWiFi_Processed_Curated_output.parquet"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Curated_DuomoWiFi_Enriched_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"year": {
										"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
										"type": "Expression"
									},
									"month": {
										"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
										"type": "Expression"
									},
									"fileName": {
										"value": "@concat('VFD_Wifi_connections_', substring(pipeline().parameters.p_dateStart, 0, 4), substring(pipeline().parameters.p_dateStart, 5, 2), substring(pipeline().parameters.p_dateStart, 8, 2), '.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "DeleteTempEnrichedFile",
						"description": "Elimina il file temporaneo arricchito",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "CopyCuratedToFinal",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:05:00",
							"retry": 1,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Curated_DuomoWiFi_Enriched_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"year": {
										"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
										"type": "Expression"
									},
									"month": {
										"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_DuomoWiFi_Processed_Curated_output.parquet"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "AuthRequest",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": "https://explore.cloud4wi.com/v1/sts/login/services",
							"body": {
								"clientKey": "ck-ffe407c5-e967-44db-a6b0-d6c178b6ee08",
								"clientSecret": "CWCVPKZCNDYTVKPBZTDSENQKJLLCPKGH"
							}
						}
					},
					{
						"name": "LogoutRequest",
						"description": "Richiesta di logout per annullare il token, il body è impostato con dei valori solamente perché DataFactory non accetta un body vuoto in una richiesta post",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "DeleteTempEnrichedFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Authorization": {
									"value": "Bearer @{activity('AuthRequest').output.token}",
									"type": "Expression"
								}
							},
							"url": "https://explore.cloud4wi.com/v1/sts/logout",
							"body": {
								"Sample": "Sample"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_dateStart": {
						"type": "string",
						"defaultValue": "2025-06-26"
					},
					"p_dateStop": {
						"type": "string",
						"defaultValue": "2025-06-26"
					}
				},
				"folder": {
					"name": "WiFi"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Cloud4Wi_Connections_HTTP')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Raw_DuomoWiFi_Connections_JSON')]",
				"[concat(variables('factoryId'), '/dataflows/VFD_DFL_DuomoWiFi_Connections_Raw_Processed')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/VFD-IR-DataflowExecution')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Processed_DuomoWiFi_Connections_Parquet')]",
				"[concat(variables('factoryId'), '/dataflows/VFD_DFL_DuomoWiFi_Users_Raw_Processed')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Processed_DuomoWiFi_Users_Parquet')]",
				"[concat(variables('factoryId'), '/dataflows/VFD_DFL_DuomoWiFi_Processed_Curated')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_DuomoWiFi_Enriched_Parquet')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Cloud4Wi_Users_HTTP')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Raw_DuomoWiFi_Users_JSON')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_DuomoWiFi_Reprocessing')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SetFirstDate",
						"description": "Imposta per la prima volta la currentDate in base a startDate",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "currentDate",
							"value": {
								"value": "@formatDateTime(pipeline().parameters.startDate, 'yyyy-MM-dd')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "RepeatUntilEndDate",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "SetFirstDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(variables('currentDate'),pipeline().parameters.endDate)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "ProcessCurrentDate",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "VFD_PL_DuomoWiFi_Extract_Transform",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"p_dateStart": {
												"value": "@variables('currentDate')",
												"type": "Expression"
											},
											"p_dateStop": {
												"value": "@variables('currentDate')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "CalculateNextDate",
									"description": "Usa una variabile temp per calcolare il valore di currentDate + 1",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "ProcessCurrentDate",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nextDate",
										"value": {
											"value": "@formatDateTime(addDays(variables('currentDate'), 1), 'yyyy-MM-dd')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetCurrentDate",
									"description": "Imposta il valore di currentDate con nextDate",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "CalculateNextDate",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "currentDate",
										"value": {
											"value": "@variables('nextDate')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "WaitForCooldown",
									"type": "Wait",
									"dependsOn": [
										{
											"activity": "SetCurrentDate",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 10
									}
								}
							],
							"timeout": "07.00:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"startDate": {
						"type": "string"
					},
					"endDate": {
						"type": "string"
					}
				},
				"variables": {
					"currentDate": {
						"type": "String"
					},
					"nextDate": {
						"type": "String"
					}
				},
				"folder": {
					"name": "WiFi"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/VFD_PL_DuomoWiFi_Extract_Transform')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Explore_Seals_Folder')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Esplora il contenuto della cartella 'emissioni' per capire i pattern dei file Seals",
				"activities": [
					{
						"name": "ListSealsFiles",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Mida_Seals_FTPServer_Folder",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "FtpReadSettings",
								"recursive": false,
								"enablePartitionDiscovery": false,
								"useBinaryTransfer": true,
								"disableChunking": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Mida/Utilities"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Mida_Seals_FTPServer_Folder')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_MIDA_SQL_Master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline master: orchestra le 3 pipeline figlie per Bookings, Seals e Validations",
				"activities": [
					{
						"name": "Execute Bookings Master",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "VFD_PL_MIDA_SQL_Master_Bookings",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Seals Master",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Bookings Master",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "VFD_PL_MIDA_SQL_Master_Seals",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Validations Master",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Seals Master",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "VFD_PL_MIDA_SQL_Master_Validations",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Mida"
				},
				"annotations": [
					"Pipeline orchestratore master per processing giornaliero MIDA",
					"Esecuzione sequenziale: Bookings → Seals → Validations"
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/VFD_PL_MIDA_SQL_Master_Bookings')]",
				"[concat(variables('factoryId'), '/pipelines/VFD_PL_MIDA_SQL_Master_Seals')]",
				"[concat(variables('factoryId'), '/pipelines/VFD_PL_MIDA_SQL_Master_Validations')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_MIDA_SQL_Master_Bookings')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline madre: scansiona FTP folder Bookings, scarica file mancanti, chiama pipeline figlia",
				"activities": [
					{
						"name": "ScanBookingsFTP",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Mida_Bookings_FTPServer_Folder",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "FtpReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false,
								"useBinaryTransfer": true,
								"disableChunking": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ProcessBookingsFiles",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ScanBookingsFTP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ScanBookingsFTP').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetBookingsFileName",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "bookingsFileName",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "ParseBookingsDate",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetBookingsFileName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "bookingsDate",
										"value": {
											"value": "@substring(variables('bookingsFileName'), 37, 8)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetBookingsFolderPath",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "ParseBookingsDate",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "bookingsFolderPath",
										"value": {
											"value": "@concat('Mida/Bookings/', substring(variables('bookingsDate'), 0, 4), '/', substring(variables('bookingsDate'), 4, 2))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "CheckBookingsExists",
									"type": "GetMetadata",
									"dependsOn": [
										{
											"activity": "SetBookingsFolderPath",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "VFD_DS_Raw_Mida_Bookings_Excel",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": "@variables('bookingsFolderPath')",
												"fileName": "@variables('bookingsFileName')"
											}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "IfBookingsNotExists",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "CheckBookingsExists",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(activity('CheckBookingsExists').output.exists)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "DownloadBookingsFromFTP",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "FtpReadSettings",
															"recursive": false,
															"useBinaryTransfer": true,
															"disableChunking": false
														},
														"formatSettings": {
															"type": "BinaryReadSettings"
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "VFD_DS_Mida_Bookings_FTPServer_Binary",
														"type": "DatasetReference",
														"parameters": {
															"fileName": "@variables('bookingsFileName')"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "VFD_DS_Raw_Mida_Bookings_Binary",
														"type": "DatasetReference",
														"parameters": {
															"folderPath": "@variables('bookingsFolderPath')",
															"fileName": "@variables('bookingsFileName')"
														}
													}
												]
											},
											{
												"name": "ProcessBookingsPipeline",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "DownloadBookingsFromFTP",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "VFD_PL_Process_Bookings_SQL",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"folderPath": {
															"value": "@variables('bookingsFolderPath')",
															"type": "Expression"
														},
														"fileName": {
															"value": "@variables('bookingsFileName')",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"bookingsFileName": {
						"type": "String"
					},
					"bookingsDate": {
						"type": "String"
					},
					"bookingsFolderPath": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Mida"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Mida_Bookings_FTPServer_Folder')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Raw_Mida_Bookings_Excel')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Mida_Bookings_FTPServer_Binary')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Raw_Mida_Bookings_Binary')]",
				"[concat(variables('factoryId'), '/pipelines/VFD_PL_Process_Bookings_SQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_MIDA_SQL_Master_Seals')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline madre: scansiona FTP folder Seals, scarica file mancanti, chiama pipeline figlia",
				"activities": [
					{
						"name": "ScanSealsFTP",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Mida_Seals_FTPServer_Folder",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "FtpReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false,
								"useBinaryTransfer": true,
								"disableChunking": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ProcessSealsFiles",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ScanSealsFTP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ScanSealsFTP').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetSealsFileName",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "sealsFileName",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "ParseSealsDate",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetSealsFileName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "sealsDate",
										"value": {
											"value": "@substring(variables('sealsFileName'), 25, 8)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetSealsFolderPath",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "ParseSealsDate",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "sealsFolderPath",
										"value": {
											"value": "@concat('Mida/Seals/', substring(variables('sealsDate'), 0, 4), '/', substring(variables('sealsDate'), 4, 2))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "CheckSealsExists",
									"type": "GetMetadata",
									"dependsOn": [
										{
											"activity": "SetSealsFolderPath",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "VFD_DS_Raw_Mida_Seals_Excel",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": "@variables('sealsFolderPath')",
												"fileName": "@variables('sealsFileName')"
											}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "IfSealsNotExists",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "CheckSealsExists",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(activity('CheckSealsExists').output.exists)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "DownloadSealsFromFTP",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "FtpReadSettings",
															"recursive": false,
															"useBinaryTransfer": true,
															"disableChunking": false
														},
														"formatSettings": {
															"type": "BinaryReadSettings"
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "VFD_DS_Mida_Seals_FTPServer_Binary",
														"type": "DatasetReference",
														"parameters": {
															"fileName": "@variables('sealsFileName')"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "VFD_DS_Raw_Mida_Seals_Binary",
														"type": "DatasetReference",
														"parameters": {
															"folderPath": "@variables('sealsFolderPath')",
															"fileName": "@variables('sealsFileName')"
														}
													}
												]
											},
											{
												"name": "ProcessSealsPipeline",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "DownloadSealsFromFTP",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "VFD_PL_Process_Seals_SQL",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"folderPath": {
															"value": "@variables('sealsFolderPath')",
															"type": "Expression"
														},
														"fileName": {
															"value": "@variables('sealsFileName')",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"sealsFileName": {
						"type": "String"
					},
					"sealsDate": {
						"type": "String"
					},
					"sealsFolderPath": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Mida"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Mida_Seals_FTPServer_Folder')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Raw_Mida_Seals_Excel')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Mida_Seals_FTPServer_Binary')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Raw_Mida_Seals_Binary')]",
				"[concat(variables('factoryId'), '/pipelines/VFD_PL_Process_Seals_SQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_MIDA_SQL_Master_Validations')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline madre: scansiona FTP folder Validations, scarica file mancanti, chiama pipeline figlia",
				"activities": [
					{
						"name": "ScanValidationsFTP",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Mida_Validations_FTPServer_Folder",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "FtpReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false,
								"useBinaryTransfer": true,
								"disableChunking": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ProcessValidationsFiles",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ScanValidationsFTP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ScanValidationsFTP').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetValidationsFileName",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "validationsFileName",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "ParseValidationsDate",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetValidationsFileName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "validationsDate",
										"value": {
											"value": "@substring(variables('validationsFileName'), 27, 8)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetValidationsFolderPath",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "ParseValidationsDate",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "validationsFolderPath",
										"value": {
											"value": "@concat('Mida/Validations/', substring(variables('validationsDate'), 0, 4), '/', substring(variables('validationsDate'), 4, 2))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "CheckValidationsExists",
									"type": "GetMetadata",
									"dependsOn": [
										{
											"activity": "SetValidationsFolderPath",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "VFD_DS_Raw_Mida_Validations_Excel",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": "@variables('validationsFolderPath')",
												"fileName": "@variables('validationsFileName')"
											}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "IfValidationsNotExists",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "CheckValidationsExists",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(activity('CheckValidationsExists').output.exists)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "DownloadValidationsFromFTP",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "FtpReadSettings",
															"recursive": false,
															"useBinaryTransfer": true,
															"disableChunking": false
														},
														"formatSettings": {
															"type": "BinaryReadSettings"
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "VFD_DS_Mida_Validations_FTPServer_Binary",
														"type": "DatasetReference",
														"parameters": {
															"fileName": "@variables('validationsFileName')"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "VFD_DS_Raw_Mida_Validations_Binary",
														"type": "DatasetReference",
														"parameters": {
															"folderPath": "@variables('validationsFolderPath')",
															"fileName": "@variables('validationsFileName')"
														}
													}
												]
											},
											{
												"name": "ProcessValidationsPipeline",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "DownloadValidationsFromFTP",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "VFD_PL_Process_Validations_SQL",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"folderPath": {
															"value": "@variables('validationsFolderPath')",
															"type": "Expression"
														},
														"fileName": {
															"value": "@variables('validationsFileName')",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"validationsFileName": {
						"type": "String"
					},
					"validationsDate": {
						"type": "String"
					},
					"validationsFolderPath": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Mida"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Mida_Validations_FTPServer_Folder')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Raw_Mida_Validations_Excel')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Mida_Validations_FTPServer_Binary')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Raw_Mida_Validations_Binary')]",
				"[concat(variables('factoryId'), '/pipelines/VFD_PL_Process_Validations_SQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Mida_FTP_Simple_Explorer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline semplice per ottenere la lista delle directory del server FTP Mida",
				"activities": [
					{
						"name": "ListAllFTPDirectories",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Mida_Bookings_FTPServer_Folder",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "FtpReadSettings",
								"recursive": false,
								"enablePartitionDiscovery": false,
								"useBinaryTransfer": true,
								"disableChunking": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Mida/Utilities"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Mida_Bookings_FTPServer_Folder')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Process_Bookings_SQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline figlia: carica Bookings Excel → SQL staging → stored procedure (DELETE/INSERT + Historical)",
				"activities": [
					{
						"name": "LoadBookingsToStaging",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 1,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 1000,
								"writeBatchTimeout": "00:30:00",
								"preCopyScript": "TRUNCATE TABLE staging_bookings",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"dataIntegrationUnits": 8,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Raw_Mida_Bookings_Excel",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "@pipeline().parameters.folderPath",
									"fileName": "@pipeline().parameters.fileName"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_SQL_Staging_Bookings",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "ProcessBookingsComplete",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadBookingsToStaging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "sp_process_bookings_complete"
						},
						"linkedServiceName": {
							"referenceName": "VFD_Big_Data_Azure_Sql",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"folderPath": {
						"type": "string",
						"defaultValue": "Mida/Storico/Bookings"
					},
					"fileName": {
						"type": "string",
						"defaultValue": "Storico_-_Vendite_20220701_20221231_part03.xlsx"
					}
				},
				"folder": {
					"name": "Mida"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Raw_Mida_Bookings_Excel')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_SQL_Staging_Bookings')]",
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_Azure_Sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Process_Seals_Historical_Batch')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline master per processare tutti i file storici seals in sequenza",
				"activities": [
					{
						"name": "Get Files List",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Raw_Mida_Seals_Binary",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "Mida/Storico/Emissioni/",
									"fileName": "*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": false,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Process Each File",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Files List",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Files List').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy Seals File to Production",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "VFD_DS_Raw_Mida_Seals_Excel_History",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": "Mida/Storico/Emissioni/",
												"fileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "VFD_DS_SQL_Production_Seals",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Mida/Batch"
				},
				"annotations": [
					"Pipeline master per processing storico seals",
					"Processa file in sequenza per mantenere ordine cronologico"
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Raw_Mida_Seals_Binary')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Raw_Mida_Seals_Excel_History')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_SQL_Production_Seals')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Process_Seals_SQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline figlia: carica Seals Excel → SQL staging → stored procedure (INSERT)",
				"activities": [
					{
						"name": "LoadSealsToStaging",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE staging_seals",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Raw_Mida_Seals_Excel",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "@pipeline().parameters.folderPath",
									"fileName": "@pipeline().parameters.fileName"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_SQL_Staging_Seals",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "ProcessSeals",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadSealsToStaging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "sp_process_seals"
						},
						"linkedServiceName": {
							"referenceName": "VFD_Big_Data_Azure_Sql",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"folderPath": {
						"type": "string",
						"defaultValue": "Mida/Seals/2025/09"
					},
					"fileName": {
						"type": "string",
						"defaultValue": "EmissioniGiornoPrecedente2025091704.xlsx"
					}
				},
				"folder": {
					"name": "Mida"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Raw_Mida_Seals_Excel')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_SQL_Staging_Seals')]",
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_Azure_Sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Process_Validations_Historical_Batch')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline master per processare tutti i file storici validations con Copy Data diretta a production_validations",
				"activities": [
					{
						"name": "Get Files List",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Raw_Mida_Validations_Binary",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "Mida/Storico/Validazioni/",
									"fileName": "*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": false,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Process Each File",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Files List",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Files List').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy Validations File to Production",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "VFD_DS_Raw_Mida_Validations_Excel_History",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": "Mida/Storico/Validazioni/",
												"fileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "VFD_DS_SQL_Production_Validations",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Mida/Batch"
				},
				"annotations": [
					"Pipeline master per processing storico validations con Copy Data diretta",
					"Processa file in sequenza per mantenere ordine cronologico"
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Raw_Mida_Validations_Binary')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Raw_Mida_Validations_Excel_History')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_SQL_Production_Validations')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Process_Validations_SQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline figlia: carica Validations Excel → SQL staging → stored procedure (INSERT)",
				"activities": [
					{
						"name": "LoadValidationsToStaging",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE staging_validations",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Raw_Mida_Validations_Excel",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "@pipeline().parameters.folderPath",
									"fileName": "@pipeline().parameters.fileName"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_SQL_Staging_Validations",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "ProcessValidations",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadValidationsToStaging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "sp_process_validations"
						},
						"linkedServiceName": {
							"referenceName": "VFD_Big_Data_Azure_Sql",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"folderPath": {
						"type": "string",
						"defaultValue": "Mida/Validations/2025/09"
					},
					"fileName": {
						"type": "string",
						"defaultValue": "VidimazioniGiornoPrecedente2025091704.xlsx"
					}
				},
				"folder": {
					"name": "Mida"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Raw_Mida_Validations_Excel')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_SQL_Staging_Validations')]",
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_Azure_Sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_SurveyMonkey_Gradimento_File')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ScanRawFiles",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Raw_SurveyMonkey_Gradimento_Excel",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "ForEachRawFile",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ScanRawFiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ScanRawFiles').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "SetYear",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "year",
										"value": {
											"value": "@item().path",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetFileName",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetYear",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileName",
										"value": {
											"value": "@replace(item().name, '.xlsx', '')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "CheckIfProcessedExists",
									"type": "GetMetadata",
									"dependsOn": [
										{
											"activity": "SetFileName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "VFD_DS_Processed_SurveyMonkey_Gradimento_Parquet",
											"type": "DatasetReference",
											"parameters": {
												"year": {
													"value": "@variables('year')",
													"type": "Expression"
												},
												"fileName": {
													"value": "@variables('fileName')",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "ParquetReadSettings"
										}
									}
								},
								{
									"name": "IfProcessedNotExists",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "CheckIfProcessedExists",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(activity('CheckIfProcessedExists').output.exists)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "CopyRawToProcessed",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "ExcelSource",
														"storeSettings": {
															"type": "AzureBlobFSReadSettings",
															"recursive": true,
															"wildcardFolderPath": {
																"value": "@concat('SurveyMonkey/Gradimento/', variables('year'))",
																"type": "Expression"
															},
															"wildcardFileName": {
																"value": "@item().name",
																"type": "Expression"
															},
															"enablePartitionDiscovery": false
														}
													},
													"sink": {
														"type": "ParquetSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "ParquetWriteSettings"
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "VFD_DS_Raw_SurveyMonkey_Gradimento_Excel",
														"type": "DatasetReference",
														"parameters": {}
													}
												],
												"outputs": [
													{
														"referenceName": "VFD_DS_Processed_SurveyMonkey_Gradimento_Parquet",
														"type": "DatasetReference",
														"parameters": {
															"year": {
																"value": "@variables('year')",
																"type": "Expression"
															},
															"fileName": {
																"value": "@variables('fileName')",
																"type": "Expression"
															}
														}
													}
												]
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"year": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "SurveyMonkey"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Raw_SurveyMonkey_Gradimento_Excel')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Processed_SurveyMonkey_Gradimento_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Utils_AccessAreas_Raw_Curated')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TicketArea_CopyRawToProcessed",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Raw_AccessAreas_Excel",
								"type": "DatasetReference",
								"parameters": {
									"fileName": "AssociazioneBigliettiAccessi.xlsx"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Processed_AccessAreas_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"fileName": "AssociazioneBigliettiAccessi.parquet"
								}
							}
						]
					},
					{
						"name": "TicketArea_CopyProcessedToCurated",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "TicketArea_CopyRawToProcessed",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Processed_AccessAreas_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"fileName": "AssociazioneBigliettiAccessi.parquet"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Curated_AccessAreas_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"fileName": "AssociazioneBigliettiAccessi.parquet"
								}
							}
						]
					},
					{
						"name": "AreaSiteID_CopyRawToProcessed",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "TicketArea_CopyProcessedToCurated",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Raw_AccessAreas_Excel",
								"type": "DatasetReference",
								"parameters": {
									"fileName": "AssociazioneAccessiSiteIDAffluences.xlsx"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Processed_AccessAreas_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"fileName": "AssociazioneAccessiSiteIDAffluences.parquet"
								}
							}
						]
					},
					{
						"name": "AreaSiteID_CopyProcessedToCurated",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "AreaSiteID_CopyRawToProcessed",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Processed_AccessAreas_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"fileName": "AssociazioneAccessiSiteIDAffluences.parquet"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Curated_AccessAreas_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"fileName": "AssociazioneAccessiSiteIDAffluences.parquet"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Utils/AccessAreas"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Raw_AccessAreas_Excel')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Processed_AccessAreas_Parquet')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_AccessAreas_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Weather_API_Daily')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline per acquisire dati meteo da Visual Crossing API e processarli",
				"activities": [
					{
						"name": "SetDataInizio",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "data_inizio",
							"value": {
								"value": "@coalesce(pipeline().parameters.data_inizio, formatDateTime(addDays(utcNow(), -1), 'yyyy-MM-dd'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetDataFine",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "data_fine",
							"value": {
								"value": "@coalesce(pipeline().parameters.data_fine, formatDateTime(addDays(utcNow(), -1), 'yyyy-MM-dd'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetLocation",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "location",
							"value": {
								"value": "@coalesce(pipeline().parameters.location, 'Milano')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetYear",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetDataInizio",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "year",
							"value": {
								"value": "@substring(variables('data_inizio'), 0, 4)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetMonth",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetYear",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "month",
							"value": {
								"value": "@substring(variables('data_inizio'), 5, 2)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetFolderPath",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetMonth",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "folderPath",
							"value": {
								"value": "@concat('Weather/', variables('year'), '/', variables('month'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetFileName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetDataFine",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetFolderPath",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileName",
							"value": {
								"value": "@concat('weather_', replace(variables('data_inizio'), '-', ''), '_', replace(variables('data_fine'), '-', ''), '.csv')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CheckIfExistsInRaw",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "SetFileName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Raw_Weather_CSV",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@variables('folderPath')",
										"type": "Expression"
									},
									"fileName": {
										"value": "@variables('fileName')",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "IfNotExistsInRaw",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckIfExistsInRaw",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(activity('CheckIfExistsInRaw').output.exists)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "CopyFromAPI",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET"
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".csv"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "VFD_DS_VisualCrossing_HTTP_CSV",
											"type": "DatasetReference",
											"parameters": {
												"data_inizio": "@variables('data_inizio')",
												"data_fine": "@variables('data_fine')",
												"location": "@variables('location')"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "VFD_DS_Raw_Weather_CSV",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": {
													"value": "@variables('folderPath')",
													"type": "Expression"
												},
												"fileName": {
													"value": "@variables('fileName')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Raw to Curated Pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "IfNotExistsInRaw",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "VFD_PL_Weather_Raw_Curated",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"folderPath": {
									"value": "@variables('folderPath')",
									"type": "Expression"
								},
								"fileName": {
									"value": "@variables('fileName')",
									"type": "Expression"
								},
								"year": {
									"value": "@variables('year')",
									"type": "Expression"
								},
								"month": {
									"value": "@variables('month')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"data_inizio": {
						"type": "String"
					},
					"data_fine": {
						"type": "String"
					},
					"location": {
						"type": "String",
						"defaultValue": "Milano"
					}
				},
				"variables": {
					"data_inizio": {
						"type": "String"
					},
					"data_fine": {
						"type": "String"
					},
					"location": {
						"type": "String"
					},
					"year": {
						"type": "String"
					},
					"month": {
						"type": "String"
					},
					"folderPath": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Visual Crossing/Weather"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Raw_Weather_CSV')]",
				"[concat(variables('factoryId'), '/pipelines/VFD_PL_Weather_Raw_Curated')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_VisualCrossing_HTTP_CSV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Weather_Raw_Curated')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline per convertire CSV meteo in Parquet e aggiornare file mensili con ForEach",
				"activities": [
					{
						"name": "Raw to Processed Transformation",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_Weather_Raw_Processed",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceRaw": {
										"folderPath": {
											"value": "@pipeline().parameters.folderPath",
											"type": "Expression"
										},
										"fileName": {
											"value": "@pipeline().parameters.fileName",
											"type": "Expression"
										}
									},
									"SinkProcessed": {
										"folderPath": {
											"value": "@pipeline().parameters.folderPath",
											"type": "Expression"
										},
										"fileName": "VFD_DFL_Weather_Raw_Processed_output.parquet"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "VFD-IR-DataflowExecution",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Coarse"
						}
					},
					{
						"name": "Copy Raw to Processed",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Raw to Processed Transformation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Processed_Weather_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.folderPath",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_Weather_Raw_Processed_output.parquet"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Processed_Weather_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.folderPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@replace(pipeline().parameters.fileName, '.csv', '.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Delete Temporary Processed",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy Raw to Processed",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Processed_Weather_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.folderPath",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_Weather_Raw_Processed_output.parquet"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Get Processed Data Rows",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Delete Temporary Processed",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"dataset": {
								"referenceName": "VFD_DS_Processed_Weather_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.folderPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@replace(pipeline().parameters.fileName, '.csv', '.parquet')",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Weather Row",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Processed Data Rows",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Processed Data Rows').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetRowYear",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "rowYear",
										"value": {
											"value": "@substring(item().datetime, 0, 4)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetRowMonth",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetRowYear",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "rowMonth",
										"value": {
											"value": "@substring(item().datetime, 5, 2)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetRowDate",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetRowMonth",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "rowDate",
										"value": {
											"value": "@item().datetime",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Update Monthly File",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "SetRowDate",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "VFD_DFL_Weather_Single_Row_To_Monthly",
											"type": "DataFlowReference",
											"parameters": {
												"target_date": {
													"value": "'@{variables('rowDate')}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"SourceProcessed": {
													"folderPath": {
														"value": "@pipeline().parameters.folderPath",
														"type": "Expression"
													},
													"fileName": {
														"value": "@replace(pipeline().parameters.fileName, '.csv', '.parquet')",
														"type": "Expression"
													}
												},
												"SourceCuratedExisting": {
													"folderPath": {
														"value": "@concat('Weather/',variables('rowYear'))",
														"type": "Expression"
													},
													"fileName": {
														"value": "@concat('weather_monthly_', variables('rowYear'), variables('rowMonth'), '.parquet')",
														"type": "Expression"
													}
												},
												"SinkCurated": {
													"folderPath": {
														"value": "@concat('Weather/',variables('rowYear'))",
														"type": "Expression"
													},
													"fileName": {
														"value": "@concat('VFD_DFL_Weather_Single_Row_To_Monthly_', variables('rowYear'), variables('rowMonth'), '_output.parquet')",
														"type": "Expression"
													}
												}
											}
										},
										"staging": {},
										"integrationRuntime": {
											"referenceName": "VFD-IR-DataflowExecution",
											"type": "IntegrationRuntimeReference"
										},
										"traceLevel": "Coarse"
									}
								},
								{
									"name": "Copy to Final Monthly File",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Update Monthly File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "ParquetReadSettings"
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "VFD_DS_Curated_Weather_Parquet",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": {
													"value": "@concat('Weather/',variables('rowYear'))",
													"type": "Expression"
												},
												"fileName": {
													"value": "VFD_DFL_Weather_Single_Row_To_Monthly_output.parquet",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "VFD_DS_Curated_Weather_Parquet",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": {
													"value": "@concat('Weather/',variables('rowYear'))",
													"type": "Expression"
												},
												"fileName": {
													"value": "@concat('weather_monthly_', variables('rowYear'), variables('rowMonth'), '.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete Temporary Monthly",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Copy to Final Monthly File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "VFD_DS_Curated_Weather_Parquet",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": {
													"value": "@concat('Weather/',variables('rowYear'))",
													"type": "Expression"
												},
												"fileName": {
													"value": "VFD_DFL_Weather_Single_Row_To_Monthly_output.parquet",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"folderPath": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					},
					"year": {
						"type": "String"
					},
					"month": {
						"type": "String"
					}
				},
				"variables": {
					"rowYear": {
						"type": "String"
					},
					"rowMonth": {
						"type": "String"
					},
					"rowDate": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Visual Crossing/Weather"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/VFD_DFL_Weather_Raw_Processed')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/VFD-IR-DataflowExecution')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Processed_Weather_Parquet')]",
				"[concat(variables('factoryId'), '/dataflows/VFD_DFL_Weather_Single_Row_To_Monthly')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Weather_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida_Validations_Raw_Processed')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Mida/Validations"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Affluences_API')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_LS_Affluences_API",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"siteUUID": {
						"type": "string"
					},
					"date": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Affluences"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@concat('historical/', dataset().siteUUID, '?date=', dataset().date)",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_LS_Affluences_API')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Cloud4Wi_Connections_HTTP')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_LS_Cloud4Wi_API",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"dateStart": {
						"type": "string"
					},
					"dateStop": {
						"type": "string"
					}
				},
				"folder": {
					"name": "WiFi/HTTP"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "@concat('/v2/organizations/55c9f26632e9fdf13d9a77df50d4f6cc/accountings?dateStart=', dataset().dateStart, '&dateEnd=', dataset().dateStop)",
							"type": "Expression"
						}
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"generated": {
							"type": "string"
						},
						"sId": {
							"type": "string"
						},
						"count": {
							"type": "integer"
						},
						"connections": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"customerId": {
										"type": "string"
									},
									"username": {
										"type": "string"
									},
									"organizationId": {
										"type": "string"
									},
									"start": {
										"type": "string"
									},
									"startBusiness": {
										"type": "string"
									},
									"stop": {
										"type": "string"
									},
									"stopBusiness": {
										"type": "string"
									},
									"duration": {
										"type": "integer"
									},
									"traffic": {
										"type": "integer"
									},
									"locationName": {
										"type": "string"
									},
									"locationId": {
										"type": "string"
									},
									"hotspotIdentifier": {
										"type": "string"
									},
									"hotspotId": {
										"type": "string"
									},
									"latitude": {
										"type": "number"
									},
									"longitude": {
										"type": "number"
									},
									"macAddressClient": {
										"type": "string"
									},
									"ipAddressClient": {
										"type": "string"
									},
									"terminateCause": {
										"type": "string"
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_LS_Cloud4Wi_API')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Cloud4Wi_Users_HTTP')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_LS_Cloud4Wi_API",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"username": {
						"type": "string"
					}
				},
				"folder": {
					"name": "WiFi/HTTP"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "@concat('/v2/customers/', dataset().username)",
							"type": "Expression"
						}
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"count": {
							"type": "integer"
						},
						"scrollId": {
							"type": "string"
						},
						"data": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"username": {
										"type": "string"
									},
									"firstName": {
										"type": "string"
									},
									"lastName": {
										"type": "string"
									},
									"email": {
										"type": "string"
									},
									"gender": {
										"type": "string"
									},
									"phone": {
										"type": "string"
									},
									"birthDate": {
										"type": "string"
									},
									"country": {
										"type": "string"
									},
									"zipCode": {
										"type": "string"
									},
									"companyName": {
										"type": "string"
									},
									"wifiArea": {
										"type": "string"
									},
									"creationDate": {
										"type": "string"
									},
									"marketing": {
										"type": "boolean"
									},
									"type": {
										"type": "string"
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_LS_Cloud4Wi_API')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Curated_AccessAreas_Parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Utils/AccessAreas"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": "utils/AccessAreas",
						"fileSystem": "curated"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Curated_Affluences_Daily_Parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderPath": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Affluences"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folderPath",
							"type": "Expression"
						},
						"fileSystem": "curated"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "site_id",
						"type": "UTF8"
					},
					{
						"name": "site_name",
						"type": "UTF8"
					},
					{
						"name": "date",
						"type": "DATE"
					},
					{
						"name": "hour",
						"type": "UTF8"
					},
					{
						"name": "occupancy",
						"type": "INT32"
					},
					{
						"name": "entries",
						"type": "INT32"
					},
					{
						"name": "exits",
						"type": "INT32"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Curated_Affluences_Monthly_Parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderPath": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Affluences"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folderPath",
							"type": "Expression"
						},
						"fileSystem": "curated"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "date",
						"type": "DATE"
					},
					{
						"name": "total_entries",
						"type": "INT32"
					},
					{
						"name": "ascensore_nord_entries",
						"type": "INT32"
					},
					{
						"name": "ascensore_sud_entries",
						"type": "INT32"
					},
					{
						"name": "salita_piedi_entries",
						"type": "INT32"
					},
					{
						"name": "discesa_piedi_entries",
						"type": "INT32"
					},
					{
						"name": "max_occupancy",
						"type": "INT32"
					},
					{
						"name": "max_occupancy_hour",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Curated_DuomoWiFi_Enriched_Parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"year": {
						"type": "string"
					},
					"month": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "WiFi/Curated"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@concat('Wifi/connections/', dataset().year, '/', dataset().month)",
							"type": "Expression"
						},
						"fileSystem": "curated"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "hotspotIdentifier",
						"type": "String"
					},
					{
						"name": "start",
						"type": "String"
					},
					{
						"name": "stop",
						"type": "String"
					},
					{
						"name": "duration",
						"type": "Int32"
					},
					{
						"name": "traffic",
						"type": "Int32"
					},
					{
						"name": "terminateCause",
						"type": "String"
					},
					{
						"name": "username",
						"type": "String"
					},
					{
						"name": "macAddressClient",
						"type": "String"
					},
					{
						"name": "ipAddressClient",
						"type": "String"
					},
					{
						"name": "locationId",
						"type": "String"
					},
					{
						"name": "customerId",
						"type": "String"
					},
					{
						"name": "sessionTime_minutes",
						"type": "Double"
					},
					{
						"name": "traffic_MB",
						"type": "Double"
					},
					{
						"name": "user_firstName",
						"type": "String"
					},
					{
						"name": "user_lastName",
						"type": "String"
					},
					{
						"name": "user_email",
						"type": "String"
					},
					{
						"name": "user_gender",
						"type": "String"
					},
					{
						"name": "user_phone",
						"type": "String"
					},
					{
						"name": "user_birthDate",
						"type": "String"
					},
					{
						"name": "user_country",
						"type": "String"
					},
					{
						"name": "user_zipCode",
						"type": "String"
					},
					{
						"name": "user_wifiArea",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Curated_SurveyMonkey_Gradimento_Parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"year": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "SurveyMonkey/Gradimento"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@concat('SurveyMonkey/Gradimento', dataset().year)",
							"type": "Expression"
						},
						"fileSystem": "curated"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Curated_Weather_Parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderPath": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Visual Crossing/Weather"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folderPath",
							"type": "Expression"
						},
						"fileSystem": "curated"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Mida_Bookings_FTPServer_Binary')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_LS_Mida_FtpServer",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Mida/Bookings"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "FtpServerLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": "vendite"
					},
					"sheetName": "export",
					"firstRowAsHeader": true
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_LS_Mida_FtpServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Mida_Bookings_FTPServer_Folder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_LS_Mida_FtpServer",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Mida/Bookings"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "FtpServerLocation",
						"fileName": "*.xlsx",
						"folderPath": "vendite"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_LS_Mida_FtpServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Mida_Seals_FTPServer_Binary')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_LS_Mida_FtpServer",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Mida/Seals"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "FtpServerLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": "emissioni_new"
					},
					"sheetName": "Emissioni di ieri",
					"firstRowAsHeader": true
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_LS_Mida_FtpServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Mida_Seals_FTPServer_Folder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_LS_Mida_FtpServer",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Mida/Seals"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "FtpServerLocation",
						"folderPath": "emissioni_new"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_LS_Mida_FtpServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Mida_Validations_FTPServer_Binary')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_LS_Mida_FtpServer",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Mida/Validations"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "FtpServerLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": "vidimazioni_new"
					},
					"sheetName": "Vidimazioni di ieri",
					"firstRowAsHeader": true
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_LS_Mida_FtpServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Mida_Validations_FTPServer_Folder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_LS_Mida_FtpServer",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Mida/Validations"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "FtpServerLocation",
						"folderPath": "vidimazioni_new"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_LS_Mida_FtpServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Processed_AccessAreas_Parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Utils/AccessAreas"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": "utils/AccessAreas",
						"fileSystem": "processed"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Processed_Affluences_Parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderPath": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Affluences"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folderPath",
							"type": "Expression"
						},
						"fileSystem": "processed"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "site_id",
						"type": "UTF8"
					},
					{
						"name": "site_name",
						"type": "UTF8"
					},
					{
						"name": "date",
						"type": "DATE"
					},
					{
						"name": "hour",
						"type": "UTF8"
					},
					{
						"name": "occupancy",
						"type": "INT32"
					},
					{
						"name": "entries",
						"type": "INT32"
					},
					{
						"name": "exits",
						"type": "INT32"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Processed_DuomoWiFi_Connections_Parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"year": {
						"type": "string"
					},
					"month": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "WiFi/Processed"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@concat('Wifi/connections/', dataset().year, '/', dataset().month)",
							"type": "Expression"
						},
						"fileSystem": "processed"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "hotspotIdentifier",
						"type": "String"
					},
					{
						"name": "start",
						"type": "String"
					},
					{
						"name": "stop",
						"type": "String"
					},
					{
						"name": "duration",
						"type": "Int32"
					},
					{
						"name": "traffic",
						"type": "Int32"
					},
					{
						"name": "terminateCause",
						"type": "String"
					},
					{
						"name": "username",
						"type": "String"
					},
					{
						"name": "macAddressClient",
						"type": "String"
					},
					{
						"name": "ipAddressClient",
						"type": "String"
					},
					{
						"name": "locationId",
						"type": "String"
					},
					{
						"name": "customerId",
						"type": "String"
					},
					{
						"name": "sessionTime_minutes",
						"type": "Double"
					},
					{
						"name": "traffic_MB",
						"type": "Double"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Processed_DuomoWiFi_Users_Parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"year": {
						"type": "string"
					},
					"month": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "WiFi/Processed"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@concat('Wifi/users/', dataset().year, '/', dataset().month)",
							"type": "Expression"
						},
						"fileSystem": "processed"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "cid",
						"type": "String"
					},
					{
						"name": "username",
						"type": "String"
					},
					{
						"name": "firstName",
						"type": "String"
					},
					{
						"name": "lastName",
						"type": "String"
					},
					{
						"name": "email",
						"type": "String"
					},
					{
						"name": "gender",
						"type": "String"
					},
					{
						"name": "phone",
						"type": "String"
					},
					{
						"name": "birthDate",
						"type": "String"
					},
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "zipCode",
						"type": "String"
					},
					{
						"name": "wifiArea",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Processed_Mida_Validations_Parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderPath": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Mida/Validations"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folderPath",
							"type": "Expression"
						},
						"fileSystem": "processed"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Processed_SurveyMonkey_Gradimento_Parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"year": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "SurveyMonkey/Gradimento"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@concat('SurveyMonkey/Gradimento', dataset().year)",
							"type": "Expression"
						},
						"fileSystem": "processed"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Processed_Weather_Parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderPath": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Visual Crossing/Weather"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folderPath",
							"type": "Expression"
						},
						"fileSystem": "processed"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Raw_AccessAreas_Excel')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Utils/AccessAreas"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Associazioni",
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": "utils/AccessAreas",
						"fileSystem": "raw"
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Raw_Affluences_CSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderPath": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Affluences"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folderPath",
							"type": "Expression"
						},
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "site_id",
						"type": "String"
					},
					{
						"name": "site_name",
						"type": "String"
					},
					{
						"name": "date",
						"type": "String"
					},
					{
						"name": "hour",
						"type": "String"
					},
					{
						"name": "occupancy",
						"type": "String"
					},
					{
						"name": "entries",
						"type": "String"
					},
					{
						"name": "exits",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Raw_Affluences_JSON')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderPath": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Affluences"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folderPath",
							"type": "Expression"
						},
						"fileSystem": "raw"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"data": {
							"type": "object",
							"properties": {
								"results": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"day": {
												"type": "string"
											},
											"entries": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"hour": {
															"type": "string"
														},
														"occupancy": {
															"type": "integer"
														},
														"entries": {
															"type": "integer"
														},
														"exits": {
															"type": "integer"
														}
													}
												}
											}
										}
									}
								},
								"site_id": {
									"type": "string"
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Raw_DuomoWiFi_Connections_JSON')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"year": {
						"type": "string"
					},
					"month": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "WiFi/Raw"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@concat('Wifi/connections/', dataset().year, '/', dataset().month)",
							"type": "Expression"
						},
						"fileSystem": "raw"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"generated": {
							"type": "string"
						},
						"sId": {
							"type": "string"
						},
						"count": {
							"type": "integer"
						},
						"connections": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"customerId": {
										"type": "string"
									},
									"username": {
										"type": "string"
									},
									"organizationId": {
										"type": "string"
									},
									"start": {
										"type": "string"
									},
									"startBusiness": {
										"type": "string"
									},
									"stop": {
										"type": "string"
									},
									"stopBusiness": {
										"type": "string"
									},
									"duration": {
										"type": "integer"
									},
									"traffic": {
										"type": "integer"
									},
									"locationName": {
										"type": "string"
									},
									"locationId": {
										"type": "string"
									},
									"hotspotIdentifier": {
										"type": "string"
									},
									"hotspotId": {
										"type": "string"
									},
									"latitude": {
										"type": "number"
									},
									"longitude": {
										"type": "number"
									},
									"macAddressClient": {
										"type": "string"
									},
									"ipAddressClient": {
										"type": "string"
									},
									"terminateCause": {
										"type": "string"
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Raw_DuomoWiFi_Users_JSON')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "string"
					},
					"year": {
						"type": "string"
					},
					"month": {
						"type": "string"
					}
				},
				"folder": {
					"name": "WiFi/Raw"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@concat('Wifi/users/', dataset().year, '/', dataset().month)",
							"type": "Expression"
						},
						"fileSystem": "raw"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Raw_Mida_Bookings_Binary')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderPath": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Mida/Bookings"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folderPath",
							"type": "Expression"
						},
						"fileSystem": "raw"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Raw_Mida_Bookings_Excel')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderPath": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Mida/Bookings"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "export",
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folderPath",
							"type": "Expression"
						},
						"fileSystem": "raw"
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Raw_Mida_Bookings_Folder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderPath": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Mida/Bookings"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().folderPath",
							"type": "Expression"
						},
						"fileSystem": "raw"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Raw_Mida_Seals_Binary')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderPath": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Mida/Seals"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folderPath",
							"type": "Expression"
						},
						"fileSystem": "raw"
					},
					"sheetName": "Emissioni di ieri",
					"firstRowAsHeader": true
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Raw_Mida_Seals_Excel')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderPath": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Mida/Seals"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Emissioni",
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folderPath",
							"type": "Expression"
						},
						"fileSystem": "raw"
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Raw_Mida_Seals_Excel_History')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderPath": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Mida/Seals"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "sheet1",
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folderPath",
							"type": "Expression"
						},
						"fileSystem": "raw"
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Raw_Mida_Validations_Binary')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderPath": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Mida/Validations"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folderPath",
							"type": "Expression"
						},
						"fileSystem": "raw"
					},
					"sheetName": "Vidimazioni di ieri",
					"firstRowAsHeader": true
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Raw_Mida_Validations_Excel')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderPath": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Mida/Validations"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Vidimazioni",
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folderPath",
							"type": "Expression"
						},
						"fileSystem": "raw"
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Raw_Mida_Validations_Excel_History')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderPath": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Mida/Validations"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "sheet1",
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folderPath",
							"type": "Expression"
						},
						"fileSystem": "raw"
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Raw_SurveyMonkey_Gradimento_Excel')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "SurveyMonkey/Gradimento"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sheet",
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "SurveyMonkey/Gradimento/2025",
						"fileSystem": "raw"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Raw_Weather_CSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderPath": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Visual Crossing/Weather"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folderPath",
							"type": "Expression"
						},
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_SQL_Production_Bookings')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_Azure_Sql",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Mida/Bookings"
				},
				"annotations": [
					"Production table bookings - DELETE/INSERT per reservationCode con CASCADE su seals"
				],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "production_bookings"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_Azure_Sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_SQL_Production_Historical')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_Azure_Sql",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Mida/Bookings"
				},
				"annotations": [
					"Production table historical - Audit trail append-only per tutte le elaborazioni bookings"
				],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "production_historical"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_Azure_Sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_SQL_Production_Seals')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_Azure_Sql",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Mida/Seals"
				},
				"annotations": [
					"Production table seals - FK verso bookings con CASCADE DELETE - Solo INSERT"
				],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "production_seals"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_Azure_Sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_SQL_Production_Validations')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_Azure_Sql",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Mida/Validations"
				},
				"annotations": [
					"Production table validations - Solo INSERT, nessuna logica DELETE"
				],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "production_validations"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_Azure_Sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_SQL_Staging_Bookings')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_Azure_Sql",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Mida/Bookings"
				},
				"annotations": [
					"Staging table per caricamento dati bookings da RAW - 82 campi"
				],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "staging_bookings"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_Azure_Sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_SQL_Staging_Seals')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_Azure_Sql",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Mida/Seals"
				},
				"annotations": [
					"Staging table per caricamento dati seals da RAW"
				],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "staging_seals"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_Azure_Sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_SQL_Staging_Validations')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_Azure_Sql",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Mida/Validations"
				},
				"annotations": [
					"Staging table per caricamento dati validations da RAW"
				],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "staging_validations"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_Azure_Sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_SQL_Test_Bookings')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_Azure_Sql",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Mida/Bookings"
				},
				"annotations": [
					"Production table bookings - DELETE/INSERT per reservationCode con CASCADE su seals"
				],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "test_bookings"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_Azure_Sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Temp_Affluences_JSON')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Affluences"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": "temp/affluences",
						"fileSystem": "staging"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"data": {
							"type": "object",
							"properties": {
								"results": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"day": {
												"type": "string"
											},
											"entries": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"hour": {
															"type": "string"
														},
														"occupancy": {
															"type": "integer"
														},
														"entries": {
															"type": "integer"
														},
														"exits": {
															"type": "integer"
														}
													}
												}
											}
										}
									}
								},
								"site_id": {
									"type": "string"
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_VisualCrossing_HTTP_CSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_LS_VisualCrossing_HTTP",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"data_inizio": {
						"type": "string"
					},
					"data_fine": {
						"type": "string"
					},
					"location": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Visual Crossing/Weather"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "@concat(dataset().location,'/',dataset().data_inizio,'/',dataset().data_fine,'?unitGroup=metric&elements=datetime%2Cname%2Ctempmax%2Ctempmin%2Ctemp%2Cfeelslikemax%2Cfeelslikemin%2Cfeelslike%2Chumidity%2Cprecip%2Cpreciptype%2Cwindgust%2Cwindspeed%2Ccloudcover%2Cvisibility%2Csunset%2Cconditions%2Cdescription%2Cicon&include=days%2C&key=K8ZWJUA9BMDLD97KL8KGY292Y&contentType=csv')",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"rowDelimiter": "\n",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_LS_VisualCrossing_HTTP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_VisualCrossing_Historical_API')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_LS_VisualCrossing_API",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"data_inizio": {
						"type": "string"
					},
					"data_fine": {
						"type": "string"
					},
					"location": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Visual Crossing/Weather"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@concat(dataset().location,'/',dataset().data_inizio,'/',dataset().data_fine,'?unitGroup=metric&elements=datetime%2Cname%2Ctempmax%2Ctempmin%2Ctemp%2Cfeelslikemax%2Cfeelslikemin%2Cfeelslike%2Chumidity%2Cprecip%2Cpreciptype%2Cwindgust%2Cwindspeed%2Ccloudcover%2Cvisibility%2Csunset%2Cconditions%2Cdescription%2Cicon&include=days%2C&key=K8ZWJUA9BMDLD97KL8KGY292Y&contentType=csv')",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_LS_VisualCrossing_API')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_Big_Data_Azure_Sql')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('VFD_Big_Data_Azure_Sql_properties_typeProperties_server')]",
					"database": "[parameters('VFD_Big_Data_Azure_Sql_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('VFD_Big_Data_Azure_Sql_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('VFD_Big_Data_Azure_Sql_password')]"
					}
				},
				"connectVia": {
					"referenceName": "VFD-IR-DataflowExecution",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/VFD-IR-DataflowExecution')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_Big_Data_DL')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Data Lake per la raccolta di tutti i dati da analizzare e utilizzare per la creazione delle dashboard.",
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('VFD_Big_Data_DL_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('VFD_Big_Data_DL_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "VFD-IR-DataflowExecution",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/VFD-IR-DataflowExecution')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_LS_Affluences_API')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('VFD_LS_Affluences_API_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				},
				"connectVia": {
					"referenceName": "VFD-IR-DataflowExecution",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/VFD-IR-DataflowExecution')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_LS_Cloud4Wi_API')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('VFD_LS_Cloud4Wi_API_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				},
				"connectVia": {
					"referenceName": "VFD-IR-DataflowExecution",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/VFD-IR-DataflowExecution')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_LS_Mida_FtpServer')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "FtpServer",
				"typeProperties": {
					"host": "[parameters('VFD_LS_Mida_FtpServer_properties_typeProperties_host')]",
					"port": "52013",
					"enableSsl": false,
					"enableServerCertificateValidation": false,
					"authenticationType": "Basic",
					"userName": "[parameters('VFD_LS_Mida_FtpServer_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('VFD_LS_Mida_FtpServer_password')]"
					}
				},
				"connectVia": {
					"referenceName": "VFD-IR-DataflowExecution",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/VFD-IR-DataflowExecution')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_LS_VisualCrossing_API')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Linked service per le API di Visual Crossing per i dati meteo",
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('VFD_LS_VisualCrossing_API_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				},
				"connectVia": {
					"referenceName": "VFD-IR-DataflowExecution",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/VFD-IR-DataflowExecution')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_LS_VisualCrossing_HTTP')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('VFD_LS_VisualCrossing_HTTP_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				},
				"connectVia": {
					"referenceName": "VFD-IR-DataflowExecution",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/VFD-IR-DataflowExecution')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_TRG_Affluences_Daily')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "VFD_PL_Affluences_Daily_v2",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2025-06-11T06:00:00",
						"timeZone": "W. Europe Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/VFD_PL_Affluences_Daily_v2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_TRG_Mida_Bookings_FTP_Schedule')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "VFD_PL_MIDA_SQL_Master",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2025-07-11T04:00:00",
						"timeZone": "W. Europe Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								6
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/VFD_PL_MIDA_SQL_Master')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_TRG_Weather_API_Daily')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "VFD_PL_Weather_API_Daily",
							"type": "PipelineReference"
						},
						"parameters": {
							"location": "[parameters('VFD_TRG_Weather_API_Daily_properties_VFD_PL_Weather_API_Daily_parameters_location')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2025-07-05T06:00:00",
						"timeZone": "W. Europe Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/VFD_PL_Weather_API_Daily')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_TRG_WiFi_Daily')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "VFD_PL_DuomoWiFi_Daily",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2025-07-11T16:00:00",
						"timeZone": "W. Europe Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								4
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/VFD_PL_DuomoWiFi_Daily')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IRTest')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "Central US",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 10,
							"cleanup": false,
							"customProperties": []
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD-IR-DataflowExecution')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"description": "IR dedicated to the execution of VFD dataflows and transformation",
				"typeProperties": {
					"computeProperties": {
						"location": "Italy North",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 10,
							"cleanup": false,
							"customProperties": []
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TestDFL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "VFD_Big_Data_DL",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "VFD_Big_Data_DL",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'raw',",
						"     fileName: 'test.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'raw',",
						"     folderPath: 'test1.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Affluences_Daily_to_Curated')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Affluences"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Processed_Affluences_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceProcessed"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Affluences_Daily_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkCuratedDaily"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          site_id as string,",
						"          site_name as string,",
						"          date as date,",
						"          hour as string,",
						"          occupancy as integer,",
						"          entries as integer,",
						"          exits as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceProcessed",
						"SourceProcessed sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          site_id as string,",
						"          site_name as string,",
						"          date as date,",
						"          hour as string,",
						"          occupancy as integer,",
						"          entries as integer,",
						"          exits as integer",
						"     ),",
						"     format: 'parquet',",
						"     partitionFileNames:['VFD_DFL_Affluences_Daily_to_Curated_output.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1),",
						"     compressionCodec: 'snappy') ~> SinkCuratedDaily"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Processed_Affluences_Parquet')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Affluences_Daily_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Affluences_JSON_to_Processed')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Affluences"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Raw_Affluences_JSON",
								"type": "DatasetReference"
							},
							"name": "SourceJSON"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Processed_Affluences_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkProcessed"
						}
					],
					"transformations": [
						{
							"name": "FlattenJSON"
						},
						{
							"name": "ExpandEntries"
						},
						{
							"name": "AddSiteName"
						},
						{
							"name": "ConvertTypes"
						}
					],
					"scriptLines": [
						"parameters{",
						"     year as string,",
						"     month as string,",
						"     dateFormatted as string",
						"}",
						"source(output(",
						"          data as (results as (day as string, entries as (hour as string, occupancy as integer, entries as integer, exits as integer)[])[], site_id as string)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine',",
						"     wildcardPaths:[(concat(\"/Affluences/\",$year,\"/\",$month,\"/VFD_Affluences_\",$dateFormatted,\"_*.json\"))]) ~> SourceJSON",
						"SourceJSON foldDown(unroll(data.results, data.results),",
						"     mapColumn(",
						"          day = data.results.day,",
						"          entries = data.results.entries,",
						"          site_uuid = data.site_id",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenJSON",
						"FlattenJSON foldDown(unroll(entries, entries),",
						"     mapColumn(",
						"          site_uuid,",
						"          day,",
						"          hour = entries.hour,",
						"          occupancy = entries.occupancy,",
						"          entries_count = entries.entries,",
						"          exits_count = entries.exits",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> ExpandEntries",
						"ExpandEntries derive(site_name = case(",
						"     site_uuid == '5a2757bc-e1c6-4d5e-9db3-edfc4e9c9307', 'Terrazze',",
						"     site_uuid == 'ca2dae61-4a99-4cb7-8051-26cb852ea408', 'Ascensore Nord',",
						"     site_uuid == 'aa6c22f1-84b6-441a-bbb0-bd429e63536d', 'Ascensore Sud',",
						"     site_uuid == '8358df5f-0186-4a11-87ad-11fc19cda749', 'Salita a piedi',",
						"     site_uuid == '639bc326-010a-402f-ba5f-3c75e2740d9d', 'Discesa a piedi',",
						"     site_uuid == '7aa7cba8-5304-4004-9f6e-d2682171f1d6', 'Camminamento Nord',",
						"     site_uuid == 'a0c0589a-99c2-4362-8738-08dc197493f7', 'Camminamento Sud',",
						"     site_uuid == '505bc53f-c1c7-405c-b8bb-ce9cf3d09ee2', 'Biglietteria - Sala delle Colonne (interna)',",
						"     site_uuid == '0348a0da-4dd2-4f27-a05f-48af4403c4d7', 'Interno Cattedrale',",
						"     site_uuid == '7a77ed7f-a721-49b0-bdb6-b971bb356ef8', 'Retrocoro',",
						"     site_uuid == '15ebae77-84f6-4531-bbf8-aeb93f3a42ff', 'Controfacciata Sud',",
						"     site_uuid == '5515cda5-6aca-4e01-99d1-28f18d29a23b', 'Controfacciata Nord',",
						"     site_uuid == '37f04685-c7f5-47dc-9503-6aeeb96670ce', 'Totale sito - Duomo di Milano',",
						"     site_uuid == '439ec300-cc77-4741-9797-8b4e6f99a5d7', '4e - Facciata - Portone estremo Nord',",
						"     site_uuid == '271a2467-e84a-41b2-9365-e50195c6f140', '4d - Facciata - Portone mediano Nord',",
						"     site_uuid == 'bfbd2f6d-5ab0-4227-8ea9-8fbca8532ca2', '4c - Facciata - Portone centrale',",
						"     site_uuid == '7ee3fc1b-7e88-4893-ae2a-da8ac24e145c', '4b - Facciata - Portone mediano Sud',",
						"     site_uuid == '356ff213-0101-4736-a9d4-41d6e028814f', '4a - Facciata - Portone estremo Sud',",
						"     site_uuid == 'bafb1070-294a-4e2e-946c-d442864f8b0b', '8b - Portina uscita visitatori',",
						"     site_uuid == 'a9c1ddc4-ab1d-4db5-b9cd-e62545fc36df', '8a - Portina ingresso fedeli',",
						"     site_uuid == 'f83757c5-3cb6-42db-8693-31b3dec5f34f', 'Terrazza Centrale',",
						"     site_uuid == 'cec6caef-3c29-44ed-af84-15357f3a1d6d', 'Cattedrale Fedeli',",
						"     site_uuid == '43a31887-e907-4d30-959a-dddf2b9d30bd', 'Cattedrale Visitatori (con biglietto)',",
						"     site_uuid == '281187e6-8430-42ee-8b42-7cacc4a1049b', 'Entrate Camminamento Nord - Retrocoro uscita',",
						"     site_uuid == '2aba3fc3-2c00-4af6-bf12-64521f50f884', 'ATTESA BIGLIETTERIA (fila esterna)',",
						"     site_uuid == '605fa1ca-fc2e-43be-9c6e-5865f2a38419', 'ATTESA BIGLIETTERIA',",
						"     site_uuid == '6775d267-82b6-46e7-897f-63ed58bd8542', 'ATTESA - MUSEO DEL DUOMO',",
						"     site_uuid == '58914401-0e45-42b0-b4aa-795fff056eb2', 'ATTESA - ASCENSORE SUD',",
						"     site_uuid == 'abd51dae-b178-4135-bd70-e57dd8cef99a', 'ATTESA - ASCENSORE NORD',",
						"     site_uuid == 'cd8c3b53-98e2-4794-90d8-4e0a20f8270e', 'ATTESA - SALITA A PIEDI',",
						"     site_uuid == 'c3a83ec1-a1f5-4ed5-ad2a-00df3767a380', 'ATTESA - ACCESSO AL DUOMO',",
						"     'Unknown'",
						")) ~> AddSiteName",
						"AddSiteName derive(date = toDate(day, 'yyyy-MM-dd'),",
						"          site_id = site_uuid) ~> ConvertTypes",
						"ConvertTypes sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          site_id as string,",
						"          site_name as string,",
						"          date as date,",
						"          hour as string,",
						"          occupancy as integer,",
						"          entries as integer,",
						"          exits as integer",
						"     ),",
						"     format: 'parquet',",
						"     partitionFileNames:['VFD_DFL_Affluences_JSON_to_Processed_output.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          site_id,",
						"          site_name,",
						"          date,",
						"          hour,",
						"          occupancy,",
						"          entries = entries_count,",
						"          exits = exits_count",
						"     ),",
						"     partitionBy('hash', 1),",
						"     folderPath: concat(\"Affluences/\", $year, \"/\", $month),",
						"     compressionCodec: 'snappy') ~> SinkProcessed"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Raw_Affluences_JSON')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Processed_Affluences_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Affluences_Monthly_Aggregation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Affluences"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Processed_Affluences_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceNewData"
						},
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Affluences_Monthly_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceExistingMonthly"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Affluences_Monthly_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkMonthly"
						}
					],
					"transformations": [
						{
							"name": "FilterEntryPoints"
						},
						{
							"name": "CleanSiteNames"
						},
						{
							"name": "AggregateByDate"
						},
						{
							"name": "FilterTerrazze"
						},
						{
							"name": "MaxOccupancyOnly"
						},
						{
							"name": "JoinWithMax"
						},
						{
							"name": "FilterMaxOccupancy"
						},
						{
							"name": "MaxOccupancyByDate"
						},
						{
							"name": "PivotEntries"
						},
						{
							"name": "CalculateTotals"
						},
						{
							"name": "JoinAggregations"
						},
						{
							"name": "CleanJoinOutput"
						},
						{
							"name": "GetCurrentDateFromNew"
						},
						{
							"name": "FilterExistingData"
						},
						{
							"name": "UnionWithExisting"
						}
					],
					"scriptLines": [
						"source(output(",
						"          site_id as string,",
						"          site_name as string,",
						"          date as date,",
						"          hour as string,",
						"          occupancy as integer,",
						"          entries as integer,",
						"          exits as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceNewData",
						"source(output(",
						"          date as date,",
						"          total_entries as integer,",
						"          ascensore_nord_entries as integer,",
						"          ascensore_sud_entries as integer,",
						"          salita_piedi_entries as integer,",
						"          discesa_piedi_entries as integer,",
						"          max_occupancy as integer,",
						"          max_occupancy_hour as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     format: 'parquet') ~> SourceExistingMonthly",
						"SourceNewData filter(site_name == 'Ascensore Nord' || site_name == 'Ascensore Sud' || site_name == 'Salita a piedi' || site_name == 'Discesa a piedi') ~> FilterEntryPoints",
						"FilterEntryPoints derive(site_name_clean = case(",
						"     site_name == 'Ascensore Nord', 'AscensoreNord',",
						"     site_name == 'Ascensore Sud', 'AscensoreSud',",
						"     site_name == 'Salita a piedi', 'SalitaPiedi',",
						"     site_name == 'Discesa a piedi', 'DiscesaPiedi',",
						"     site_name",
						")) ~> CleanSiteNames",
						"CleanSiteNames aggregate(groupBy(date,",
						"          site_name_clean),",
						"     entries_sum = sum(entries)) ~> AggregateByDate",
						"SourceNewData filter(site_name == 'Terrazze') ~> FilterTerrazze",
						"FilterTerrazze aggregate(groupBy(date),",
						"     max_occupancy = max(occupancy)) ~> MaxOccupancyOnly",
						"FilterTerrazze, MaxOccupancyOnly join(SourceNewData@date == MaxOccupancyOnly@date,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinWithMax",
						"JoinWithMax filter(occupancy == max_occupancy) ~> FilterMaxOccupancy",
						"FilterMaxOccupancy aggregate(groupBy(SourceNewData@date,",
						"          max_occupancy),",
						"     max_occupancy_hour = first(hour)) ~> MaxOccupancyByDate",
						"AggregateByDate pivot(groupBy(date),",
						"     pivotBy(site_name_clean, ['AscensoreNord', 'AscensoreSud', 'SalitaPiedi', 'DiscesaPiedi']),",
						"     entries_sum = sum(entries_sum),",
						"     columnNaming: '$N$V',",
						"     lateral: true) ~> PivotEntries",
						"PivotEntries derive(ascensore_nord_entries = coalesce(entries_sumAscensoreNord, 0),",
						"          ascensore_sud_entries = coalesce(entries_sumAscensoreSud, 0),",
						"          salita_piedi_entries = coalesce(entries_sumSalitaPiedi, 0),",
						"          discesa_piedi_entries = coalesce(entries_sumDiscesaPiedi, 0),",
						"          total_entries = coalesce(entries_sumAscensoreNord, 0) + coalesce(entries_sumAscensoreSud, 0) + coalesce(entries_sumSalitaPiedi, 0) + coalesce(entries_sumDiscesaPiedi, 0)) ~> CalculateTotals",
						"CalculateTotals, MaxOccupancyByDate join(PivotEntries@date == MaxOccupancyByDate@date,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinAggregations",
						"JoinAggregations select(mapColumn(",
						"          date = PivotEntries@date,",
						"          total_entries,",
						"          ascensore_nord_entries,",
						"          ascensore_sud_entries,",
						"          salita_piedi_entries,",
						"          discesa_piedi_entries,",
						"          max_occupancy,",
						"          max_occupancy_hour",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> CleanJoinOutput",
						"CleanJoinOutput derive(current_date_value = date) ~> GetCurrentDateFromNew",
						"SourceExistingMonthly, GetCurrentDateFromNew exists(SourceExistingMonthly@date == current_date_value,",
						"     negate:true,",
						"     broadcast: 'auto')~> FilterExistingData",
						"FilterExistingData, CleanJoinOutput union(byName: true,",
						"     partitionBy('hash', 1))~> UnionWithExisting",
						"UnionWithExisting sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          date as date,",
						"          total_entries as integer,",
						"          ascensore_nord_entries as integer,",
						"          ascensore_sud_entries as integer,",
						"          salita_piedi_entries as integer,",
						"          discesa_piedi_entries as integer,",
						"          max_occupancy as integer,",
						"          max_occupancy_hour as string",
						"     ),",
						"     format: 'parquet',",
						"     partitionFileNames:['VFD_DFL_Affluences_Monthly_Aggregation_output.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1),",
						"     compressionCodec: 'snappy') ~> SinkMonthly"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Processed_Affluences_Parquet')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Affluences_Monthly_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_DuomoWiFi_Connections_Raw_Processed')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Trasforma connessioni da JSON Raw a Parquet Processed con calcoli e conversioni",
				"folder": {
					"name": "WiFi"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Raw_DuomoWiFi_Connections_JSON",
								"type": "DatasetReference"
							},
							"name": "SourceConnectionsJSON"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Processed_DuomoWiFi_Connections_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkConnectionsParquet"
						}
					],
					"transformations": [
						{
							"name": "FlattenData"
						},
						{
							"name": "DerivedColumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          generated as string,",
						"          sId as string,",
						"          count as integer,",
						"          connections as (customerId as string, username as string, organizationId as string, start as string, startBusiness as string, stop as string, stopBusiness as string, duration as integer, traffic as integer, locationName as string, locationId as string, hotspotIdentifier as string, hotspotId as string, latitude as double, longitude as double, macAddressClient as string, ipAddressClient as string, terminateCause as string)[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> SourceConnectionsJSON",
						"SourceConnectionsJSON foldDown(unroll(connections),",
						"     mapColumn(",
						"          hotspotIdentifier = connections.hotspotIdentifier,",
						"          start = connections.start,",
						"          stop = connections.stop,",
						"          duration = connections.duration,",
						"          traffic = connections.traffic,",
						"          terminateCause = connections.terminateCause,",
						"          username = connections.username,",
						"          macAddressClient = connections.macAddressClient,",
						"          ipAddressClient = connections.ipAddressClient,",
						"          locationId = connections.locationId,",
						"          customerId = connections.customerId",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenData",
						"FlattenData derive(sessionTime_minutes = duration / 60,",
						"          traffic_MB = traffic / (1024 * 1024)) ~> DerivedColumns",
						"DerivedColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          hotspotIdentifier as string,",
						"          start as string,",
						"          stop as string,",
						"          duration as integer,",
						"          traffic as integer,",
						"          terminateCause as string,",
						"          username as string,",
						"          macAddressClient as string,",
						"          ipAddressClient as string,",
						"          locationId as string,",
						"          customerId as string,",
						"          sessionTime_minutes as double,",
						"          traffic_MB as double",
						"     ),",
						"     format: 'parquet',",
						"     partitionFileNames:['VFD_DFL_DuomoWiFi_Connections_Raw_Processed_output.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     partitionBy('hash', 1),",
						"     compressionCodec: 'snappy') ~> SinkConnectionsParquet"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Raw_DuomoWiFi_Connections_JSON')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Processed_DuomoWiFi_Connections_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_DuomoWiFi_Processed_Curated')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Esegue left join tra connessioni e utenti per creare dataset arricchito",
				"folder": {
					"name": "WiFi"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Processed_DuomoWiFi_Connections_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceConnections"
						},
						{
							"dataset": {
								"referenceName": "VFD_DS_Processed_DuomoWiFi_Users_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceUsers"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_DuomoWiFi_Enriched_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkEnrichedData"
						}
					],
					"transformations": [
						{
							"name": "LeftJoinConnectionsUsers"
						},
						{
							"name": "SelectAndRenameColumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          hotspotIdentifier as string,",
						"          start as string,",
						"          stop as string,",
						"          duration as integer,",
						"          traffic as integer,",
						"          terminateCause as string,",
						"          username as string,",
						"          macAddressClient as string,",
						"          ipAddressClient as string,",
						"          locationId as string,",
						"          customerId as string,",
						"          sessionTime_minutes as double,",
						"          traffic_MB as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceConnections",
						"source(output(",
						"          cid as string,",
						"          username as string,",
						"          firstName as string,",
						"          lastName as string,",
						"          email as string,",
						"          gender as string,",
						"          phone as string,",
						"          birthDate as string,",
						"          country as string,",
						"          zipCode as string,",
						"          wifiArea as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceUsers",
						"SourceConnections, SourceUsers join(SourceConnections@username == SourceUsers@username,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> LeftJoinConnectionsUsers",
						"LeftJoinConnectionsUsers select(mapColumn(",
						"          hotspotIdentifier,",
						"          start,",
						"          stop,",
						"          duration,",
						"          traffic,",
						"          terminateCause,",
						"          username = SourceConnections@username,",
						"          macAddressClient,",
						"          ipAddressClient,",
						"          locationId,",
						"          customerId,",
						"          sessionTime_minutes,",
						"          traffic_MB,",
						"          user_cid = cid,",
						"          user_firstName = firstName,",
						"          user_lastName = lastName,",
						"          user_email = email,",
						"          user_gender = gender,",
						"          user_phone = phone,",
						"          user_birthDate = birthDate,",
						"          user_country = country,",
						"          user_zipCode = zipCode,",
						"          user_wifiArea = wifiArea",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> SelectAndRenameColumns",
						"SelectAndRenameColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          hotspotIdentifier as string,",
						"          start as string,",
						"          stop as string,",
						"          duration as integer,",
						"          traffic as integer,",
						"          terminateCause as string,",
						"          username as string,",
						"          macAddressClient as string,",
						"          ipAddressClient as string,",
						"          locationId as string,",
						"          customerId as string,",
						"          sessionTime_minutes as double,",
						"          traffic_MB as double,",
						"          user_firstName as string,",
						"          user_lastName as string,",
						"          user_email as string,",
						"          user_gender as string,",
						"          user_phone as string,",
						"          user_birthDate as string,",
						"          user_country as string,",
						"          user_zipCode as string,",
						"          user_wifiArea as string",
						"     ),",
						"     format: 'parquet',",
						"     partitionFileNames:['VFD_DFL_DuomoWiFi_Processed_Curated_output.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     partitionBy('hash', 1),",
						"     compressionCodec: 'snappy') ~> SinkEnrichedData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Processed_DuomoWiFi_Connections_Parquet')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Processed_DuomoWiFi_Users_Parquet')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_DuomoWiFi_Enriched_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_DuomoWiFi_Users_Raw_Processed')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Consolida tutti i file JSON degli utenti in un singolo file Parquet",
				"folder": {
					"name": "WiFi"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Raw_DuomoWiFi_Users_JSON",
								"type": "DatasetReference"
							},
							"name": "SourceUsersJSON"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Processed_DuomoWiFi_Users_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkUsersParquet"
						}
					],
					"transformations": [
						{
							"name": "FlattenUserData"
						}
					],
					"scriptLines": [
						"parameters{",
						"     year as string,",
						"     month as string",
						"}",
						"source(output(",
						"          count as integer,",
						"          scrollId as string,",
						"          customers as (cid as string, username as string, firstName as string, lastName as string, email as string, gender as string, phone as string, birthDate as string, country as string, zipCode as string, wifiArea as string)[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine',",
						"     wildcardPaths:[(concat(\"/Wifi/users/\", $year, \"/\", $month, \"/VFD_Wifi_user_*.json\"))]) ~> SourceUsersJSON",
						"SourceUsersJSON foldDown(unroll(customers),",
						"     mapColumn(",
						"          cid = customers.cid,",
						"          username = customers.username,",
						"          firstName = customers.firstName,",
						"          lastName = customers.lastName,",
						"          email = customers.email,",
						"          gender = customers.gender,",
						"          phone = customers.phone,",
						"          birthDate = customers.birthDate,",
						"          country = customers.country,",
						"          zipCode = customers.zipCode,",
						"          wifiArea = customers.wifiArea",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenUserData",
						"FlattenUserData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          cid as string,",
						"          username as string,",
						"          firstName as string,",
						"          lastName as string,",
						"          email as string,",
						"          gender as string,",
						"          phone as string,",
						"          birthDate as string,",
						"          country as string,",
						"          zipCode as string,",
						"          wifiArea as string",
						"     ),",
						"     format: 'parquet',",
						"     partitionFileNames:['VFD_DFL_DuomoWiFi_Users_Raw_Processed_output.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     partitionBy('hash', 1),",
						"     compressionCodec: 'snappy') ~> SinkUsersParquet"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Raw_DuomoWiFi_Users_JSON')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Processed_DuomoWiFi_Users_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Weather_Raw_Processed')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Conversione CSV meteo in Parquet senza modifiche",
				"folder": {
					"name": "Visual Crossing/Weather"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Raw_Weather_CSV",
								"type": "DatasetReference"
							},
							"name": "SourceRaw"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Processed_Weather_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkProcessed",
							"rejectedDataLinkedService": {
								"referenceName": "VFD_Big_Data_DL",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "AddProcessingMetadata"
						}
					],
					"scriptLines": [
						"source(output(",
						"          name as string,",
						"          datetime as string,",
						"          tempmax as double,",
						"          tempmin as double,",
						"          temp as double,",
						"          feelslikemax as double,",
						"          feelslikemin as double,",
						"          feelslike as double,",
						"          humidity as double,",
						"          precip as double,",
						"          precipprob as double,",
						"          preciptype as string,",
						"          windgust as double,",
						"          windspeed as double,",
						"          cloudcover as double,",
						"          visibility as double,",
						"          sunset as string,",
						"          conditions as string,",
						"          description as string,",
						"          icon as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourceRaw",
						"SourceRaw derive(processing_date = currentUTC(),",
						"          data_source = 'visual_crossing_api',",
						"          datetime_parsed = toDate(datetime)) ~> AddProcessingMetadata",
						"AddProcessingMetadata sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['VFD_DFL_Weather_Raw_Processed_output.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     partitionBy('hash', 1),",
						"     compressionCodec: 'snappy') ~> SinkProcessed"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Raw_Weather_CSV')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Processed_Weather_Parquet')]",
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Weather_Single_Row_To_Monthly')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Aggiorna file mensile con singola riga filtrata per data",
				"folder": {
					"name": "Visual Crossing/Weather"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Processed_Weather_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceProcessed"
						},
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Weather_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceCuratedExisting"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Weather_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkCurated"
						}
					],
					"transformations": [
						{
							"name": "FilterTargetDate"
						},
						{
							"name": "RemoveTargetDateFromExisting"
						},
						{
							"name": "UnionWithExisting"
						},
						{
							"name": "SortByDate"
						}
					],
					"scriptLines": [
						"parameters{",
						"     target_date as string",
						"}",
						"source(output(",
						"          name as string,",
						"          datetime as string,",
						"          tempmax as double,",
						"          tempmin as double,",
						"          temp as double,",
						"          feelslikemax as double,",
						"          feelslikemin as double,",
						"          feelslike as double,",
						"          humidity as double,",
						"          precip as double,",
						"          precipprob as double,",
						"          preciptype as string,",
						"          windgust as double,",
						"          windspeed as double,",
						"          cloudcover as double,",
						"          visibility as double,",
						"          sunset as string,",
						"          conditions as string,",
						"          description as string,",
						"          icon as string,",
						"          processing_date as timestamp,",
						"          data_source as string,",
						"          datetime_parsed as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceProcessed",
						"source(output(",
						"          name as string,",
						"          datetime as string,",
						"          tempmax as double,",
						"          tempmin as double,",
						"          temp as double,",
						"          feelslikemax as double,",
						"          feelslikemin as double,",
						"          feelslike as double,",
						"          humidity as double,",
						"          precip as double,",
						"          precipprob as double,",
						"          preciptype as string,",
						"          windgust as double,",
						"          windspeed as double,",
						"          cloudcover as double,",
						"          visibility as double,",
						"          sunset as string,",
						"          conditions as string,",
						"          description as string,",
						"          icon as string,",
						"          processing_date as timestamp,",
						"          data_source as string,",
						"          datetime_parsed as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     format: 'parquet') ~> SourceCuratedExisting",
						"SourceProcessed filter(datetime == $target_date) ~> FilterTargetDate",
						"SourceCuratedExisting filter(datetime != $target_date) ~> RemoveTargetDateFromExisting",
						"FilterTargetDate, RemoveTargetDateFromExisting union(byName: true)~> UnionWithExisting",
						"UnionWithExisting sort(asc(datetime, false)) ~> SortByDate",
						"SortByDate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['VFD_DFL_Weather_Single_Row_To_Monthly_output.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     partitionBy('hash', 1),",
						"     compressionCodec: 'snappy') ~> SinkCurated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Processed_Weather_Parquet')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Weather_Parquet')]"
			]
		}
	]
}