{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Nome Data Factory",
			"defaultValue": "VFD-Big-Data-DF"
		},
		"VFD_Big_Data_DL_accountKey": {
			"type": "secureString",
			"metadata": "Stringa sicura per 'accountKey' di 'VFD_Big_Data_DL'"
		},
		"VFD_LS_Mida_FtpServer_password": {
			"type": "secureString",
			"metadata": "Stringa sicura per 'password' di 'VFD_LS_Mida_FtpServer'"
		},
		"VFD_Big_Data_DL_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://vfdbigdataarchiviazione.dfs.core.windows.net/"
		},
		"VFD_LS_Affluences_API_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://data.affluences.com/v1/data"
		},
		"VFD_LS_Cloud4Wi_API_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://explore.cloud4wi.com"
		},
		"VFD_LS_Mida_FtpServer_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "217.73.236.242"
		},
		"VFD_LS_Mida_FtpServer_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "vfd_storico_ftp"
		},
		"VFD_LS_VisualCrossing_API_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/"
		},
		"VFD_LS_VisualCrossing_HTTP_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/"
		},
		"VFD_TRG_Weather_API_Daily_properties_VFD_PL_Weather_API_Daily_parameters_location": {
			"type": "string",
			"defaultValue": "Milano"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Affluences_Daily_v2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline v2 per acquisire i dati giornalieri Affluences con architettura Raw->Processed->Curated",
				"activities": [
					{
						"name": "SetProcessDate",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "processDate",
							"value": {
								"value": "@if(empty(pipeline().parameters.date), formatDateTime(addDays(utcnow(), -1), 'yyyy-MM-dd'), pipeline().parameters.date)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetYear",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetProcessDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "year",
							"value": {
								"value": "@substring(variables('processDate'), 0, 4)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetMonth",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetYear",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "month",
							"value": {
								"value": "@substring(variables('processDate'), 5, 2)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetDateFormatted",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetMonth",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "dateFormatted",
							"value": {
								"value": "@replace(variables('processDate'), '-', '')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetYearMonth",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetDateFormatted",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "yearMonth",
							"value": {
								"value": "@concat(variables('year'), variables('month'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEachSite",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetYearMonth",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@createArray(json('{\"name\":\"Terrazze\",\"uuid\":\"5a2757bc-e1c6-4d5e-9db3-edfc4e9c9307\"}'), json('{\"name\":\"AscensoreNord\",\"uuid\":\"ca2dae61-4a99-4cb7-8051-26cb852ea408\"}'), json('{\"name\":\"AscensoreSud\",\"uuid\":\"aa6c22f1-84b6-441a-bbb0-bd429e63536d\"}'), json('{\"name\":\"SalitaPiedi\",\"uuid\":\"8358df5f-0186-4a11-87ad-11fc19cda749\"}'), json('{\"name\":\"DiscesaPiedi\",\"uuid\":\"639bc326-010a-402f-ba5f-3c75e2740d9d\"}'))",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "CallAPI",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 2,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET"
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "VFD_DS_Affluences_API",
											"type": "DatasetReference",
											"parameters": {
												"siteUUID": {
													"value": "@item().uuid",
													"type": "Expression"
												},
												"date": {
													"value": "@variables('processDate')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "VFD_DS_Raw_Affluences_JSON",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": {
													"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
													"type": "Expression"
												},
												"fileName": {
													"value": "@concat('VFD_Affluences_', variables('dateFormatted'), '_', item().uuid, '.json')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "TransformToProcessed",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ForEachSite",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_Affluences_JSON_to_Processed",
								"type": "DataFlowReference",
								"parameters": {
									"year": {
										"value": "'@{variables('year')}'",
										"type": "Expression"
									},
									"month": {
										"value": "'@{variables('month')}'",
										"type": "Expression"
									},
									"dateFormatted": {
										"value": "'@{variables('dateFormatted')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SourceJSON": {
										"folderPath": {
											"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
											"type": "Expression"
										},
										"fileName": {
											"value": "@concat('VFD_Affluences_', variables('dateFormatted'), '_*.json')",
											"type": "Expression"
										}
									},
									"SinkProcessed": {
										"folderPath": {
											"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
											"type": "Expression"
										},
										"fileName": "VFD_DFL_Affluences_JSON_to_Processed_output.parquet"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					},
					{
						"name": "CopyProcessedToFinal",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "TransformToProcessed",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Processed_Affluences_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_Affluences_JSON_to_Processed_output.parquet"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Processed_Affluences_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
										"type": "Expression"
									},
									"fileName": {
										"value": "@concat('VFD_Affluences_', variables('dateFormatted'), '.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "DeleteProcessedTemp",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "CopyProcessedToFinal",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Processed_Affluences_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_Affluences_JSON_to_Processed_output.parquet"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": false
							}
						}
					},
					{
						"name": "CreateCuratedDaily",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DeleteProcessedTemp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_Affluences_Daily_to_Curated",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceProcessed": {
										"folderPath": {
											"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
											"type": "Expression"
										},
										"fileName": {
											"value": "@concat('VFD_Affluences_', variables('dateFormatted'), '.parquet')",
											"type": "Expression"
										}
									},
									"SinkCuratedDaily": {
										"folderPath": {
											"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
											"type": "Expression"
										},
										"fileName": "VFD_DFL_Affluences_Daily_to_Curated_output.parquet"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					},
					{
						"name": "CopyCuratedDailyToFinal",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CreateCuratedDaily",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Curated_Affluences_Daily_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_Affluences_Daily_to_Curated_output.parquet"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Curated_Affluences_Daily_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
										"type": "Expression"
									},
									"fileName": {
										"value": "@concat('VFD_Affluences_Daily_', variables('dateFormatted'), '.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "DeleteCuratedDailyTemp",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "CopyCuratedDailyToFinal",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Curated_Affluences_Daily_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_Affluences_Daily_to_Curated_output.parquet"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": false
							}
						}
					},
					{
						"name": "UpdateMonthlyAggregation",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DeleteCuratedDailyTemp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_Affluences_Monthly_Aggregation",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceNewData": {
										"folderPath": {
											"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
											"type": "Expression"
										},
										"fileName": {
											"value": "@concat('VFD_Affluences_', variables('dateFormatted'), '.parquet')",
											"type": "Expression"
										}
									},
									"SourceExistingMonthly": {
										"folderPath": {
											"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
											"type": "Expression"
										},
										"fileName": {
											"value": "@concat('VFD_Affluences_Monthly_', variables('yearMonth'), '.parquet')",
											"type": "Expression"
										}
									},
									"SinkMonthly": {
										"folderPath": {
											"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
											"type": "Expression"
										},
										"fileName": "VFD_DFL_Affluences_Monthly_Aggregation_output.parquet"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					},
					{
						"name": "CopyMonthlyToFinal",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "UpdateMonthlyAggregation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Curated_Affluences_Monthly_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_Affluences_Monthly_Aggregation_output.parquet"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Curated_Affluences_Monthly_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
										"type": "Expression"
									},
									"fileName": {
										"value": "@concat('VFD_Affluences_Monthly_', variables('yearMonth'), '.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "DeleteMonthlyTemp",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "CopyMonthlyToFinal",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Curated_Affluences_Monthly_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@concat('Affluences/', variables('year'), '/', variables('month'))",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_Affluences_Monthly_Aggregation_output.parquet"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"date": {
						"type": "string"
					}
				},
				"variables": {
					"processDate": {
						"type": "String"
					},
					"year": {
						"type": "String"
					},
					"month": {
						"type": "String"
					},
					"dateFormatted": {
						"type": "String"
					},
					"yearMonth": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Affluences"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/VFD_DFL_Affluences_JSON_to_Processed')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Processed_Affluences_Parquet')]",
				"[concat(variables('factoryId'), '/dataflows/VFD_DFL_Affluences_Daily_to_Curated')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Affluences_Daily_Parquet')]",
				"[concat(variables('factoryId'), '/dataflows/VFD_DFL_Affluences_Monthly_Aggregation')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Affluences_Monthly_Parquet')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Affluences_API')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Raw_Affluences_JSON')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Affluences_Historical_Recovery')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline per il recupero storico dei dati Affluences dall'1 novembre 2024 al 15 maggio 2025",
				"activities": [
					{
						"name": "SetStartDate",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "currentDate",
							"value": {
								"value": "@formatDateTime('2025-06-07', 'yyyy-MM-dd')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetEndDate",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "endDate",
							"value": {
								"value": "@formatDateTime('2025-06-09', 'yyyy-MM-dd')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ProcessUntilEndDate",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "SetStartDate",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetEndDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(variables('currentDate'), variables('endDate'))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "ExecuteDailyPipeline",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "VFD_PL_Affluences_Daily_v2",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"date": {
												"value": "@variables('currentDate')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "CalculateNextDate",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "ExecuteDailyPipeline",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "tempDate",
										"value": {
											"value": "@formatDateTime(addDays(variables('currentDate'), 1), 'yyyy-MM-dd')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "UpdateCurrentDate",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "CalculateNextDate",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "currentDate",
										"value": {
											"value": "@variables('tempDate')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "WaitForCooldown",
									"type": "Wait",
									"dependsOn": [
										{
											"activity": "UpdateCurrentDate",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 10
									}
								}
							],
							"timeout": "7.00:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"currentDate": {
						"type": "String"
					},
					"endDate": {
						"type": "String"
					},
					"tempDate": {
						"type": "String"
					},
					"progressMessage": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Affluences"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/VFD_PL_Affluences_Daily_v2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_DuomoWiFi_Daily')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline wrapper per esecuzione giornaliera automatica - usa SEMPRE la data di ieri",
				"activities": [
					{
						"name": "Set_Yesterday_Date",
						"description": "Imposta la data di ieri per entrambi i parametri",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "yesterday_date",
							"value": {
								"value": "@formatDateTime(addDays(utcNow(), -1), 'yyyy-MM-dd')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute_WiFi_Extract_Transform",
						"description": "Esegue la pipeline principale con la data di ieri",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Set_Yesterday_Date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "VFD_PL_DuomoWiFi_Extract_Transform",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"p_dateStart": {
									"value": "@variables('yesterday_date')",
									"type": "Expression"
								},
								"p_dateStop": {
									"value": "@variables('yesterday_date')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"yesterday_date": {
						"type": "String"
					}
				},
				"folder": {
					"name": "WiFi"
				},
				"annotations": [
					"Daily Execution",
					"Wrapper Pipeline",
					"No Parameters"
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/VFD_PL_DuomoWiFi_Extract_Transform')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_DuomoWiFi_Extract_Transform')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline principale per l'estrazione e trasformazione dei dati WiFi del Duomo",
				"activities": [
					{
						"name": "ExtractConnections",
						"description": "Estrae le connessioni WiFi dall'API Cloud4Wi",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "AuthRequest",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET",
									"additionalHeaders": {
										"value": "Authorization: Bearer @{activity('AuthRequest').output.token}",
										"type": "Expression"
									},
									"requestTimeout": "00:01:40"
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Cloud4Wi_Connections_HTTP",
								"type": "DatasetReference",
								"parameters": {
									"dateStart": {
										"value": "@pipeline().parameters.p_dateStart",
										"type": "Expression"
									},
									"dateStop": {
										"value": "@pipeline().parameters.p_dateStop",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Raw_DuomoWiFi_Connections_JSON",
								"type": "DatasetReference",
								"parameters": {
									"year": {
										"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
										"type": "Expression"
									},
									"month": {
										"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
										"type": "Expression"
									},
									"fileName": {
										"value": "@concat('VFD_Wifi_connections_', substring(pipeline().parameters.p_dateStart, 0, 4), substring(pipeline().parameters.p_dateStart, 5, 2), substring(pipeline().parameters.p_dateStart, 8, 2), '.json')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "LookupUsernames",
						"description": "Estrae la lista di username unici dal file delle connessioni",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ExtractConnections",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:05:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "VFD_DS_Raw_DuomoWiFi_Connections_JSON",
								"type": "DatasetReference",
								"parameters": {
									"year": {
										"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)\n",
										"type": "Expression"
									},
									"month": {
										"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)\n",
										"type": "Expression"
									},
									"fileName": {
										"value": "@concat('VFD_Wifi_connections_', \n    substring(pipeline().parameters.p_dateStart, 0, 4),\n    substring(pipeline().parameters.p_dateStart, 5, 2), \n    substring(pipeline().parameters.p_dateStart, 8, 2),\n    '.json')",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachUsername",
						"description": "Itera su ogni username per estrarre i dati utente",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookupUsernames",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupUsernames').output.value[0].connections",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 10,
							"activities": [
								{
									"name": "ExtractUserData",
									"description": "Estrae i dati di un singolo utente",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 3,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET",
												"additionalHeaders": {
													"value": "Authorization: Bearer @{activity('AuthRequest').output.token}",
													"type": "Expression"
												},
												"requestTimeout": "00:01:40"
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "VFD_DS_Cloud4Wi_Users_HTTP",
											"type": "DatasetReference",
											"parameters": {
												"username": {
													"value": "@item().customerId",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "VFD_DS_Raw_DuomoWiFi_Users_JSON",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@concat('VFD_Wifi_user_', item().username, '.json')",
													"type": "Expression"
												},
												"year": {
													"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
													"type": "Expression"
												},
												"month": {
													"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "TransformConnectionsRawToProcessed",
						"description": "Trasforma le connessioni da JSON Raw a Parquet Processed",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ForEachUsername",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_DuomoWiFi_Connections_Raw_Processed",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceConnectionsJSON": {
										"year": {
											"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
											"type": "Expression"
										},
										"month": {
											"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
											"type": "Expression"
										},
										"fileName": {
											"value": "@concat('VFD_Wifi_connections_', substring(pipeline().parameters.p_dateStart, 0, 4), substring(pipeline().parameters.p_dateStart, 5, 2), substring(pipeline().parameters.p_dateStart, 8, 2), '.json')",
											"type": "Expression"
										}
									},
									"SinkConnectionsParquet": {
										"year": {
											"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
											"type": "Expression"
										},
										"month": {
											"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
											"type": "Expression"
										},
										"fileName": "VFD_DFL_DuomoWiFi_Connections_Raw_Processed_output.parquet"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					},
					{
						"name": "CopyConnectionsProcessedToFinal",
						"description": "Copia il file temporaneo al nome finale",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "TransformConnectionsRawToProcessed",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Processed_DuomoWiFi_Connections_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"year": {
										"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
										"type": "Expression"
									},
									"month": {
										"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_DuomoWiFi_Connections_Raw_Processed_output.parquet"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Processed_DuomoWiFi_Connections_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"year": {
										"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
										"type": "Expression"
									},
									"month": {
										"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
										"type": "Expression"
									},
									"fileName": {
										"value": "@concat('VFD_Wifi_connections_', substring(pipeline().parameters.p_dateStart, 0, 4), substring(pipeline().parameters.p_dateStart, 5, 2), substring(pipeline().parameters.p_dateStart, 8, 2), '.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "DeleteTempConnectionsFile",
						"description": "Elimina il file temporaneo delle connessioni",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "CopyConnectionsProcessedToFinal",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:05:00",
							"retry": 1,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Processed_DuomoWiFi_Connections_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"year": {
										"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
										"type": "Expression"
									},
									"month": {
										"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_DuomoWiFi_Connections_Raw_Processed_output.parquet"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "TransformUsersRawToProcessed",
						"description": "Consolida tutti i file JSON degli utenti in un singolo Parquet",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DeleteTempConnectionsFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_DuomoWiFi_Users_Raw_Processed",
								"type": "DataFlowReference",
								"parameters": {
									"year": {
										"value": "'@{substring(pipeline().parameters.p_dateStart, 0, 4)}'",
										"type": "Expression"
									},
									"month": {
										"value": "'@{substring(pipeline().parameters.p_dateStart, 5, 2)}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SourceUsersJSON": {
										"fileName": "dummy.json",
										"year": {
											"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
											"type": "Expression"
										},
										"month": {
											"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
											"type": "Expression"
										}
									},
									"SinkUsersParquet": {
										"year": {
											"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
											"type": "Expression"
										},
										"month": {
											"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
											"type": "Expression"
										},
										"fileName": "VFD_DFL_DuomoWiFi_Users_Raw_Processed_output.parquet"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					},
					{
						"name": "CopyUsersProcessedToFinal",
						"description": "Copia il file temporaneo degli utenti al nome finale",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "TransformUsersRawToProcessed",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Processed_DuomoWiFi_Users_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"year": {
										"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
										"type": "Expression"
									},
									"month": {
										"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_DuomoWiFi_Users_Raw_Processed_output.parquet"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Processed_DuomoWiFi_Users_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"year": {
										"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
										"type": "Expression"
									},
									"month": {
										"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
										"type": "Expression"
									},
									"fileName": {
										"value": "@concat('VFD_Wifi_Users_', substring(pipeline().parameters.p_dateStart, 0, 4), substring(pipeline().parameters.p_dateStart, 5, 2), substring(pipeline().parameters.p_dateStart, 8, 2), '.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "DeleteTempUsersFile",
						"description": "Elimina il file temporaneo degli utenti",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "CopyUsersProcessedToFinal",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:05:00",
							"retry": 1,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Processed_DuomoWiFi_Users_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"year": {
										"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
										"type": "Expression"
									},
									"month": {
										"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_DuomoWiFi_Users_Raw_Processed_output.parquet"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "TransformProcessedToCurated",
						"description": "Esegue join tra connessioni e utenti per dataset finale arricchito",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DeleteTempUsersFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_DuomoWiFi_Processed_Curated",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceConnections": {
										"year": {
											"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
											"type": "Expression"
										},
										"month": {
											"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
											"type": "Expression"
										},
										"fileName": {
											"value": "@concat('VFD_Wifi_connections_', substring(pipeline().parameters.p_dateStart, 0, 4), substring(pipeline().parameters.p_dateStart, 5, 2), substring(pipeline().parameters.p_dateStart, 8, 2), '.parquet')",
											"type": "Expression"
										}
									},
									"SourceUsers": {
										"year": {
											"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
											"type": "Expression"
										},
										"month": {
											"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
											"type": "Expression"
										},
										"fileName": {
											"value": "@concat('VFD_Wifi_Users_', substring(pipeline().parameters.p_dateStart, 0, 4), substring(pipeline().parameters.p_dateStart, 5, 2), substring(pipeline().parameters.p_dateStart, 8, 2), '.parquet')",
											"type": "Expression"
										}
									},
									"SinkEnrichedData": {
										"year": {
											"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
											"type": "Expression"
										},
										"month": {
											"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
											"type": "Expression"
										},
										"fileName": "VFD_DFL_DuomoWiFi_Processed_Curated_output.parquet"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					},
					{
						"name": "CopyCuratedToFinal",
						"description": "Copia il file temporaneo arricchito al nome finale",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "TransformProcessedToCurated",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Curated_DuomoWiFi_Enriched_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"year": {
										"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
										"type": "Expression"
									},
									"month": {
										"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_DuomoWiFi_Processed_Curated_output.parquet"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Curated_DuomoWiFi_Enriched_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"year": {
										"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
										"type": "Expression"
									},
									"month": {
										"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
										"type": "Expression"
									},
									"fileName": {
										"value": "@concat('VFD_Wifi_connections_', substring(pipeline().parameters.p_dateStart, 0, 4), substring(pipeline().parameters.p_dateStart, 5, 2), substring(pipeline().parameters.p_dateStart, 8, 2), '.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "DeleteTempEnrichedFile",
						"description": "Elimina il file temporaneo arricchito",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "CopyCuratedToFinal",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:05:00",
							"retry": 1,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Curated_DuomoWiFi_Enriched_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"year": {
										"value": "@substring(pipeline().parameters.p_dateStart, 0, 4)",
										"type": "Expression"
									},
									"month": {
										"value": "@substring(pipeline().parameters.p_dateStart, 5, 2)",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_DuomoWiFi_Processed_Curated_output.parquet"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "AuthRequest",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": "https://explore.cloud4wi.com/v1/sts/login/services",
							"body": {
								"clientKey": "ck-ffe407c5-e967-44db-a6b0-d6c178b6ee08",
								"clientSecret": "CWCVPKZCNDYTVKPBZTDSENQKJLLCPKGH"
							}
						}
					},
					{
						"name": "LogoutRequest",
						"description": "Richiesta di logout per annullare il token, il body è impostato con dei valori solamente perché DataFactory non accetta un body vuoto in una richiesta post",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "DeleteTempEnrichedFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Authorization": {
									"value": "Bearer @{activity('AuthRequest').output.token}",
									"type": "Expression"
								}
							},
							"url": "https://explore.cloud4wi.com/v1/sts/logout",
							"body": {
								"Sample": "Sample"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_dateStart": {
						"type": "string",
						"defaultValue": "2025-06-26"
					},
					"p_dateStop": {
						"type": "string",
						"defaultValue": "2025-06-26"
					}
				},
				"folder": {
					"name": "WiFi"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Cloud4Wi_Connections_HTTP')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Raw_DuomoWiFi_Connections_JSON')]",
				"[concat(variables('factoryId'), '/dataflows/VFD_DFL_DuomoWiFi_Connections_Raw_Processed')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Processed_DuomoWiFi_Connections_Parquet')]",
				"[concat(variables('factoryId'), '/dataflows/VFD_DFL_DuomoWiFi_Users_Raw_Processed')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Processed_DuomoWiFi_Users_Parquet')]",
				"[concat(variables('factoryId'), '/dataflows/VFD_DFL_DuomoWiFi_Processed_Curated')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_DuomoWiFi_Enriched_Parquet')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Cloud4Wi_Users_HTTP')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Raw_DuomoWiFi_Users_JSON')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_DuomoWiFi_Reprocessing')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SetFirstDate",
						"description": "Imposta per la prima volta la currentDate in base a startDate",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "currentDate",
							"value": {
								"value": "@formatDateTime(pipeline().parameters.startDate, 'yyyy-MM-dd')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "RepeatUntilEndDate",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "SetFirstDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(variables('currentDate'),pipeline().parameters.endDate)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "ProcessCurrentDate",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "VFD_PL_DuomoWiFi_Extract_Transform",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"p_dateStart": {
												"value": "@variables('currentDate')",
												"type": "Expression"
											},
											"p_dateStop": {
												"value": "@variables('currentDate')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "CalculateNextDate",
									"description": "Usa una variabile temp per calcolare il valore di currentDate + 1",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "ProcessCurrentDate",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nextDate",
										"value": {
											"value": "@formatDateTime(addDays(variables('currentDate'), 1), 'yyyy-MM-dd')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetCurrentDate",
									"description": "Imposta il valore di currentDate con nextDate",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "CalculateNextDate",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "currentDate",
										"value": {
											"value": "@variables('nextDate')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "WaitForCooldown",
									"type": "Wait",
									"dependsOn": [
										{
											"activity": "SetCurrentDate",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 10
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"startDate": {
						"type": "string"
					},
					"endDate": {
						"type": "string"
					}
				},
				"variables": {
					"currentDate": {
						"type": "String"
					},
					"nextDate": {
						"type": "String"
					}
				},
				"folder": {
					"name": "WiFi"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/VFD_PL_DuomoWiFi_Extract_Transform')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Explore_Seals_Folder')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Esplora il contenuto della cartella 'emissioni' per capire i pattern dei file Seals",
				"activities": [
					{
						"name": "ListSealsFiles",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Mida_Seals_FTPServer_Folder",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "FtpReadSettings",
								"recursive": false,
								"enablePartitionDiscovery": false,
								"useBinaryTransfer": true,
								"disableChunking": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Mida/Utilities"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Mida_Seals_FTPServer_Folder')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Mida')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Process Bookings",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "VFD_PL_Mida_Bookings_FTP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"concurrency": 1,
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Mida"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/VFD_PL_Mida_Bookings_FTP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Mida2_Atomic_APPEND_Historical')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline atomica per aggiungere record al file historical con audit trail",
				"activities": [
					{
						"name": "Check Historical File Exists",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Historical_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "@pipeline().parameters.targetFolderPath",
									"fileName": "@pipeline().parameters.targetFileName"
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "If File Exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check Historical File Exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('Check Historical File Exists').output.exists",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Create New Historical File",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "VFD_DFL_Mida2_Atomic_CREATE_Historical",
											"type": "DataFlowReference",
											"parameters": {
												"guid_pk": {
													"value": "@concat('''', pipeline().parameters.guid_pk, '''')",
													"type": "Expression"
												},
												"reservation_progressiveCode": {
													"value": "@concat('''', pipeline().parameters.reservation_progressiveCode, '''')",
													"type": "Expression"
												},
												"reservation_code": {
													"value": "@concat('''', pipeline().parameters.reservation_code, '''')",
													"type": "Expression"
												},
												"reservation_status": {
													"value": "@pipeline().parameters.reservation_status",
													"type": "Expression"
												},
												"invoiceRequired": {
													"value": "@concat('''', pipeline().parameters.invoiceRequired, '''')",
													"type": "Expression"
												},
												"customer": {
													"value": "@pipeline().parameters.customer",
													"type": "Expression"
												},
												"visitDate": {
													"value": "@concat('''', pipeline().parameters.visitDate, '''')",
													"type": "Expression"
												},
												"reservationPayment_guid": {
													"value": "@concat('''', pipeline().parameters.reservationPayment_guid, '''')",
													"type": "Expression"
												},
												"parentPayment_guid": {
													"value": "@concat('''', pipeline().parameters.parentPayment_guid, '''')",
													"type": "Expression"
												},
												"sliced": {
													"value": "@concat('''', pipeline().parameters.sliced, '''')",
													"type": "Expression"
												},
												"reservation_guid": {
													"value": "@concat('''', pipeline().parameters.reservation_guid, '''')",
													"type": "Expression"
												},
												"group_guid": {
													"value": "@concat('''', pipeline().parameters.group_guid, '''')",
													"type": "Expression"
												},
												"group_label": {
													"value": "@concat('''', pipeline().parameters.group_label, '''')",
													"type": "Expression"
												},
												"group_email": {
													"value": "@concat('''', pipeline().parameters.group_email, '''')",
													"type": "Expression"
												},
												"paymentCode": {
													"value": "@concat('''', pipeline().parameters.paymentCode, '''')",
													"type": "Expression"
												},
												"paymentCondition": {
													"value": "@pipeline().parameters.paymentCondition",
													"type": "Expression"
												},
												"reservation_amount": {
													"value": "@pipeline().parameters.reservation_amount",
													"type": "Expression"
												},
												"reservation_amountTax": {
													"value": "@pipeline().parameters.reservation_amountTax",
													"type": "Expression"
												},
												"status": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												},
												"status_text": {
													"value": "@concat('''', pipeline().parameters.status_text, '''')",
													"type": "Expression"
												},
												"stamp": {
													"value": "@concat('''', pipeline().parameters.stamp, '''')",
													"type": "Expression"
												},
												"notes": {
													"value": "@concat('''', pipeline().parameters.notes, '''')",
													"type": "Expression"
												},
												"transactionType": {
													"value": "@concat('''', pipeline().parameters.transactionType, '''')",
													"type": "Expression"
												},
												"transactionType_text": {
													"value": "@concat('''', pipeline().parameters.transactionType_text, '''')",
													"type": "Expression"
												},
												"paymentLimitDate": {
													"value": "@concat('''', pipeline().parameters.paymentLimitDate, '''')",
													"type": "Expression"
												},
												"paymentDate": {
													"value": "@concat('''', pipeline().parameters.paymentDate, '''')",
													"type": "Expression"
												},
												"refund": {
													"value": "@concat('''', pipeline().parameters.refund, '''')",
													"type": "Expression"
												},
												"refunded": {
													"value": "@concat('''', pipeline().parameters.refunded, '''')",
													"type": "Expression"
												},
												"convention_label": {
													"value": "@concat('''', pipeline().parameters.convention_label, '''')",
													"type": "Expression"
												},
												"receiptCode": {
													"value": "@concat('''', pipeline().parameters.receiptCode, '''')",
													"type": "Expression"
												},
												"insertTimestamp": {
													"value": "@concat('''', pipeline().parameters.insertTimestamp, '''')",
													"type": "Expression"
												},
												"updateTimestamp": {
													"value": "@concat('''', pipeline().parameters.updateTimestamp, '''')",
													"type": "Expression"
												},
												"owner": {
													"value": "@concat('''', pipeline().parameters.owner, '''')",
													"type": "Expression"
												},
												"owner_text": {
													"value": "@concat('''', pipeline().parameters.owner_text, '''')",
													"type": "Expression"
												},
												"sessionId": {
													"value": "@concat('''', pipeline().parameters.sessionId, '''')",
													"type": "Expression"
												},
												"terminal_label": {
													"value": "@concat('''', pipeline().parameters.terminal_label, '''')",
													"type": "Expression"
												},
												"terminalGroup_label": {
													"value": "@concat('''', pipeline().parameters.terminalGroup_label, '''')",
													"type": "Expression"
												},
												"gateway_guid": {
													"value": "@concat('''', pipeline().parameters.gateway_guid, '''')",
													"type": "Expression"
												},
												"gateway_label": {
													"value": "@concat('''', pipeline().parameters.gateway_label, '''')",
													"type": "Expression"
												},
												"transactionID": {
													"value": "@concat('''', pipeline().parameters.transactionID, '''')",
													"type": "Expression"
												},
												"bankAccount_guid": {
													"value": "@concat('''', pipeline().parameters.bankAccount_guid, '''')",
													"type": "Expression"
												},
												"bankAccount_label": {
													"value": "@concat('''', pipeline().parameters.bankAccount_label, '''')",
													"type": "Expression"
												},
												"channel_guid": {
													"value": "@concat('''', pipeline().parameters.channel_guid, '''')",
													"type": "Expression"
												},
												"channel_label": {
													"value": "@concat('''', pipeline().parameters.channel_label, '''')",
													"type": "Expression"
												},
												"channelType": {
													"value": "@concat('''', pipeline().parameters.channelType, '''')",
													"type": "Expression"
												},
												"detail_guid": {
													"value": "@concat('''', pipeline().parameters.detail_guid, '''')",
													"type": "Expression"
												},
												"extra_guid": {
													"value": "@concat('''', pipeline().parameters.extra_guid, '''')",
													"type": "Expression"
												},
												"priceList": {
													"value": "@concat('''', pipeline().parameters.priceList, '''')",
													"type": "Expression"
												},
												"event": {
													"value": "@concat('''', pipeline().parameters.event, '''')",
													"type": "Expression"
												},
												"detailType": {
													"value": "@concat('''', pipeline().parameters.detailType, '''')",
													"type": "Expression"
												},
												"detail_text": {
													"value": "@concat('''', pipeline().parameters.detail_text, '''')",
													"type": "Expression"
												},
												"detail_label": {
													"value": "@concat('''', pipeline().parameters.detail_label, '''')",
													"type": "Expression"
												},
												"detail_count": {
													"value": "@pipeline().parameters.detail_count",
													"type": "Expression"
												},
												"paymentDetail_guid": {
													"value": "@concat('''', pipeline().parameters.paymentDetail_guid, '''')",
													"type": "Expression"
												},
												"detail_payingPartecipants": {
													"value": "@pipeline().parameters.detail_payingPartecipants",
													"type": "Expression"
												},
												"detail_quantity": {
													"value": "@pipeline().parameters.detail_quantity",
													"type": "Expression"
												},
												"tickets_quantity": {
													"value": "@pipeline().parameters.tickets_quantity",
													"type": "Expression"
												},
												"pax_quantity": {
													"value": "@pipeline().parameters.pax_quantity",
													"type": "Expression"
												},
												"costCenter_guid": {
													"value": "@concat('''', pipeline().parameters.costCenter_guid, '''')",
													"type": "Expression"
												},
												"costCenter_label": {
													"value": "@concat('''', pipeline().parameters.costCenter_label, '''')",
													"type": "Expression"
												},
												"object_receipt": {
													"value": "@pipeline().parameters.object_receipt",
													"type": "Expression"
												},
												"object_taxCode": {
													"value": "@concat('''', pipeline().parameters.object_taxCode, '''')",
													"type": "Expression"
												},
												"object_taxNotes": {
													"value": "@concat('''', pipeline().parameters.object_taxNotes, '''')",
													"type": "Expression"
												},
												"object_amount": {
													"value": "@pipeline().parameters.object_amount",
													"type": "Expression"
												},
												"object_taxPercentage": {
													"value": "@pipeline().parameters.object_taxPercentage",
													"type": "Expression"
												},
												"amount": {
													"value": "@pipeline().parameters.amount",
													"type": "Expression"
												},
												"amountNet": {
													"value": "@pipeline().parameters.amountNet",
													"type": "Expression"
												},
												"amountPresale": {
													"value": "@pipeline().parameters.amountPresale",
													"type": "Expression"
												},
												"amountSold": {
													"value": "@pipeline().parameters.amountSold",
													"type": "Expression"
												},
												"amountPayed": {
													"value": "@pipeline().parameters.amountPayed",
													"type": "Expression"
												},
												"amountPending": {
													"value": "@pipeline().parameters.amountPending",
													"type": "Expression"
												},
												"amountCanceled": {
													"value": "@pipeline().parameters.amountCanceled",
													"type": "Expression"
												},
												"externalId": {
													"value": "@concat('''', pipeline().parameters.externalId, '''')",
													"type": "Expression"
												},
												"amountRefunded": {
													"value": "@pipeline().parameters.amountRefunded",
													"type": "Expression"
												},
												"invoiceSummary": {
													"value": "@concat('''', pipeline().parameters.invoiceSummary, '''')",
													"type": "Expression"
												},
												"eventCalendar_guid": {
													"value": "@concat('''', pipeline().parameters.eventCalendar_guid, '''')",
													"type": "Expression"
												},
												"passDetail_guid": {
													"value": "@concat('''', pipeline().parameters.passDetail_guid, '''')",
													"type": "Expression"
												},
												"paymentCostCenter_guid": {
													"value": "@concat('''', pipeline().parameters.paymentCostCenter_guid, '''')",
													"type": "Expression"
												},
												"organization_guid": {
													"value": "@concat('''', pipeline().parameters.organization_guid, '''')",
													"type": "Expression"
												},
												"venue_guid": {
													"value": "@concat('''', pipeline().parameters.venue_guid, '''')",
													"type": "Expression"
												},
												"olapUpdateTimestamp": {
													"value": "@concat('''', pipeline().parameters.olapUpdateTimestamp, '''')",
													"type": "Expression"
												},
												"row_id": {
													"value": "@concat('''', pipeline().parameters.row_id, '''')",
													"type": "Expression"
												},
												"operationType": {
													"value": "@concat('''', pipeline().parameters.operationType, '''')",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"DummySource": {},
												"SinkHistorical": {
													"folderPath": "@pipeline().parameters.targetFolderPath",
													"fileName": "@pipeline().parameters.targetFileName"
												}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Append To Existing Historical",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "VFD_DFL_Mida2_Atomic_APPEND_Historical",
											"type": "DataFlowReference",
											"parameters": {
												"guid_pk": {
													"value": "@concat('''', pipeline().parameters.guid_pk, '''')",
													"type": "Expression"
												},
												"reservation_progressiveCode": {
													"value": "@concat('''', pipeline().parameters.reservation_progressiveCode, '''')",
													"type": "Expression"
												},
												"reservation_code": {
													"value": "@concat('''', pipeline().parameters.reservation_code, '''')",
													"type": "Expression"
												},
												"reservation_status": {
													"value": "@pipeline().parameters.reservation_status",
													"type": "Expression"
												},
												"invoiceRequired": {
													"value": "@concat('''', pipeline().parameters.invoiceRequired, '''')",
													"type": "Expression"
												},
												"customer": {
													"value": "@pipeline().parameters.customer",
													"type": "Expression"
												},
												"visitDate": {
													"value": "@concat('''', pipeline().parameters.visitDate, '''')",
													"type": "Expression"
												},
												"reservationPayment_guid": {
													"value": "@concat('''', pipeline().parameters.reservationPayment_guid, '''')",
													"type": "Expression"
												},
												"parentPayment_guid": {
													"value": "@concat('''', pipeline().parameters.parentPayment_guid, '''')",
													"type": "Expression"
												},
												"sliced": {
													"value": "@concat('''', pipeline().parameters.sliced, '''')",
													"type": "Expression"
												},
												"reservation_guid": {
													"value": "@concat('''', pipeline().parameters.reservation_guid, '''')",
													"type": "Expression"
												},
												"group_guid": {
													"value": "@concat('''', pipeline().parameters.group_guid, '''')",
													"type": "Expression"
												},
												"group_label": {
													"value": "@concat('''', pipeline().parameters.group_label, '''')",
													"type": "Expression"
												},
												"group_email": {
													"value": "@concat('''', pipeline().parameters.group_email, '''')",
													"type": "Expression"
												},
												"paymentCode": {
													"value": "@concat('''', pipeline().parameters.paymentCode, '''')",
													"type": "Expression"
												},
												"paymentCondition": {
													"value": "@pipeline().parameters.paymentCondition",
													"type": "Expression"
												},
												"reservation_amount": {
													"value": "@pipeline().parameters.reservation_amount",
													"type": "Expression"
												},
												"reservation_amountTax": {
													"value": "@pipeline().parameters.reservation_amountTax",
													"type": "Expression"
												},
												"status": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												},
												"status_text": {
													"value": "@concat('''', pipeline().parameters.status_text, '''')",
													"type": "Expression"
												},
												"stamp": {
													"value": "@concat('''', pipeline().parameters.stamp, '''')",
													"type": "Expression"
												},
												"notes": {
													"value": "@concat('''', pipeline().parameters.notes, '''')",
													"type": "Expression"
												},
												"transactionType": {
													"value": "@concat('''', pipeline().parameters.transactionType, '''')",
													"type": "Expression"
												},
												"transactionType_text": {
													"value": "@concat('''', pipeline().parameters.transactionType_text, '''')",
													"type": "Expression"
												},
												"paymentLimitDate": {
													"value": "@concat('''', pipeline().parameters.paymentLimitDate, '''')",
													"type": "Expression"
												},
												"paymentDate": {
													"value": "@concat('''', pipeline().parameters.paymentDate, '''')",
													"type": "Expression"
												},
												"refund": {
													"value": "@concat('''', pipeline().parameters.refund, '''')",
													"type": "Expression"
												},
												"refunded": {
													"value": "@concat('''', pipeline().parameters.refunded, '''')",
													"type": "Expression"
												},
												"convention_label": {
													"value": "@concat('''', pipeline().parameters.convention_label, '''')",
													"type": "Expression"
												},
												"receiptCode": {
													"value": "@concat('''', pipeline().parameters.receiptCode, '''')",
													"type": "Expression"
												},
												"insertTimestamp": {
													"value": "@concat('''', pipeline().parameters.insertTimestamp, '''')",
													"type": "Expression"
												},
												"updateTimestamp": {
													"value": "@concat('''', pipeline().parameters.updateTimestamp, '''')",
													"type": "Expression"
												},
												"owner": {
													"value": "@concat('''', pipeline().parameters.owner, '''')",
													"type": "Expression"
												},
												"owner_text": {
													"value": "@concat('''', pipeline().parameters.owner_text, '''')",
													"type": "Expression"
												},
												"sessionId": {
													"value": "@concat('''', pipeline().parameters.sessionId, '''')",
													"type": "Expression"
												},
												"terminal_label": {
													"value": "@concat('''', pipeline().parameters.terminal_label, '''')",
													"type": "Expression"
												},
												"terminalGroup_label": {
													"value": "@concat('''', pipeline().parameters.terminalGroup_label, '''')",
													"type": "Expression"
												},
												"gateway_guid": {
													"value": "@concat('''', pipeline().parameters.gateway_guid, '''')",
													"type": "Expression"
												},
												"gateway_label": {
													"value": "@concat('''', pipeline().parameters.gateway_label, '''')",
													"type": "Expression"
												},
												"transactionID": {
													"value": "@concat('''', pipeline().parameters.transactionID, '''')",
													"type": "Expression"
												},
												"bankAccount_guid": {
													"value": "@concat('''', pipeline().parameters.bankAccount_guid, '''')",
													"type": "Expression"
												},
												"bankAccount_label": {
													"value": "@concat('''', pipeline().parameters.bankAccount_label, '''')",
													"type": "Expression"
												},
												"channel_guid": {
													"value": "@concat('''', pipeline().parameters.channel_guid, '''')",
													"type": "Expression"
												},
												"channel_label": {
													"value": "@concat('''', pipeline().parameters.channel_label, '''')",
													"type": "Expression"
												},
												"channelType": {
													"value": "@concat('''', pipeline().parameters.channelType, '''')",
													"type": "Expression"
												},
												"detail_guid": {
													"value": "@concat('''', pipeline().parameters.detail_guid, '''')",
													"type": "Expression"
												},
												"extra_guid": {
													"value": "@concat('''', pipeline().parameters.extra_guid, '''')",
													"type": "Expression"
												},
												"priceList": {
													"value": "@concat('''', pipeline().parameters.priceList, '''')",
													"type": "Expression"
												},
												"event": {
													"value": "@concat('''', pipeline().parameters.event, '''')",
													"type": "Expression"
												},
												"detailType": {
													"value": "@concat('''', pipeline().parameters.detailType, '''')",
													"type": "Expression"
												},
												"detail_text": {
													"value": "@concat('''', pipeline().parameters.detail_text, '''')",
													"type": "Expression"
												},
												"detail_label": {
													"value": "@concat('''', pipeline().parameters.detail_label, '''')",
													"type": "Expression"
												},
												"detail_count": {
													"value": "@pipeline().parameters.detail_count",
													"type": "Expression"
												},
												"paymentDetail_guid": {
													"value": "@concat('''', pipeline().parameters.paymentDetail_guid, '''')",
													"type": "Expression"
												},
												"detail_payingPartecipants": {
													"value": "@pipeline().parameters.detail_payingPartecipants",
													"type": "Expression"
												},
												"detail_quantity": {
													"value": "@pipeline().parameters.detail_quantity",
													"type": "Expression"
												},
												"tickets_quantity": {
													"value": "@pipeline().parameters.tickets_quantity",
													"type": "Expression"
												},
												"pax_quantity": {
													"value": "@pipeline().parameters.pax_quantity",
													"type": "Expression"
												},
												"costCenter_guid": {
													"value": "@concat('''', pipeline().parameters.costCenter_guid, '''')",
													"type": "Expression"
												},
												"costCenter_label": {
													"value": "@concat('''', pipeline().parameters.costCenter_label, '''')",
													"type": "Expression"
												},
												"object_receipt": {
													"value": "@pipeline().parameters.object_receipt",
													"type": "Expression"
												},
												"object_taxCode": {
													"value": "@concat('''', pipeline().parameters.object_taxCode, '''')",
													"type": "Expression"
												},
												"object_taxNotes": {
													"value": "@concat('''', pipeline().parameters.object_taxNotes, '''')",
													"type": "Expression"
												},
												"object_amount": {
													"value": "@pipeline().parameters.object_amount",
													"type": "Expression"
												},
												"object_taxPercentage": {
													"value": "@pipeline().parameters.object_taxPercentage",
													"type": "Expression"
												},
												"amount": {
													"value": "@pipeline().parameters.amount",
													"type": "Expression"
												},
												"amountNet": {
													"value": "@pipeline().parameters.amountNet",
													"type": "Expression"
												},
												"amountPresale": {
													"value": "@pipeline().parameters.amountPresale",
													"type": "Expression"
												},
												"amountSold": {
													"value": "@pipeline().parameters.amountSold",
													"type": "Expression"
												},
												"amountPayed": {
													"value": "@pipeline().parameters.amountPayed",
													"type": "Expression"
												},
												"amountPending": {
													"value": "@pipeline().parameters.amountPending",
													"type": "Expression"
												},
												"amountCanceled": {
													"value": "@pipeline().parameters.amountCanceled",
													"type": "Expression"
												},
												"externalId": {
													"value": "@concat('''', pipeline().parameters.externalId, '''')",
													"type": "Expression"
												},
												"amountRefunded": {
													"value": "@pipeline().parameters.amountRefunded",
													"type": "Expression"
												},
												"invoiceSummary": {
													"value": "@concat('''', pipeline().parameters.invoiceSummary, '''')",
													"type": "Expression"
												},
												"eventCalendar_guid": {
													"value": "@concat('''', pipeline().parameters.eventCalendar_guid, '''')",
													"type": "Expression"
												},
												"passDetail_guid": {
													"value": "@concat('''', pipeline().parameters.passDetail_guid, '''')",
													"type": "Expression"
												},
												"paymentCostCenter_guid": {
													"value": "@concat('''', pipeline().parameters.paymentCostCenter_guid, '''')",
													"type": "Expression"
												},
												"organization_guid": {
													"value": "@concat('''', pipeline().parameters.organization_guid, '''')",
													"type": "Expression"
												},
												"venue_guid": {
													"value": "@concat('''', pipeline().parameters.venue_guid, '''')",
													"type": "Expression"
												},
												"olapUpdateTimestamp": {
													"value": "@concat('''', pipeline().parameters.olapUpdateTimestamp, '''')",
													"type": "Expression"
												},
												"row_id": {
													"value": "@concat('''', pipeline().parameters.row_id, '''')",
													"type": "Expression"
												},
												"operationType": {
													"value": "@concat('''', pipeline().parameters.operationType, '''')",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"DummySource": {},
												"SourceExistingHistorical": {
													"folderPath": "@pipeline().parameters.targetFolderPath",
													"fileName": "@pipeline().parameters.targetFileName"
												},
												"SinkTemp": {
													"folderPath": "@pipeline().parameters.tempFolderPath",
													"fileName": "@pipeline().parameters.tempFileName"
												}
											},
											"linkedServiceParameters": {
												"SourceExistingHistorical": {
													"schemaLinkedService": {
														"folderPath": "Mida2/Bookings/Historical/2025/01",
														"fileName": "VFD_Mida_Historical_20250101.parquet"
													}
												}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								},
								{
									"name": "Copy Temp To Final",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Append To Existing Historical",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": false,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": "@pipeline().parameters.tempFolderPath",
												"fileName": "@pipeline().parameters.tempFileName"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "VFD_DS_Curated_Mida_Historical_Parquet",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": "@pipeline().parameters.targetFolderPath",
												"fileName": "@pipeline().parameters.targetFileName"
											}
										}
									]
								},
								{
									"name": "Delete Temp File",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Copy Temp To Final",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": "@pipeline().parameters.tempFolderPath",
												"fileName": "@pipeline().parameters.tempFileName"
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": false,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"guid_pk": {
						"type": "string"
					},
					"reservation_progressiveCode": {
						"type": "string"
					},
					"reservation_code": {
						"type": "string"
					},
					"reservation_status": {
						"type": "int"
					},
					"invoiceRequired": {
						"type": "string"
					},
					"customer": {
						"type": "float"
					},
					"visitDate": {
						"type": "string"
					},
					"reservationPayment_guid": {
						"type": "string"
					},
					"parentPayment_guid": {
						"type": "string"
					},
					"sliced": {
						"type": "string"
					},
					"reservation_guid": {
						"type": "string"
					},
					"group_guid": {
						"type": "string"
					},
					"group_label": {
						"type": "string"
					},
					"group_email": {
						"type": "string"
					},
					"paymentCode": {
						"type": "string"
					},
					"paymentCondition": {
						"type": "float"
					},
					"reservation_amount": {
						"type": "float"
					},
					"reservation_amountTax": {
						"type": "float"
					},
					"status": {
						"type": "int"
					},
					"status_text": {
						"type": "string"
					},
					"stamp": {
						"type": "string"
					},
					"notes": {
						"type": "string"
					},
					"transactionType": {
						"type": "string"
					},
					"transactionType_text": {
						"type": "string"
					},
					"paymentLimitDate": {
						"type": "string"
					},
					"paymentDate": {
						"type": "string"
					},
					"refund": {
						"type": "string"
					},
					"refunded": {
						"type": "string"
					},
					"convention_label": {
						"type": "string"
					},
					"receiptCode": {
						"type": "string"
					},
					"insertTimestamp": {
						"type": "string"
					},
					"updateTimestamp": {
						"type": "string"
					},
					"owner": {
						"type": "string"
					},
					"owner_text": {
						"type": "string"
					},
					"sessionId": {
						"type": "string"
					},
					"terminal_label": {
						"type": "string"
					},
					"terminalGroup_label": {
						"type": "string"
					},
					"gateway_guid": {
						"type": "string"
					},
					"gateway_label": {
						"type": "string"
					},
					"transactionID": {
						"type": "string"
					},
					"bankAccount_guid": {
						"type": "string"
					},
					"bankAccount_label": {
						"type": "string"
					},
					"channel_guid": {
						"type": "string"
					},
					"channel_label": {
						"type": "string"
					},
					"channelType": {
						"type": "string"
					},
					"detail_guid": {
						"type": "string"
					},
					"extra_guid": {
						"type": "string"
					},
					"priceList": {
						"type": "string"
					},
					"event": {
						"type": "string"
					},
					"detailType": {
						"type": "string"
					},
					"detail_text": {
						"type": "string"
					},
					"detail_label": {
						"type": "string"
					},
					"detail_count": {
						"type": "int"
					},
					"paymentDetail_guid": {
						"type": "string"
					},
					"detail_payingPartecipants": {
						"type": "int"
					},
					"detail_quantity": {
						"type": "int"
					},
					"tickets_quantity": {
						"type": "int"
					},
					"pax_quantity": {
						"type": "int"
					},
					"costCenter_guid": {
						"type": "string"
					},
					"costCenter_label": {
						"type": "string"
					},
					"object_receipt": {
						"type": "int"
					},
					"object_taxCode": {
						"type": "string"
					},
					"object_taxNotes": {
						"type": "string"
					},
					"object_amount": {
						"type": "float"
					},
					"object_taxPercentage": {
						"type": "float"
					},
					"amount": {
						"type": "float"
					},
					"amountNet": {
						"type": "float"
					},
					"amountPresale": {
						"type": "float"
					},
					"amountSold": {
						"type": "float"
					},
					"amountPayed": {
						"type": "float"
					},
					"amountPending": {
						"type": "float"
					},
					"amountCanceled": {
						"type": "float"
					},
					"externalId": {
						"type": "string"
					},
					"amountRefunded": {
						"type": "float"
					},
					"invoiceSummary": {
						"type": "string"
					},
					"eventCalendar_guid": {
						"type": "string"
					},
					"passDetail_guid": {
						"type": "string"
					},
					"paymentCostCenter_guid": {
						"type": "string"
					},
					"organization_guid": {
						"type": "string"
					},
					"venue_guid": {
						"type": "string"
					},
					"olapUpdateTimestamp": {
						"type": "string"
					},
					"row_id": {
						"type": "string"
					},
					"operationType": {
						"type": "string"
					},
					"targetFolderPath": {
						"type": "string"
					},
					"targetFileName": {
						"type": "string"
					},
					"tempFolderPath": {
						"type": "string"
					},
					"tempFileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"annotations": [
					"Pipeline atomica per append a historical con audit trail",
					"Sintassi corretta uniforme per CREATE e APPEND dataflow",
					"Tutti gli 83 parametri con mappatura corretta"
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Mida_Historical_Parquet')]",
				"[concat(variables('factoryId'), '/dataflows/VFD_DFL_Mida2_Atomic_CREATE_Historical')]",
				"[concat(variables('factoryId'), '/dataflows/VFD_DFL_Mida2_Atomic_APPEND_Historical')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Mida_Temp_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Mida2_Atomic_DELETE_Booking_Complete')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline atomica per rimozione di una prenotazione dal file completo - riceve solo row_id",
				"activities": [
					{
						"name": "Delete Record From Complete",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_Mida2_Atomic_DELETE_Booking_Complete",
								"type": "DataFlowReference",
								"parameters": {
									"row_id": {
										"value": "@concat('''', pipeline().parameters.row_id, '''')",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SourceExistingContent": {
										"folderPath": "@pipeline().parameters.targetFolderPath",
										"fileName": "@pipeline().parameters.targetFileName"
									},
									"SinkTemp": {
										"folderPath": "@pipeline().parameters.tempFolderPath",
										"fileName": "@pipeline().parameters.tempFileName"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Copy Temp To Final",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Record From Complete",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "@pipeline().parameters.tempFolderPath",
									"fileName": "@pipeline().parameters.tempFileName"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Complete_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "@pipeline().parameters.targetFolderPath",
									"fileName": "@pipeline().parameters.targetFileName"
								}
							}
						]
					},
					{
						"name": "Delete Temp File",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy Temp To Final",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "@pipeline().parameters.tempFolderPath",
									"fileName": "@pipeline().parameters.tempFileName"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": false,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"row_id": {
						"type": "string"
					},
					"targetFolderPath": {
						"type": "string"
					},
					"targetFileName": {
						"type": "string"
					},
					"tempFolderPath": {
						"type": "string"
					},
					"tempFileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"annotations": [
					"Pipeline atomica per rimozione prenotazioni complete",
					"Riceve solo row_id come parametro",
					"Sintassi corretta per parametri e dataset"
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/VFD_DFL_Mida2_Atomic_DELETE_Booking_Complete')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Mida_Temp_Parquet')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Mida_Bookings_Complete_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Mida2_Atomic_DELETE_Booking_Summary')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline atomica per rimozione di una prenotazione dal file summary",
				"activities": [
					{
						"name": "Delete Record From Summary",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_Mida2_Atomic_DELETE_Booking_Summary",
								"type": "DataFlowReference",
								"parameters": {
									"row_id": {
										"value": "@concat('''', pipeline().parameters.row_id, '''')",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SourceExistingContent": {
										"folderPath": "@pipeline().parameters.targetFolderPath",
										"fileName": "@pipeline().parameters.targetFileName"
									},
									"SinkTemp": {
										"folderPath": "@pipeline().parameters.tempFolderPath",
										"fileName": "@pipeline().parameters.tempFileName"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Copy Temp To Final",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Record From Summary",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "@pipeline().parameters.tempFolderPath",
									"fileName": "@pipeline().parameters.tempFileName"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Summary_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "@pipeline().parameters.targetFolderPath",
									"fileName": "@pipeline().parameters.targetFileName"
								}
							}
						]
					},
					{
						"name": "Delete Temp File",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy Temp To Final",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "@pipeline().parameters.tempFolderPath",
									"fileName": "@pipeline().parameters.tempFileName"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": false,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"row_id": {
						"type": "string"
					},
					"targetFolderPath": {
						"type": "string"
					},
					"targetFileName": {
						"type": "string"
					},
					"tempFolderPath": {
						"type": "string"
					},
					"tempFileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"annotations": [
					"Pipeline atomica per rimozione prenotazioni summary",
					"Sintassi corretta per parametri e dataset"
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/VFD_DFL_Mida2_Atomic_DELETE_Booking_Summary')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Mida_Temp_Parquet')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Mida_Bookings_Summary_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Mida2_Atomic_INSERT_Booking_Complete')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "pipeline atomica per inserimento di una prenotazione nel file completo - riceve tutti i campi come parametri",
				"activities": [
					{
						"name": "Check Complete File Exists",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Complete_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "@pipeline().parameters.targetFolderPath",
									"fileName": "@pipeline().parameters.targetFileName"
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "If File Exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check Complete File Exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('Check Complete File Exists').output.exists",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Create New Complete File",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "VFD_DFL_Mida2_Atomic_CREATE_Booking_Complete",
											"type": "DataFlowReference",
											"parameters": {
												"guid_pk": {
													"value": "@concat('''', pipeline().parameters.guid_pk, '''')",
													"type": "Expression"
												},
												"reservation_progressiveCode": {
													"value": "@concat('''', pipeline().parameters.reservation_progressiveCode, '''')",
													"type": "Expression"
												},
												"reservation_code": {
													"value": "@concat('''', pipeline().parameters.reservation_code, '''')",
													"type": "Expression"
												},
												"reservation_status": {
													"value": "@pipeline().parameters.reservation_status",
													"type": "Expression"
												},
												"invoiceRequired": {
													"value": "@concat('''', pipeline().parameters.invoiceRequired, '''')",
													"type": "Expression"
												},
												"customer": {
													"value": "@pipeline().parameters.customer",
													"type": "Expression"
												},
												"visitDate": {
													"value": "@concat('''', pipeline().parameters.visitDate, '''')",
													"type": "Expression"
												},
												"reservationPayment_guid": {
													"value": "@concat('''', pipeline().parameters.reservationPayment_guid, '''')",
													"type": "Expression"
												},
												"parentPayment_guid": {
													"value": "@concat('''', pipeline().parameters.parentPayment_guid, '''')",
													"type": "Expression"
												},
												"sliced": {
													"value": "@concat('''', pipeline().parameters.sliced, '''')",
													"type": "Expression"
												},
												"reservation_guid": {
													"value": "@concat('''', pipeline().parameters.reservation_guid, '''')",
													"type": "Expression"
												},
												"group_guid": {
													"value": "@concat('''', pipeline().parameters.group_guid, '''')",
													"type": "Expression"
												},
												"group_label": {
													"value": "@concat('''', pipeline().parameters.group_label, '''')",
													"type": "Expression"
												},
												"group_email": {
													"value": "@concat('''', pipeline().parameters.group_email, '''')",
													"type": "Expression"
												},
												"paymentCode": {
													"value": "@concat('''', pipeline().parameters.paymentCode, '''')",
													"type": "Expression"
												},
												"paymentCondition": {
													"value": "@pipeline().parameters.paymentCondition",
													"type": "Expression"
												},
												"reservation_amount": {
													"value": "@pipeline().parameters.reservation_amount",
													"type": "Expression"
												},
												"reservation_amountTax": {
													"value": "@pipeline().parameters.reservation_amountTax",
													"type": "Expression"
												},
												"status": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												},
												"status_text": {
													"value": "@concat('''', pipeline().parameters.status_text, '''')",
													"type": "Expression"
												},
												"stamp": {
													"value": "@concat('''', pipeline().parameters.stamp, '''')",
													"type": "Expression"
												},
												"notes": {
													"value": "@concat('''', pipeline().parameters.notes, '''')",
													"type": "Expression"
												},
												"transactionType": {
													"value": "@concat('''', pipeline().parameters.transactionType, '''')",
													"type": "Expression"
												},
												"transactionType_text": {
													"value": "@concat('''', pipeline().parameters.transactionType_text, '''')",
													"type": "Expression"
												},
												"paymentLimitDate": {
													"value": "@concat('''', pipeline().parameters.paymentLimitDate, '''')",
													"type": "Expression"
												},
												"paymentDate": {
													"value": "@concat('''', pipeline().parameters.paymentDate, '''')",
													"type": "Expression"
												},
												"refund": {
													"value": "@concat('''', pipeline().parameters.refund, '''')",
													"type": "Expression"
												},
												"refunded": {
													"value": "@concat('''', pipeline().parameters.refunded, '''')",
													"type": "Expression"
												},
												"convention_label": {
													"value": "@concat('''', pipeline().parameters.convention_label, '''')",
													"type": "Expression"
												},
												"receiptCode": {
													"value": "@concat('''', pipeline().parameters.receiptCode, '''')",
													"type": "Expression"
												},
												"insertTimestamp": {
													"value": "@concat('''', pipeline().parameters.insertTimestamp, '''')",
													"type": "Expression"
												},
												"updateTimestamp": {
													"value": "@concat('''', pipeline().parameters.updateTimestamp, '''')",
													"type": "Expression"
												},
												"owner": {
													"value": "@concat('''', pipeline().parameters.owner, '''')",
													"type": "Expression"
												},
												"owner_text": {
													"value": "@concat('''', pipeline().parameters.owner_text, '''')",
													"type": "Expression"
												},
												"sessionId": {
													"value": "@concat('''', pipeline().parameters.sessionId, '''')",
													"type": "Expression"
												},
												"terminal_label": {
													"value": "@concat('''', pipeline().parameters.terminal_label, '''')",
													"type": "Expression"
												},
												"terminalGroup_label": {
													"value": "@concat('''', pipeline().parameters.terminalGroup_label, '''')",
													"type": "Expression"
												},
												"gateway_guid": {
													"value": "@concat('''', pipeline().parameters.gateway_guid, '''')",
													"type": "Expression"
												},
												"gateway_label": {
													"value": "@concat('''', pipeline().parameters.gateway_label, '''')",
													"type": "Expression"
												},
												"transactionID": {
													"value": "@concat('''', pipeline().parameters.transactionID, '''')",
													"type": "Expression"
												},
												"bankAccount_guid": {
													"value": "@concat('''', pipeline().parameters.bankAccount_guid, '''')",
													"type": "Expression"
												},
												"bankAccount_label": {
													"value": "@concat('''', pipeline().parameters.bankAccount_label, '''')",
													"type": "Expression"
												},
												"channel_guid": {
													"value": "@concat('''', pipeline().parameters.channel_guid, '''')",
													"type": "Expression"
												},
												"channel_label": {
													"value": "@concat('''', pipeline().parameters.channel_label, '''')",
													"type": "Expression"
												},
												"channelType": {
													"value": "@concat('''', pipeline().parameters.channelType, '''')",
													"type": "Expression"
												},
												"detail_guid": {
													"value": "@concat('''', pipeline().parameters.detail_guid, '''')",
													"type": "Expression"
												},
												"extra_guid": {
													"value": "@concat('''', pipeline().parameters.extra_guid, '''')",
													"type": "Expression"
												},
												"priceList": {
													"value": "@concat('''', pipeline().parameters.priceList, '''')",
													"type": "Expression"
												},
												"event": {
													"value": "@concat('''', pipeline().parameters.event, '''')",
													"type": "Expression"
												},
												"detailType": {
													"value": "@concat('''', pipeline().parameters.detailType, '''')",
													"type": "Expression"
												},
												"detail_text": {
													"value": "@concat('''', pipeline().parameters.detail_text, '''')",
													"type": "Expression"
												},
												"detail_label": {
													"value": "@concat('''', pipeline().parameters.detail_label, '''')",
													"type": "Expression"
												},
												"detail_count": {
													"value": "@pipeline().parameters.detail_count",
													"type": "Expression"
												},
												"paymentDetail_guid": {
													"value": "@concat('''', pipeline().parameters.paymentDetail_guid, '''')",
													"type": "Expression"
												},
												"detail_payingPartecipants": {
													"value": "@pipeline().parameters.detail_payingPartecipants",
													"type": "Expression"
												},
												"detail_quantity": {
													"value": "@pipeline().parameters.detail_quantity",
													"type": "Expression"
												},
												"tickets_quantity": {
													"value": "@pipeline().parameters.tickets_quantity",
													"type": "Expression"
												},
												"pax_quantity": {
													"value": "@pipeline().parameters.pax_quantity",
													"type": "Expression"
												},
												"costCenter_guid": {
													"value": "@concat('''', pipeline().parameters.costCenter_guid, '''')",
													"type": "Expression"
												},
												"costCenter_label": {
													"value": "@concat('''', pipeline().parameters.costCenter_label, '''')",
													"type": "Expression"
												},
												"object_receipt": {
													"value": "@pipeline().parameters.object_receipt",
													"type": "Expression"
												},
												"object_taxCode": {
													"value": "@concat('''', pipeline().parameters.object_taxCode, '''')",
													"type": "Expression"
												},
												"object_taxNotes": {
													"value": "@concat('''', pipeline().parameters.object_taxNotes, '''')",
													"type": "Expression"
												},
												"object_amount": {
													"value": "@pipeline().parameters.object_amount",
													"type": "Expression"
												},
												"object_taxPercentage": {
													"value": "@pipeline().parameters.object_taxPercentage",
													"type": "Expression"
												},
												"amount": {
													"value": "@pipeline().parameters.amount",
													"type": "Expression"
												},
												"amountNet": {
													"value": "@pipeline().parameters.amountNet",
													"type": "Expression"
												},
												"amountPresale": {
													"value": "@pipeline().parameters.amountPresale",
													"type": "Expression"
												},
												"amountSold": {
													"value": "@pipeline().parameters.amountSold",
													"type": "Expression"
												},
												"amountPayed": {
													"value": "@pipeline().parameters.amountPayed",
													"type": "Expression"
												},
												"amountPending": {
													"value": "@pipeline().parameters.amountPending",
													"type": "Expression"
												},
												"amountCanceled": {
													"value": "@pipeline().parameters.amountCanceled",
													"type": "Expression"
												},
												"externalId": {
													"value": "@concat('''', pipeline().parameters.externalId, '''')",
													"type": "Expression"
												},
												"amountRefunded": {
													"value": "@pipeline().parameters.amountRefunded",
													"type": "Expression"
												},
												"invoiceSummary": {
													"value": "@concat('''', pipeline().parameters.invoiceSummary, '''')",
													"type": "Expression"
												},
												"eventCalendar_guid": {
													"value": "@concat('''', pipeline().parameters.eventCalendar_guid, '''')",
													"type": "Expression"
												},
												"passDetail_guid": {
													"value": "@concat('''', pipeline().parameters.passDetail_guid, '''')",
													"type": "Expression"
												},
												"paymentCostCenter_guid": {
													"value": "@concat('''', pipeline().parameters.paymentCostCenter_guid, '''')",
													"type": "Expression"
												},
												"organization_guid": {
													"value": "@concat('''', pipeline().parameters.organization_guid, '''')",
													"type": "Expression"
												},
												"venue_guid": {
													"value": "@concat('''', pipeline().parameters.venue_guid, '''')",
													"type": "Expression"
												},
												"olapUpdateTimestamp": {
													"value": "@concat('''', pipeline().parameters.olapUpdateTimestamp, '''')",
													"type": "Expression"
												},
												"row_id": {
													"value": "@concat('''', pipeline().parameters.row_id, '''')",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"DummySource": {},
												"SinkComplete": {
													"folderPath": "@pipeline().parameters.targetFolderPath",
													"fileName": "@pipeline().parameters.targetFileName"
												}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Append To Existing File",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "VFD_DFL_Mida2_Atomic_APPEND_Booking_Complete",
											"type": "DataFlowReference",
											"parameters": {
												"guid_pk": {
													"value": "@concat('''', pipeline().parameters.guid_pk, '''')",
													"type": "Expression"
												},
												"reservation_progressiveCode": {
													"value": "@concat('''', pipeline().parameters.reservation_progressiveCode, '''')",
													"type": "Expression"
												},
												"reservation_code": {
													"value": "@concat('''', pipeline().parameters.reservation_code, '''')",
													"type": "Expression"
												},
												"reservation_status": {
													"value": "@pipeline().parameters.reservation_status",
													"type": "Expression"
												},
												"invoiceRequired": {
													"value": "@concat('''', pipeline().parameters.invoiceRequired, '''')",
													"type": "Expression"
												},
												"customer": {
													"value": "@pipeline().parameters.customer",
													"type": "Expression"
												},
												"visitDate": {
													"value": "@concat('''', pipeline().parameters.visitDate, '''')",
													"type": "Expression"
												},
												"reservationPayment_guid": {
													"value": "@concat('''', pipeline().parameters.reservationPayment_guid, '''')",
													"type": "Expression"
												},
												"parentPayment_guid": {
													"value": "@concat('''', pipeline().parameters.parentPayment_guid, '''')",
													"type": "Expression"
												},
												"sliced": {
													"value": "@concat('''', pipeline().parameters.sliced, '''')",
													"type": "Expression"
												},
												"reservation_guid": {
													"value": "@concat('''', pipeline().parameters.reservation_guid, '''')",
													"type": "Expression"
												},
												"group_guid": {
													"value": "@concat('''', pipeline().parameters.group_guid, '''')",
													"type": "Expression"
												},
												"group_label": {
													"value": "@concat('''', pipeline().parameters.group_label, '''')",
													"type": "Expression"
												},
												"group_email": {
													"value": "@concat('''', pipeline().parameters.group_email, '''')",
													"type": "Expression"
												},
												"paymentCode": {
													"value": "@concat('''', pipeline().parameters.paymentCode, '''')",
													"type": "Expression"
												},
												"paymentCondition": {
													"value": "@pipeline().parameters.paymentCondition",
													"type": "Expression"
												},
												"reservation_amount": {
													"value": "@pipeline().parameters.reservation_amount",
													"type": "Expression"
												},
												"reservation_amountTax": {
													"value": "@pipeline().parameters.reservation_amountTax",
													"type": "Expression"
												},
												"status": {
													"value": "@pipeline().parameters.status",
													"type": "Expression"
												},
												"status_text": {
													"value": "@concat('''', pipeline().parameters.status_text, '''')",
													"type": "Expression"
												},
												"stamp": {
													"value": "@concat('''', pipeline().parameters.stamp, '''')",
													"type": "Expression"
												},
												"notes": {
													"value": "@concat('''', pipeline().parameters.notes, '''')",
													"type": "Expression"
												},
												"transactionType": {
													"value": "@concat('''', pipeline().parameters.transactionType, '''')",
													"type": "Expression"
												},
												"transactionType_text": {
													"value": "@concat('''', pipeline().parameters.transactionType_text, '''')",
													"type": "Expression"
												},
												"paymentLimitDate": {
													"value": "@concat('''', pipeline().parameters.paymentLimitDate, '''')",
													"type": "Expression"
												},
												"paymentDate": {
													"value": "@concat('''', pipeline().parameters.paymentDate, '''')",
													"type": "Expression"
												},
												"refund": {
													"value": "@concat('''', pipeline().parameters.refund, '''')",
													"type": "Expression"
												},
												"refunded": {
													"value": "@concat('''', pipeline().parameters.refunded, '''')",
													"type": "Expression"
												},
												"convention_label": {
													"value": "@concat('''', pipeline().parameters.convention_label, '''')",
													"type": "Expression"
												},
												"receiptCode": {
													"value": "@concat('''', pipeline().parameters.receiptCode, '''')",
													"type": "Expression"
												},
												"insertTimestamp": {
													"value": "@concat('''', pipeline().parameters.insertTimestamp, '''')",
													"type": "Expression"
												},
												"updateTimestamp": {
													"value": "@concat('''', pipeline().parameters.updateTimestamp, '''')",
													"type": "Expression"
												},
												"owner": {
													"value": "@concat('''', pipeline().parameters.owner, '''')",
													"type": "Expression"
												},
												"owner_text": {
													"value": "@concat('''', pipeline().parameters.owner_text, '''')",
													"type": "Expression"
												},
												"sessionId": {
													"value": "@concat('''', pipeline().parameters.sessionId, '''')",
													"type": "Expression"
												},
												"terminal_label": {
													"value": "@concat('''', pipeline().parameters.terminal_label, '''')",
													"type": "Expression"
												},
												"terminalGroup_label": {
													"value": "@concat('''', pipeline().parameters.terminalGroup_label, '''')",
													"type": "Expression"
												},
												"gateway_guid": {
													"value": "@concat('''', pipeline().parameters.gateway_guid, '''')",
													"type": "Expression"
												},
												"gateway_label": {
													"value": "@concat('''', pipeline().parameters.gateway_label, '''')",
													"type": "Expression"
												},
												"transactionID": {
													"value": "@concat('''', pipeline().parameters.transactionID, '''')",
													"type": "Expression"
												},
												"bankAccount_guid": {
													"value": "@concat('''', pipeline().parameters.bankAccount_guid, '''')",
													"type": "Expression"
												},
												"bankAccount_label": {
													"value": "@concat('''', pipeline().parameters.bankAccount_label, '''')",
													"type": "Expression"
												},
												"channel_guid": {
													"value": "@concat('''', pipeline().parameters.channel_guid, '''')",
													"type": "Expression"
												},
												"channel_label": {
													"value": "@concat('''', pipeline().parameters.channel_label, '''')",
													"type": "Expression"
												},
												"channelType": {
													"value": "@concat('''', pipeline().parameters.channelType, '''')",
													"type": "Expression"
												},
												"detail_guid": {
													"value": "@concat('''', pipeline().parameters.detail_guid, '''')",
													"type": "Expression"
												},
												"extra_guid": {
													"value": "@concat('''', pipeline().parameters.extra_guid, '''')",
													"type": "Expression"
												},
												"priceList": {
													"value": "@concat('''', pipeline().parameters.priceList, '''')",
													"type": "Expression"
												},
												"event": {
													"value": "@concat('''', pipeline().parameters.event, '''')",
													"type": "Expression"
												},
												"detailType": {
													"value": "@concat('''', pipeline().parameters.detailType, '''')",
													"type": "Expression"
												},
												"detail_text": {
													"value": "@concat('''', pipeline().parameters.detail_text, '''')",
													"type": "Expression"
												},
												"detail_label": {
													"value": "@concat('''', pipeline().parameters.detail_label, '''')",
													"type": "Expression"
												},
												"detail_count": {
													"value": "@pipeline().parameters.detail_count",
													"type": "Expression"
												},
												"paymentDetail_guid": {
													"value": "@concat('''', pipeline().parameters.paymentDetail_guid, '''')",
													"type": "Expression"
												},
												"detail_payingPartecipants": {
													"value": "@pipeline().parameters.detail_payingPartecipants",
													"type": "Expression"
												},
												"detail_quantity": {
													"value": "@pipeline().parameters.detail_quantity",
													"type": "Expression"
												},
												"tickets_quantity": {
													"value": "@pipeline().parameters.tickets_quantity",
													"type": "Expression"
												},
												"pax_quantity": {
													"value": "@pipeline().parameters.pax_quantity",
													"type": "Expression"
												},
												"costCenter_guid": {
													"value": "@concat('''', pipeline().parameters.costCenter_guid, '''')",
													"type": "Expression"
												},
												"costCenter_label": {
													"value": "@concat('''', pipeline().parameters.costCenter_label, '''')",
													"type": "Expression"
												},
												"object_receipt": {
													"value": "@pipeline().parameters.object_receipt",
													"type": "Expression"
												},
												"object_taxCode": {
													"value": "@concat('''', pipeline().parameters.object_taxCode, '''')",
													"type": "Expression"
												},
												"object_taxNotes": {
													"value": "@concat('''', pipeline().parameters.object_taxNotes, '''')",
													"type": "Expression"
												},
												"object_amount": {
													"value": "@pipeline().parameters.object_amount",
													"type": "Expression"
												},
												"object_taxPercentage": {
													"value": "@pipeline().parameters.object_taxPercentage",
													"type": "Expression"
												},
												"amount": {
													"value": "@pipeline().parameters.amount",
													"type": "Expression"
												},
												"amountNet": {
													"value": "@pipeline().parameters.amountNet",
													"type": "Expression"
												},
												"amountPresale": {
													"value": "@pipeline().parameters.amountPresale",
													"type": "Expression"
												},
												"amountSold": {
													"value": "@pipeline().parameters.amountSold",
													"type": "Expression"
												},
												"amountPayed": {
													"value": "@pipeline().parameters.amountPayed",
													"type": "Expression"
												},
												"amountPending": {
													"value": "@pipeline().parameters.amountPending",
													"type": "Expression"
												},
												"amountCanceled": {
													"value": "@pipeline().parameters.amountCanceled",
													"type": "Expression"
												},
												"externalId": {
													"value": "@concat('''', pipeline().parameters.externalId, '''')",
													"type": "Expression"
												},
												"amountRefunded": {
													"value": "@pipeline().parameters.amountRefunded",
													"type": "Expression"
												},
												"invoiceSummary": {
													"value": "@concat('''', pipeline().parameters.invoiceSummary, '''')",
													"type": "Expression"
												},
												"eventCalendar_guid": {
													"value": "@concat('''', pipeline().parameters.eventCalendar_guid, '''')",
													"type": "Expression"
												},
												"passDetail_guid": {
													"value": "@concat('''', pipeline().parameters.passDetail_guid, '''')",
													"type": "Expression"
												},
												"paymentCostCenter_guid": {
													"value": "@concat('''', pipeline().parameters.paymentCostCenter_guid, '''')",
													"type": "Expression"
												},
												"organization_guid": {
													"value": "@concat('''', pipeline().parameters.organization_guid, '''')",
													"type": "Expression"
												},
												"venue_guid": {
													"value": "@concat('''', pipeline().parameters.venue_guid, '''')",
													"type": "Expression"
												},
												"olapUpdateTimestamp": {
													"value": "@concat('''', pipeline().parameters.olapUpdateTimestamp, '''')",
													"type": "Expression"
												},
												"row_id": {
													"value": "@concat('''', pipeline().parameters.row_id, '''')",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"DummySource": {},
												"SourceExistingContent": {
													"folderPath": "@pipeline().parameters.targetFolderPath",
													"fileName": "@pipeline().parameters.targetFileName"
												},
												"SinkTemp": {
													"folderPath": "@pipeline().parameters.tempFolderPath",
													"fileName": "@pipeline().parameters.tempFileName"
												}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								},
								{
									"name": "Copy Temp To Final",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Append To Existing File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": false,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "ParquetReadSettings"
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": "@pipeline().parameters.tempFolderPath",
												"fileName": "@pipeline().parameters.tempFileName"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "VFD_DS_Curated_Mida_Bookings_Complete_Parquet",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": "@pipeline().parameters.targetFolderPath",
												"fileName": "@pipeline().parameters.targetFileName"
											}
										}
									]
								},
								{
									"name": "Delete Temp File",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Copy Temp To Final",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": "@pipeline().parameters.tempFolderPath",
												"fileName": "@pipeline().parameters.tempFileName"
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": false,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"guid_pk": {
						"type": "string"
					},
					"reservation_progressiveCode": {
						"type": "string"
					},
					"reservation_code": {
						"type": "string"
					},
					"reservation_status": {
						"type": "int"
					},
					"invoiceRequired": {
						"type": "string"
					},
					"customer": {
						"type": "float"
					},
					"visitDate": {
						"type": "string"
					},
					"reservationPayment_guid": {
						"type": "string"
					},
					"parentPayment_guid": {
						"type": "string"
					},
					"sliced": {
						"type": "string"
					},
					"reservation_guid": {
						"type": "string"
					},
					"group_guid": {
						"type": "string"
					},
					"group_label": {
						"type": "string"
					},
					"group_email": {
						"type": "string"
					},
					"paymentCode": {
						"type": "string"
					},
					"paymentCondition": {
						"type": "float"
					},
					"reservation_amount": {
						"type": "float"
					},
					"reservation_amountTax": {
						"type": "float"
					},
					"status": {
						"type": "int"
					},
					"status_text": {
						"type": "string"
					},
					"stamp": {
						"type": "string"
					},
					"notes": {
						"type": "string"
					},
					"transactionType": {
						"type": "string"
					},
					"transactionType_text": {
						"type": "string"
					},
					"paymentLimitDate": {
						"type": "string"
					},
					"paymentDate": {
						"type": "string"
					},
					"refund": {
						"type": "string"
					},
					"refunded": {
						"type": "string"
					},
					"convention_label": {
						"type": "string"
					},
					"receiptCode": {
						"type": "string"
					},
					"insertTimestamp": {
						"type": "string"
					},
					"updateTimestamp": {
						"type": "string"
					},
					"owner": {
						"type": "string"
					},
					"owner_text": {
						"type": "string"
					},
					"sessionId": {
						"type": "string"
					},
					"terminal_label": {
						"type": "string"
					},
					"terminalGroup_label": {
						"type": "string"
					},
					"gateway_guid": {
						"type": "string"
					},
					"gateway_label": {
						"type": "string"
					},
					"transactionID": {
						"type": "string"
					},
					"bankAccount_guid": {
						"type": "string"
					},
					"bankAccount_label": {
						"type": "string"
					},
					"channel_guid": {
						"type": "string"
					},
					"channel_label": {
						"type": "string"
					},
					"channelType": {
						"type": "string"
					},
					"detail_guid": {
						"type": "string"
					},
					"extra_guid": {
						"type": "string"
					},
					"priceList": {
						"type": "string"
					},
					"event": {
						"type": "string"
					},
					"detailType": {
						"type": "string"
					},
					"detail_text": {
						"type": "string"
					},
					"detail_label": {
						"type": "string"
					},
					"detail_count": {
						"type": "int"
					},
					"paymentDetail_guid": {
						"type": "string"
					},
					"detail_payingPartecipants": {
						"type": "int"
					},
					"detail_quantity": {
						"type": "int"
					},
					"tickets_quantity": {
						"type": "int"
					},
					"pax_quantity": {
						"type": "int"
					},
					"costCenter_guid": {
						"type": "string"
					},
					"costCenter_label": {
						"type": "string"
					},
					"object_receipt": {
						"type": "int"
					},
					"object_taxCode": {
						"type": "string"
					},
					"object_taxNotes": {
						"type": "string"
					},
					"object_amount": {
						"type": "float"
					},
					"object_taxPercentage": {
						"type": "float"
					},
					"amount": {
						"type": "float"
					},
					"amountNet": {
						"type": "float"
					},
					"amountPresale": {
						"type": "float"
					},
					"amountSold": {
						"type": "float"
					},
					"amountPayed": {
						"type": "float"
					},
					"amountPending": {
						"type": "float"
					},
					"amountCanceled": {
						"type": "float"
					},
					"externalId": {
						"type": "string"
					},
					"amountRefunded": {
						"type": "float"
					},
					"invoiceSummary": {
						"type": "string"
					},
					"eventCalendar_guid": {
						"type": "string"
					},
					"passDetail_guid": {
						"type": "string"
					},
					"paymentCostCenter_guid": {
						"type": "string"
					},
					"organization_guid": {
						"type": "string"
					},
					"venue_guid": {
						"type": "string"
					},
					"olapUpdateTimestamp": {
						"type": "string"
					},
					"row_id": {
						"type": "string"
					},
					"targetFolderPath": {
						"type": "string"
					},
					"targetFileName": {
						"type": "string"
					},
					"tempFolderPath": {
						"type": "string"
					},
					"tempFileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"annotations": [
					"pipeline atomica per inserimento prenotazioni complete",
					"Sintassi corretta e uniforme per entrambi i dataflow CREATE e APPEND"
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Mida_Bookings_Complete_Parquet')]",
				"[concat(variables('factoryId'), '/dataflows/VFD_DFL_Mida2_Atomic_CREATE_Booking_Complete')]",
				"[concat(variables('factoryId'), '/dataflows/VFD_DFL_Mida2_Atomic_APPEND_Booking_Complete')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Mida_Temp_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Mida2_Atomic_INSERT_Booking_Summary')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "pipeline atomica per inserimento di una prenotazione nel file summary - riceve solo i 9 campi summary",
				"activities": [
					{
						"name": "Check Summary File Exists",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Summary_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "@pipeline().parameters.targetFolderPath",
									"fileName": "@pipeline().parameters.targetFileName"
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "If File Exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check Summary File Exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('Check Summary File Exists').output.exists",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Create New Summary File",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "VFD_DFL_Mida2_Atomic_CREATE_Booking_Summary",
											"type": "DataFlowReference",
											"parameters": {
												"row_id": {
													"value": "@concat('''', pipeline().parameters.row_id, '''')",
													"type": "Expression"
												},
												"reservation_code": {
													"value": "@concat('''', pipeline().parameters.reservation_code, '''')",
													"type": "Expression"
												},
												"priceList": {
													"value": "@concat('''', pipeline().parameters.priceList, '''')",
													"type": "Expression"
												},
												"channel_label": {
													"value": "@concat('''', pipeline().parameters.channel_label, '''')",
													"type": "Expression"
												},
												"pax_quantity": {
													"value": "@pipeline().parameters.pax_quantity",
													"type": "Expression"
												},
												"insertTimestamp": {
													"value": "@concat('''', pipeline().parameters.insertTimestamp, '''')",
													"type": "Expression"
												},
												"updateTimestamp": {
													"value": "@concat('''', pipeline().parameters.updateTimestamp, '''')",
													"type": "Expression"
												},
												"reservation_amount": {
													"value": "@pipeline().parameters.reservation_amount",
													"type": "Expression"
												},
												"visitDate": {
													"value": "@concat('''', pipeline().parameters.visitDate, '''')",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"DummySource": {},
												"SinkSummary": {
													"folderPath": "@pipeline().parameters.targetFolderPath",
													"fileName": "@pipeline().parameters.targetFileName"
												}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Append To Existing File",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "VFD_DFL_Mida2_Atomic_APPEND_Booking_Summary",
											"type": "DataFlowReference",
											"parameters": {
												"row_id": {
													"value": "@concat('''', pipeline().parameters.row_id, '''')",
													"type": "Expression"
												},
												"reservation_code": {
													"value": "@concat('''', pipeline().parameters.reservation_code, '''')",
													"type": "Expression"
												},
												"priceList": {
													"value": "@concat('''', pipeline().parameters.priceList, '''')",
													"type": "Expression"
												},
												"channel_label": {
													"value": "@concat('''', pipeline().parameters.channel_label, '''')",
													"type": "Expression"
												},
												"pax_quantity": {
													"value": "@pipeline().parameters.pax_quantity",
													"type": "Expression"
												},
												"insertTimestamp": {
													"value": "@concat('''', pipeline().parameters.insertTimestamp, '''')",
													"type": "Expression"
												},
												"updateTimestamp": {
													"value": "@concat('''', pipeline().parameters.updateTimestamp, '''')",
													"type": "Expression"
												},
												"reservation_amount": {
													"value": "@pipeline().parameters.reservation_amount",
													"type": "Expression"
												},
												"visitDate": {
													"value": "@concat('''', pipeline().parameters.visitDate, '''')",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"DummySource": {},
												"SourceExistingContent": {
													"folderPath": "@pipeline().parameters.targetFolderPath",
													"fileName": "@pipeline().parameters.targetFileName"
												},
												"SinkTemp": {
													"folderPath": "@pipeline().parameters.tempFolderPath",
													"fileName": "@pipeline().parameters.tempFileName"
												}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								},
								{
									"name": "Copy Temp To Final",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Append To Existing File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": false,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "ParquetReadSettings"
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": "@pipeline().parameters.tempFolderPath",
												"fileName": "@pipeline().parameters.tempFileName"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "VFD_DS_Curated_Mida_Bookings_Summary_Parquet",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": "@pipeline().parameters.targetFolderPath",
												"fileName": "@pipeline().parameters.targetFileName"
											}
										}
									]
								},
								{
									"name": "Delete Temp File",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Copy Temp To Final",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": "@pipeline().parameters.tempFolderPath",
												"fileName": "@pipeline().parameters.tempFileName"
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": false,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"row_id": {
						"type": "string"
					},
					"reservation_code": {
						"type": "string"
					},
					"priceList": {
						"type": "string"
					},
					"channel_label": {
						"type": "string"
					},
					"pax_quantity": {
						"type": "int"
					},
					"insertTimestamp": {
						"type": "string"
					},
					"updateTimestamp": {
						"type": "string"
					},
					"reservation_amount": {
						"type": "float"
					},
					"visitDate": {
						"type": "string"
					},
					"targetFolderPath": {
						"type": "string"
					},
					"targetFileName": {
						"type": "string"
					},
					"tempFolderPath": {
						"type": "string"
					},
					"tempFileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"annotations": [
					"pipeline atomica per inserimento prenotazioni summary",
					"Riceve solo i 9 campi del summary",
					"Sintassi corretta uniforme per CREATE e APPEND"
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Mida_Bookings_Summary_Parquet')]",
				"[concat(variables('factoryId'), '/dataflows/VFD_DFL_Mida2_Atomic_CREATE_Booking_Summary')]",
				"[concat(variables('factoryId'), '/dataflows/VFD_DFL_Mida2_Atomic_APPEND_Booking_Summary')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Mida_Temp_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Mida2_Atomic_LOOKUP_Historical')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline atomica per cercare record nel file historical usando row_id",
				"activities": [
					{
						"name": "Lookup Historical Record",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_Mida2_Atomic_LOOKUP_Historical",
								"type": "DataFlowReference",
								"parameters": {
									"row_id": {
										"value": "@concat('''', pipeline().parameters.row_id, '''')",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SourceHistorical": {
										"folderPath": "@pipeline().parameters.sourceFolderPath",
										"fileName": "@pipeline().parameters.sourceFileName"
									},
									"SinkTemp": {
										"folderPath": "@pipeline().parameters.outputFolderPath",
										"fileName": "@pipeline().parameters.outputFileName"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Check If Record Found",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Lookup Historical Record",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "@pipeline().parameters.outputFolderPath",
									"fileName": "@pipeline().parameters.outputFileName"
								}
							},
							"fieldList": [
								"exists",
								"size"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Set Output Variable",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Check If Record Found",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "recordFound",
							"value": {
								"value": "@if(greater(activity('Check If Record Found').output.size, 0), true, false)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"row_id": {
						"type": "string"
					},
					"sourceFolderPath": {
						"type": "string"
					},
					"sourceFileName": {
						"type": "string"
					},
					"outputFolderPath": {
						"type": "string"
					},
					"outputFileName": {
						"type": "string"
					}
				},
				"variables": {
					"recordFound": {
						"type": "Boolean",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"annotations": [
					"Pipeline per lookup in historical",
					"Cerca record per row_id e salva risultato in file temp",
					"Sintassi corretta per parametri dataflow"
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/VFD_DFL_Mida2_Atomic_LOOKUP_Historical')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Mida_Temp_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Mida2_Atomic_LOOKUP_Summary')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline atomica per cercare record nel file summary usando row_id",
				"activities": [
					{
						"name": "Lookup Summary Record",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_Mida2_Atomic_LOOKUP_Summary",
								"type": "DataFlowReference",
								"parameters": {
									"row_id": {
										"value": "@concat('''', pipeline().parameters.row_id, '''')",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SourceSummaryFile": {
										"folderPath": "@pipeline().parameters.sourceFolderPath",
										"fileName": "@pipeline().parameters.sourceFileName"
									},
									"SinkTemp": {
										"folderPath": "@pipeline().parameters.outputFolderPath",
										"fileName": "@pipeline().parameters.outputFileName"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Check If Record Found",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Lookup Summary Record",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "@pipeline().parameters.outputFolderPath",
									"fileName": "@pipeline().parameters.outputFileName"
								}
							},
							"fieldList": [
								"exists",
								"size"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Set Output Variable",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Check If Record Found",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "recordFound",
							"value": {
								"value": "@if(greater(activity('Check If Record Found').output.size, 0), true, false)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Record Found Copy Fields",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set Output Variable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('recordFound')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Set Summary Fields",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "summaryFields",
										"value": {
											"value": "@concat('Record found for row_id: ', pipeline().parameters.row_id)",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"row_id": {
						"type": "string"
					},
					"sourceFolderPath": {
						"type": "string"
					},
					"sourceFileName": {
						"type": "string"
					},
					"outputFolderPath": {
						"type": "string"
					},
					"outputFileName": {
						"type": "string"
					}
				},
				"variables": {
					"recordFound": {
						"type": "Boolean",
						"defaultValue": false
					},
					"summaryFields": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"annotations": [
					"Pipeline per lookup in summary",
					"Cerca record per row_id nei file summary",
					"Sintassi corretta per parametri dataflow"
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/VFD_DFL_Mida2_Atomic_LOOKUP_Summary')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Mida_Temp_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Mida2_Atomic_UPDATE_Booking_Complete')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline atomica per aggiornamento di una prenotazione nel file completo - riceve tutti i campi come parametri",
				"activities": [
					{
						"name": "Update Existing Record",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_Mida2_Atomic_UPDATE_Booking_Complete",
								"type": "DataFlowReference",
								"parameters": {
									"guid_pk": {
										"value": "@concat('''', pipeline().parameters.guid_pk, '''')",
										"type": "Expression"
									},
									"reservation_progressiveCode": {
										"value": "@concat('''', pipeline().parameters.reservation_progressiveCode, '''')",
										"type": "Expression"
									},
									"reservation_code": {
										"value": "@concat('''', pipeline().parameters.reservation_code, '''')",
										"type": "Expression"
									},
									"reservation_status": {
										"value": "pipeline().parameters.reservation_status",
										"type": "Expression"
									},
									"invoiceRequired": {
										"value": "@concat('''', pipeline().parameters.invoiceRequired, '''')",
										"type": "Expression"
									},
									"customer": {
										"value": "pipeline().parameters.customer",
										"type": "Expression"
									},
									"visitDate": {
										"value": "@concat('''', pipeline().parameters.visitDate, '''')",
										"type": "Expression"
									},
									"reservationPayment_guid": {
										"value": "@concat('''', pipeline().parameters.reservationPayment_guid, '''')",
										"type": "Expression"
									},
									"parentPayment_guid": {
										"value": "@concat('''', pipeline().parameters.parentPayment_guid, '''')",
										"type": "Expression"
									},
									"sliced": {
										"value": "@concat('''', pipeline().parameters.sliced, '''')",
										"type": "Expression"
									},
									"reservation_guid": {
										"value": "@concat('''', pipeline().parameters.reservation_guid, '''')",
										"type": "Expression"
									},
									"group_guid": {
										"value": "@concat('''', pipeline().parameters.group_guid, '''')",
										"type": "Expression"
									},
									"group_label": {
										"value": "@concat('''', pipeline().parameters.group_label, '''')",
										"type": "Expression"
									},
									"group_email": {
										"value": "@concat('''', pipeline().parameters.group_email, '''')",
										"type": "Expression"
									},
									"paymentCode": {
										"value": "@concat('''', pipeline().parameters.paymentCode, '''')",
										"type": "Expression"
									},
									"paymentCondition": {
										"value": "pipeline().parameters.paymentCondition",
										"type": "Expression"
									},
									"reservation_amount": {
										"value": "pipeline().parameters.reservation_amount",
										"type": "Expression"
									},
									"reservation_amountTax": {
										"value": "pipeline().parameters.reservation_amountTax",
										"type": "Expression"
									},
									"status": {
										"value": "pipeline().parameters.status",
										"type": "Expression"
									},
									"status_text": {
										"value": "@concat('''', pipeline().parameters.status_text, '''')",
										"type": "Expression"
									},
									"stamp": {
										"value": "@concat('''', pipeline().parameters.stamp, '''')",
										"type": "Expression"
									},
									"notes": {
										"value": "@concat('''', pipeline().parameters.notes, '''')",
										"type": "Expression"
									},
									"transactionType": {
										"value": "@concat('''', pipeline().parameters.transactionType, '''')",
										"type": "Expression"
									},
									"transactionType_text": {
										"value": "@concat('''', pipeline().parameters.transactionType_text, '''')",
										"type": "Expression"
									},
									"paymentLimitDate": {
										"value": "@concat('''', pipeline().parameters.paymentLimitDate, '''')",
										"type": "Expression"
									},
									"paymentDate": {
										"value": "@concat('''', pipeline().parameters.paymentDate, '''')",
										"type": "Expression"
									},
									"refund": {
										"value": "@concat('''', pipeline().parameters.refund, '''')",
										"type": "Expression"
									},
									"refunded": {
										"value": "@concat('''', pipeline().parameters.refunded, '''')",
										"type": "Expression"
									},
									"convention_label": {
										"value": "@concat('''', pipeline().parameters.convention_label, '''')",
										"type": "Expression"
									},
									"receiptCode": {
										"value": "@concat('''', pipeline().parameters.receiptCode, '''')",
										"type": "Expression"
									},
									"insertTimestamp": {
										"value": "@concat('''', pipeline().parameters.insertTimestamp, '''')",
										"type": "Expression"
									},
									"updateTimestamp": {
										"value": "@concat('''', pipeline().parameters.updateTimestamp, '''')",
										"type": "Expression"
									},
									"owner": {
										"value": "@concat('''', pipeline().parameters.owner, '''')",
										"type": "Expression"
									},
									"owner_text": {
										"value": "@concat('''', pipeline().parameters.owner_text, '''')",
										"type": "Expression"
									},
									"sessionId": {
										"value": "@concat('''', pipeline().parameters.sessionId, '''')",
										"type": "Expression"
									},
									"terminal_label": {
										"value": "@concat('''', pipeline().parameters.terminal_label, '''')",
										"type": "Expression"
									},
									"terminalGroup_label": {
										"value": "@concat('''', pipeline().parameters.terminalGroup_label, '''')",
										"type": "Expression"
									},
									"gateway_guid": {
										"value": "@concat('''', pipeline().parameters.gateway_guid, '''')",
										"type": "Expression"
									},
									"gateway_label": {
										"value": "@concat('''', pipeline().parameters.gateway_label, '''')",
										"type": "Expression"
									},
									"transactionID": {
										"value": "@concat('''', pipeline().parameters.transactionID, '''')",
										"type": "Expression"
									},
									"bankAccount_guid": {
										"value": "@concat('''', pipeline().parameters.bankAccount_guid, '''')",
										"type": "Expression"
									},
									"bankAccount_label": {
										"value": "@concat('''', pipeline().parameters.bankAccount_label, '''')",
										"type": "Expression"
									},
									"channel_guid": {
										"value": "@concat('''', pipeline().parameters.channel_guid, '''')",
										"type": "Expression"
									},
									"channel_label": {
										"value": "@concat('''', pipeline().parameters.channel_label, '''')",
										"type": "Expression"
									},
									"channelType": {
										"value": "@concat('''', pipeline().parameters.channelType, '''')",
										"type": "Expression"
									},
									"detail_guid": {
										"value": "@concat('''', pipeline().parameters.detail_guid, '''')",
										"type": "Expression"
									},
									"extra_guid": {
										"value": "@concat('''', pipeline().parameters.extra_guid, '''')",
										"type": "Expression"
									},
									"priceList": {
										"value": "@concat('''', pipeline().parameters.priceList, '''')",
										"type": "Expression"
									},
									"event": {
										"value": "@concat('''', pipeline().parameters.event, '''')",
										"type": "Expression"
									},
									"detailType": {
										"value": "@concat('''', pipeline().parameters.detailType, '''')",
										"type": "Expression"
									},
									"detail_text": {
										"value": "@concat('''', pipeline().parameters.detail_text, '''')",
										"type": "Expression"
									},
									"detail_label": {
										"value": "@concat('''', pipeline().parameters.detail_label, '''')",
										"type": "Expression"
									},
									"detail_count": {
										"value": "pipeline().parameters.detail_count",
										"type": "Expression"
									},
									"paymentDetail_guid": {
										"value": "@concat('''', pipeline().parameters.paymentDetail_guid, '''')",
										"type": "Expression"
									},
									"detail_payingPartecipants": {
										"value": "pipeline().parameters.detail_payingPartecipants",
										"type": "Expression"
									},
									"detail_quantity": {
										"value": "pipeline().parameters.detail_quantity",
										"type": "Expression"
									},
									"tickets_quantity": {
										"value": "pipeline().parameters.tickets_quantity",
										"type": "Expression"
									},
									"pax_quantity": {
										"value": "pipeline().parameters.pax_quantity",
										"type": "Expression"
									},
									"costCenter_guid": {
										"value": "@concat('''', pipeline().parameters.costCenter_guid, '''')",
										"type": "Expression"
									},
									"costCenter_label": {
										"value": "@concat('''', pipeline().parameters.costCenter_label, '''')",
										"type": "Expression"
									},
									"object_receipt": {
										"value": "pipeline().parameters.object_receipt",
										"type": "Expression"
									},
									"object_taxCode": {
										"value": "@concat('''', pipeline().parameters.object_taxCode, '''')",
										"type": "Expression"
									},
									"object_taxNotes": {
										"value": "@concat('''', pipeline().parameters.object_taxNotes, '''')",
										"type": "Expression"
									},
									"object_amount": {
										"value": "pipeline().parameters.object_amount",
										"type": "Expression"
									},
									"object_taxPercentage": {
										"value": "pipeline().parameters.object_taxPercentage",
										"type": "Expression"
									},
									"amount": {
										"value": "pipeline().parameters.amount",
										"type": "Expression"
									},
									"amountNet": {
										"value": "pipeline().parameters.amountNet",
										"type": "Expression"
									},
									"amountPresale": {
										"value": "pipeline().parameters.amountPresale",
										"type": "Expression"
									},
									"amountSold": {
										"value": "pipeline().parameters.amountSold",
										"type": "Expression"
									},
									"amountPayed": {
										"value": "pipeline().parameters.amountPayed",
										"type": "Expression"
									},
									"amountPending": {
										"value": "pipeline().parameters.amountPending",
										"type": "Expression"
									},
									"amountCanceled": {
										"value": "pipeline().parameters.amountCanceled",
										"type": "Expression"
									},
									"externalId": {
										"value": "@concat('''', pipeline().parameters.externalId, '''')",
										"type": "Expression"
									},
									"amountRefunded": {
										"value": "pipeline().parameters.amountRefunded",
										"type": "Expression"
									},
									"invoiceSummary": {
										"value": "@concat('''', pipeline().parameters.invoiceSummary, '''')",
										"type": "Expression"
									},
									"eventCalendar_guid": {
										"value": "@concat('''', pipeline().parameters.eventCalendar_guid, '''')",
										"type": "Expression"
									},
									"passDetail_guid": {
										"value": "@concat('''', pipeline().parameters.passDetail_guid, '''')",
										"type": "Expression"
									},
									"paymentCostCenter_guid": {
										"value": "@concat('''', pipeline().parameters.paymentCostCenter_guid, '''')",
										"type": "Expression"
									},
									"organization_guid": {
										"value": "@concat('''', pipeline().parameters.organization_guid, '''')",
										"type": "Expression"
									},
									"venue_guid": {
										"value": "@concat('''', pipeline().parameters.venue_guid, '''')",
										"type": "Expression"
									},
									"olapUpdateTimestamp": {
										"value": "@concat('''', pipeline().parameters.olapUpdateTimestamp, '''')",
										"type": "Expression"
									},
									"row_id": {
										"value": "@concat('''', pipeline().parameters.row_id, '''')",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"DummySource": {},
									"SourceExistingContent": {
										"folderPath": "@pipeline().parameters.targetFolderPath",
										"fileName": "@pipeline().parameters.targetFileName"
									},
									"SinkTemp": {
										"folderPath": "@pipeline().parameters.tempFolderPath",
										"fileName": "temp_update_complete.parquet"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Copy Temp To Final",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Update Existing Record",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "@pipeline().parameters.tempFolderPath",
									"fileName": "temp_update_complete.parquet"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Complete_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "@pipeline().parameters.targetFolderPath",
									"fileName": "@pipeline().parameters.targetFileName"
								}
							}
						]
					},
					{
						"name": "Delete Temp File",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy Temp To Final",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "@pipeline().parameters.tempFolderPath",
									"fileName": "temp_update_complete.parquet"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": false,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"guid_pk": {
						"type": "string"
					},
					"reservation_progressiveCode": {
						"type": "string"
					},
					"reservation_code": {
						"type": "string"
					},
					"reservation_status": {
						"type": "int"
					},
					"invoiceRequired": {
						"type": "string"
					},
					"customer": {
						"type": "float"
					},
					"visitDate": {
						"type": "string"
					},
					"reservationPayment_guid": {
						"type": "string"
					},
					"parentPayment_guid": {
						"type": "string"
					},
					"sliced": {
						"type": "string"
					},
					"reservation_guid": {
						"type": "string"
					},
					"group_guid": {
						"type": "string"
					},
					"group_label": {
						"type": "string"
					},
					"group_email": {
						"type": "string"
					},
					"paymentCode": {
						"type": "string"
					},
					"paymentCondition": {
						"type": "float"
					},
					"reservation_amount": {
						"type": "float"
					},
					"reservation_amountTax": {
						"type": "float"
					},
					"status": {
						"type": "int"
					},
					"status_text": {
						"type": "string"
					},
					"stamp": {
						"type": "string"
					},
					"notes": {
						"type": "string"
					},
					"transactionType": {
						"type": "string"
					},
					"transactionType_text": {
						"type": "string"
					},
					"paymentLimitDate": {
						"type": "string"
					},
					"paymentDate": {
						"type": "string"
					},
					"refund": {
						"type": "string"
					},
					"refunded": {
						"type": "string"
					},
					"convention_label": {
						"type": "string"
					},
					"receiptCode": {
						"type": "string"
					},
					"insertTimestamp": {
						"type": "string"
					},
					"updateTimestamp": {
						"type": "string"
					},
					"owner": {
						"type": "string"
					},
					"owner_text": {
						"type": "string"
					},
					"sessionId": {
						"type": "string"
					},
					"terminal_label": {
						"type": "string"
					},
					"terminalGroup_label": {
						"type": "string"
					},
					"gateway_guid": {
						"type": "string"
					},
					"gateway_label": {
						"type": "string"
					},
					"transactionID": {
						"type": "string"
					},
					"bankAccount_guid": {
						"type": "string"
					},
					"bankAccount_label": {
						"type": "string"
					},
					"channel_guid": {
						"type": "string"
					},
					"channel_label": {
						"type": "string"
					},
					"channelType": {
						"type": "string"
					},
					"detail_guid": {
						"type": "string"
					},
					"extra_guid": {
						"type": "string"
					},
					"priceList": {
						"type": "string"
					},
					"event": {
						"type": "string"
					},
					"detailType": {
						"type": "string"
					},
					"detail_text": {
						"type": "string"
					},
					"detail_label": {
						"type": "string"
					},
					"detail_count": {
						"type": "int"
					},
					"paymentDetail_guid": {
						"type": "string"
					},
					"detail_payingPartecipants": {
						"type": "int"
					},
					"detail_quantity": {
						"type": "int"
					},
					"tickets_quantity": {
						"type": "int"
					},
					"pax_quantity": {
						"type": "int"
					},
					"costCenter_guid": {
						"type": "string"
					},
					"costCenter_label": {
						"type": "string"
					},
					"object_receipt": {
						"type": "int"
					},
					"object_taxCode": {
						"type": "string"
					},
					"object_taxNotes": {
						"type": "string"
					},
					"object_amount": {
						"type": "float"
					},
					"object_taxPercentage": {
						"type": "float"
					},
					"amount": {
						"type": "float"
					},
					"amountNet": {
						"type": "float"
					},
					"amountPresale": {
						"type": "float"
					},
					"amountSold": {
						"type": "float"
					},
					"amountPayed": {
						"type": "float"
					},
					"amountPending": {
						"type": "float"
					},
					"amountCanceled": {
						"type": "float"
					},
					"externalId": {
						"type": "string"
					},
					"amountRefunded": {
						"type": "float"
					},
					"invoiceSummary": {
						"type": "string"
					},
					"eventCalendar_guid": {
						"type": "string"
					},
					"passDetail_guid": {
						"type": "string"
					},
					"paymentCostCenter_guid": {
						"type": "string"
					},
					"organization_guid": {
						"type": "string"
					},
					"venue_guid": {
						"type": "string"
					},
					"olapUpdateTimestamp": {
						"type": "string"
					},
					"row_id": {
						"type": "string"
					},
					"targetFolderPath": {
						"type": "string"
					},
					"targetFileName": {
						"type": "string"
					},
					"tempFolderPath": {
						"type": "string"
					},
					"tempFileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"annotations": [
					"Pipeline atomica per aggiornamento prenotazioni complete",
					"Riceve tutti gli 82 campi come parametri",
					"Usa UPDATE DataFlow per sostituire il record esistente"
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/VFD_DFL_Mida2_Atomic_UPDATE_Booking_Complete')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Mida_Temp_Parquet')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Mida_Bookings_Complete_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Mida2_Atomic_UPDATE_Booking_Summary')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline atomica per aggiornamento di una prenotazione nel file summary",
				"activities": [
					{
						"name": "Update Summary Record",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_Mida2_Atomic_UPDATE_Booking_Summary",
								"type": "DataFlowReference",
								"parameters": {
									"row_id": {
										"value": "@concat('''', pipeline().parameters.row_id, '''')",
										"type": "Expression"
									},
									"reservation_code": {
										"value": "@concat('''', pipeline().parameters.reservation_code, '''')",
										"type": "Expression"
									},
									"priceList": {
										"value": "@concat('''', pipeline().parameters.priceList, '''')",
										"type": "Expression"
									},
									"channel_label": {
										"value": "@concat('''', pipeline().parameters.channel_label, '''')",
										"type": "Expression"
									},
									"pax_quantity": {
										"value": "pipeline().parameters.pax_quantity",
										"type": "Expression"
									},
									"insertTimestamp": {
										"value": "@concat('''', pipeline().parameters.insertTimestamp, '''')",
										"type": "Expression"
									},
									"updateTimestamp": {
										"value": "@concat('''', pipeline().parameters.updateTimestamp, '''')",
										"type": "Expression"
									},
									"reservation_amount": {
										"value": "pipeline().parameters.reservation_amount",
										"type": "Expression"
									},
									"visitDate": {
										"value": "@concat('''', pipeline().parameters.visitDate, '''')",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"DummySource": {},
									"SourceExistingContent": {
										"folderPath": "@pipeline().parameters.targetFolderPath",
										"fileName": "@pipeline().parameters.targetFileName"
									},
									"SinkTemp": {
										"folderPath": "@pipeline().parameters.tempFolderPath",
										"fileName": "temp_update_summary.parquet"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Copy Temp To Final",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Update Summary Record",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "@pipeline().parameters.tempFolderPath",
									"fileName": "temp_update_summary.parquet"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Summary_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "@pipeline().parameters.targetFolderPath",
									"fileName": "@pipeline().parameters.targetFileName"
								}
							}
						]
					},
					{
						"name": "Delete Temp File",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy Temp To Final",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "@pipeline().parameters.tempFolderPath",
									"fileName": "temp_update_summary.parquet"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": false,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"row_id": {
						"type": "string"
					},
					"reservation_code": {
						"type": "string"
					},
					"priceList": {
						"type": "string"
					},
					"channel_label": {
						"type": "string"
					},
					"pax_quantity": {
						"type": "int"
					},
					"insertTimestamp": {
						"type": "string"
					},
					"updateTimestamp": {
						"type": "string"
					},
					"reservation_amount": {
						"type": "float"
					},
					"visitDate": {
						"type": "string"
					},
					"targetFolderPath": {
						"type": "string"
					},
					"targetFileName": {
						"type": "string"
					},
					"tempFolderPath": {
						"type": "string"
					},
					"tempFileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"annotations": [
					"Pipeline atomica per aggiornamento prenotazioni summary",
					"Sintassi corretta per tutti i parametri dataflow"
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/VFD_DFL_Mida2_Atomic_UPDATE_Booking_Summary')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Mida_Temp_Parquet')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Mida_Bookings_Summary_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Mida2_Test_All_Atomic_Operations')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline di test completa per tutte le operazioni atomiche MIDA2 con dati reali",
				"activities": [
					{
						"name": "FASE_1_SETUP",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "VFD_PL_Mida2_Test_Setup",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "FASE_2_INSERT_RECORD_1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "FASE_1_SETUP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "VFD_PL_Mida2_Atomic_INSERT_Booking_Complete",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"guid_pk": "369f7c03-3ea7-4fa8-a4c5-0000d58323cb",
								"reservation_progressiveCode": "",
								"reservation_code": "RVFDKJQ5633NJZNX",
								"reservation_status": 50,
								"invoiceRequired": "false",
								"customer": 0,
								"visitDate": "2025-07-25",
								"reservationPayment_guid": "2e3cf753-0637-4657-b538-fb97bb87f6a3",
								"parentPayment_guid": "0ebfa3f5-e6b4-4024-84a9-c1ac81fa9fef",
								"sliced": "false",
								"reservation_guid": "aa32bdbe-bac5-4de7-9030-9ecbc7c0c964",
								"group_guid": "019ba95e-b0d3-47be-83fa-3c46f491b04b",
								"group_label": "",
								"group_email": "",
								"paymentCode": "MVFD2XB4YZZ8XQWZ",
								"paymentCondition": 0,
								"reservation_amount": 10,
								"reservation_amountTax": 0,
								"status": 1,
								"status_text": "Confermato",
								"stamp": "false",
								"notes": "",
								"transactionType": "CA",
								"transactionType_text": "Contanti",
								"paymentLimitDate": "2025-07-25T10:18:56.146Z",
								"paymentDate": "2025-07-25T10:18:56.146Z",
								"refund": "false",
								"refunded": "false",
								"convention_label": "",
								"receiptCode": "",
								"insertTimestamp": "2025-07-25T10:18:55.740Z",
								"updateTimestamp": "2025-07-25T10:18:56.163Z",
								"owner": "MTK/duomomilano.cassiere023",
								"owner_text": "23 Cassiere",
								"sessionId": "b9ff1305-84b2-4d3b-afe2-f66fd5e9982e",
								"terminal_label": "WIN-1308-VFD",
								"terminalGroup_label": "SDC",
								"gateway_guid": "",
								"gateway_label": "",
								"transactionID": "",
								"bankAccount_guid": "0",
								"bankAccount_label": "0",
								"channel_guid": "2abad1e7-da98-4603-986c-5f2bce837e18",
								"channel_label": "Cassa",
								"channelType": "CP",
								"detail_guid": "98bb9375-aeac-444b-8bad-d81bc4fa1e42",
								"extra_guid": "0",
								"priceList": "duomo_museo",
								"event": "DUOMO+MUSEO",
								"detailType": "PK",
								"detail_text": "Pacchetto",
								"detail_label": "Intero_DuomoMuseo_L2504",
								"detail_count": 1,
								"paymentDetail_guid": "9aec2978-8b88-403d-822a-5328d5e54d1a",
								"detail_payingPartecipants": 1,
								"detail_quantity": 1,
								"tickets_quantity": 1,
								"pax_quantity": 1,
								"costCenter_guid": "1ae0783c-78f6-4f91-b8b1-0a40c74b06d3",
								"costCenter_label": "VFD",
								"object_receipt": 0,
								"object_taxCode": "N4  ",
								"object_taxNotes": "IVA esente art.10 c.1 n.22 DPR633/79",
								"object_amount": 10,
								"object_taxPercentage": 0,
								"amount": 10,
								"amountNet": 10,
								"amountPresale": 0,
								"amountSold": 10,
								"amountPayed": 10,
								"amountPending": 0,
								"amountCanceled": 0,
								"externalId": "DUOMUS_INT_L2504",
								"amountRefunded": 0,
								"invoiceSummary": "",
								"eventCalendar_guid": "f4f4c301-510e-4818-afea-4ba4799f501a",
								"passDetail_guid": "",
								"paymentCostCenter_guid": "",
								"organization_guid": "0b2a8439-6fd5-4310-847e-fd7c551d0893",
								"venue_guid": "bb2426b0-816d-496e-a859-06ebf5bfe106",
								"olapUpdateTimestamp": "2025-07-25T23:49:00.179Z",
								"row_id": "840AA72DB857CD070985B141558C63C3DEEE7072AE68584657376E674AE0C8A9",
								"targetFolderPath": "Mida2/Test/Complete/2025/01",
								"targetFileName": "booking_complete.parquet",
								"tempFolderPath": "Mida2/Test/Temp",
								"tempFileName": "temp_complete.parquet"
							}
						}
					},
					{
						"name": "INSERT_Summary_Record_1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "FASE_2_INSERT_RECORD_1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "VFD_PL_Mida2_Atomic_INSERT_Booking_Summary",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"row_id": "840AA72DB857CD070985B141558C63C3DEEE7072AE68584657376E674AE0C8A9",
								"reservation_code": "RVFDKJQ5633NJZNX",
								"priceList": "duomo_museo",
								"channel_label": "Cassa",
								"pax_quantity": 1,
								"insertTimestamp": "2025-07-25T10:18:55.740Z",
								"updateTimestamp": "2025-07-25T10:18:56.163Z",
								"reservation_amount": 10,
								"visitDate": "2025-07-25",
								"targetFolderPath": "Mida2/Test/Summary/2025/01",
								"targetFileName": "bookings_summary.parquet",
								"tempFolderPath": "Mida2/Test/Temp",
								"tempFileName": "temp_append_summary.parquet"
							}
						}
					},
					{
						"name": "APPEND_Historical_INSERT_1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "INSERT_Summary_Record_1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "VFD_PL_Mida2_Atomic_APPEND_Historical",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"guid_pk": "369f7c03-3ea7-4fa8-a4c5-0000d58323cb",
								"reservation_progressiveCode": "",
								"reservation_code": "RVFDKJQ5633NJZNX",
								"reservation_status": 50,
								"invoiceRequired": "false",
								"customer": 0,
								"visitDate": "2025-07-25",
								"reservationPayment_guid": "2e3cf753-0637-4657-b538-fb97bb87f6a3",
								"parentPayment_guid": "0ebfa3f5-e6b4-4024-84a9-c1ac81fa9fef",
								"sliced": "false",
								"reservation_guid": "aa32bdbe-bac5-4de7-9030-9ecbc7c0c964",
								"group_guid": "019ba95e-b0d3-47be-83fa-3c46f491b04b",
								"group_label": "",
								"group_email": "",
								"paymentCode": "MVFD2XB4YZZ8XQWZ",
								"paymentCondition": 0,
								"reservation_amount": 10,
								"reservation_amountTax": 0,
								"status": 1,
								"status_text": "Confermato",
								"stamp": "false",
								"notes": "",
								"transactionType": "CA",
								"transactionType_text": "Contanti",
								"paymentLimitDate": "2025-07-25T10:18:56.146Z",
								"paymentDate": "2025-07-25T10:18:56.146Z",
								"refund": "false",
								"refunded": "false",
								"convention_label": "",
								"receiptCode": "",
								"insertTimestamp": "2025-07-25T10:18:55.740Z",
								"updateTimestamp": "2025-07-25T10:18:56.163Z",
								"owner": "MTK/duomomilano.cassiere023",
								"owner_text": "23 Cassiere",
								"sessionId": "b9ff1305-84b2-4d3b-afe2-f66fd5e9982e",
								"terminal_label": "WIN-1308-VFD",
								"terminalGroup_label": "SDC",
								"gateway_guid": "",
								"gateway_label": "",
								"transactionID": "",
								"bankAccount_guid": "0",
								"bankAccount_label": "0",
								"channel_guid": "2abad1e7-da98-4603-986c-5f2bce837e18",
								"channel_label": "Cassa",
								"channelType": "CP",
								"detail_guid": "98bb9375-aeac-444b-8bad-d81bc4fa1e42",
								"extra_guid": "0",
								"priceList": "duomo_museo",
								"event": "DUOMO+MUSEO",
								"detailType": "PK",
								"detail_text": "Pacchetto",
								"detail_label": "Intero_DuomoMuseo_L2504",
								"detail_count": 1,
								"paymentDetail_guid": "9aec2978-8b88-403d-822a-5328d5e54d1a",
								"detail_payingPartecipants": 1,
								"detail_quantity": 1,
								"tickets_quantity": 1,
								"pax_quantity": 1,
								"costCenter_guid": "1ae0783c-78f6-4f91-b8b1-0a40c74b06d3",
								"costCenter_label": "VFD",
								"object_receipt": 0,
								"object_taxCode": "N4  ",
								"object_taxNotes": "IVA esente art.10 c.1 n.22 DPR633/79",
								"object_amount": 10,
								"object_taxPercentage": 0,
								"amount": 10,
								"amountNet": 10,
								"amountPresale": 0,
								"amountSold": 10,
								"amountPayed": 10,
								"amountPending": 0,
								"amountCanceled": 0,
								"externalId": "DUOMUS_INT_L2504",
								"amountRefunded": 0,
								"invoiceSummary": "",
								"eventCalendar_guid": "f4f4c301-510e-4818-afea-4ba4799f501a",
								"passDetail_guid": "",
								"paymentCostCenter_guid": "",
								"organization_guid": "0b2a8439-6fd5-4310-847e-fd7c551d0893",
								"venue_guid": "bb2426b0-816d-496e-a859-06ebf5bfe106",
								"olapUpdateTimestamp": "2025-07-25T23:49:00.179Z",
								"row_id": "840AA72DB857CD070985B141558C63C3DEEE7072AE68584657376E674AE0C8A9",
								"operationType": "INSERT",
								"targetFolderPath": "Mida2/Test/Historical/2025/01",
								"targetFileName": "booking_historical.parquet",
								"tempFolderPath": "Mida2/Test/Temp",
								"tempFileName": "temp_append_historical.parquet"
							}
						}
					},
					{
						"name": "FASE_3_INSERT_RECORD_2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "APPEND_Historical_INSERT_1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "VFD_PL_Mida2_Atomic_INSERT_Booking_Complete",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"guid_pk": "1ccc6071-f5cb-46aa-9467-000edde646db",
								"reservation_progressiveCode": "PFD2367467",
								"reservation_code": "RVFDLXJKLRGK4K46",
								"reservation_status": 10,
								"invoiceRequired": "false",
								"customer": 0,
								"visitDate": "2025-07-26",
								"reservationPayment_guid": "9790238b-6950-424f-a833-bf4d3b9fc406",
								"parentPayment_guid": "e256989d-d167-4ccf-a547-edf84e33afd4",
								"sliced": "true",
								"reservation_guid": "e6ab6906-ef11-4a0e-ba25-13a953b3934b",
								"group_guid": "d0c0c4c9-43a1-442c-bd70-913b94b41283",
								"group_label": "Giovanna  Marongiu",
								"group_email": "marongiu.giovanna@tiscali.it",
								"paymentCode": "MVFDR3BPGZD2J645",
								"paymentCondition": 0,
								"reservation_amount": 109,
								"reservation_amountTax": 0,
								"status": 1,
								"status_text": "Confermato",
								"stamp": "false",
								"notes": "",
								"transactionType": "GW",
								"transactionType_text": "Gateway",
								"paymentLimitDate": "2025-07-18T12:39:34.999Z",
								"paymentDate": "2025-07-18T12:39:34.999Z",
								"refund": "false",
								"refunded": "false",
								"convention_label": "",
								"receiptCode": "",
								"insertTimestamp": "2025-07-18T12:38:25.819Z",
								"updateTimestamp": "2025-07-18T12:39:50.130Z",
								"owner": "MTK/wp-vfd.application",
								"owner_text": " ",
								"sessionId": "8plo2s7o47e0u8c7lnq3omdcqs",
								"terminal_label": "",
								"terminalGroup_label": "",
								"gateway_guid": "cded4878-fd5e-4cba-8682-7bf519e45fe0",
								"gateway_label": "Nexi",
								"transactionID": "M4PFD2367467cYpCZw",
								"bankAccount_guid": "0",
								"bankAccount_label": "0",
								"channel_guid": "71e6d9a7-0f69-4d00-aacb-e5106680a533",
								"channel_label": "Vendita Online",
								"channelType": "OP",
								"detail_guid": "ae276193-d3bc-4892-a593-e7259e327495",
								"extra_guid": "0",
								"priceList": "duomo_tour_fast_track",
								"event": "VISITE DT Duomo Tour Fast-Track",
								"detailType": "PK",
								"detail_text": "Pacchetto",
								"detail_label": "DT_Anni6-11_L2504",
								"detail_count": 1,
								"paymentDetail_guid": "729bc3b0-0160-41f1-aabe-11d0310b2152",
								"detail_payingPartecipants": 1,
								"detail_quantity": 1,
								"tickets_quantity": 1,
								"pax_quantity": 1,
								"costCenter_guid": "1ae0783c-78f6-4f91-b8b1-0a40c74b06d3",
								"costCenter_label": "VFD",
								"object_receipt": 0,
								"object_taxCode": "N4  ",
								"object_taxNotes": "IVA esente art.10 c.1 n.22 DPR633/79",
								"object_amount": 21,
								"object_taxPercentage": 0,
								"amount": 21,
								"amountNet": 21,
								"amountPresale": 0,
								"amountSold": 21,
								"amountPayed": 21,
								"amountPending": 0,
								"amountCanceled": 0,
								"externalId": "DTFT_6-11_L2504",
								"amountRefunded": 0,
								"invoiceSummary": "",
								"eventCalendar_guid": "65c92c94-c8b5-4450-b06b-d5a7c6b23e42",
								"passDetail_guid": "",
								"paymentCostCenter_guid": "",
								"organization_guid": "0b2a8439-6fd5-4310-847e-fd7c551d0893",
								"venue_guid": "bb2426b0-816d-496e-a859-06ebf5bfe106",
								"olapUpdateTimestamp": "2025-07-18T23:08:18.363Z",
								"row_id": "6FF1B80D5DC8BB34C078330EF568A2A02022A8E9C6428FB46C9E1B9A5E7DE897",
								"targetFolderPath": "Mida2/Test/Complete/2025/01",
								"targetFileName": "booking_complete.parquet",
								"tempFolderPath": "Mida2/Test/Temp",
								"tempFileName": "temp_complete.parquet"
							}
						}
					},
					{
						"name": "Verify_2_Records_In_Complete",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "FASE_3_INSERT_RECORD_2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Complete_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "Mida2/Test/Complete/2025/01",
									"fileName": "booking_complete.parquet"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "FASE_4_UPDATE_RECORD_1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Verify_2_Records_In_Complete",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "VFD_PL_Mida2_Atomic_UPDATE_Booking_Complete",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"guid_pk": "369f7c03-3ea7-4fa8-a4c5-0000d58323cb",
								"reservation_progressiveCode": "",
								"reservation_code": "RVFDKJQ5633NJZNX",
								"reservation_status": 50,
								"invoiceRequired": "false",
								"customer": 0,
								"visitDate": "2025-07-25",
								"reservationPayment_guid": "2e3cf753-0637-4657-b538-fb97bb87f6a3",
								"parentPayment_guid": "0ebfa3f5-e6b4-4024-84a9-c1ac81fa9fef",
								"sliced": "false",
								"reservation_guid": "aa32bdbe-bac5-4de7-9030-9ecbc7c0c964",
								"group_guid": "019ba95e-b0d3-47be-83fa-3c46f491b04b",
								"group_label": "",
								"group_email": "",
								"paymentCode": "MVFD2XB4YZZ8XQWZ",
								"paymentCondition": 0,
								"reservation_amount": 50,
								"reservation_amountTax": 0,
								"status": 2,
								"status_text": "Annullato",
								"stamp": "false",
								"notes": "Record aggiornato durante test",
								"transactionType": "CA",
								"transactionType_text": "Contanti",
								"paymentLimitDate": "2025-07-25T10:18:56.146Z",
								"paymentDate": "2025-07-25T10:18:56.146Z",
								"refund": "false",
								"refunded": "false",
								"convention_label": "",
								"receiptCode": "",
								"insertTimestamp": "2025-07-25T10:18:55.740Z",
								"updateTimestamp": {
									"value": "@utcnow()",
									"type": "Expression"
								},
								"owner": "MTK/duomomilano.cassiere023",
								"owner_text": "23 Cassiere",
								"sessionId": "b9ff1305-84b2-4d3b-afe2-f66fd5e9982e",
								"terminal_label": "WIN-1308-VFD",
								"terminalGroup_label": "SDC",
								"gateway_guid": "",
								"gateway_label": "",
								"transactionID": "",
								"bankAccount_guid": "0",
								"bankAccount_label": "0",
								"channel_guid": "2abad1e7-da98-4603-986c-5f2bce837e18",
								"channel_label": "Cassa",
								"channelType": "CP",
								"detail_guid": "98bb9375-aeac-444b-8bad-d81bc4fa1e42",
								"extra_guid": "0",
								"priceList": "duomo_museo",
								"event": "DUOMO+MUSEO",
								"detailType": "PK",
								"detail_text": "Pacchetto",
								"detail_label": "Intero_DuomoMuseo_L2504",
								"detail_count": 1,
								"paymentDetail_guid": "9aec2978-8b88-403d-822a-5328d5e54d1a",
								"detail_payingPartecipants": 1,
								"detail_quantity": 1,
								"tickets_quantity": 1,
								"pax_quantity": 5,
								"costCenter_guid": "1ae0783c-78f6-4f91-b8b1-0a40c74b06d3",
								"costCenter_label": "VFD",
								"object_receipt": 0,
								"object_taxCode": "N4  ",
								"object_taxNotes": "IVA esente art.10 c.1 n.22 DPR633/79",
								"object_amount": 10,
								"object_taxPercentage": 0,
								"amount": 10,
								"amountNet": 10,
								"amountPresale": 0,
								"amountSold": 10,
								"amountPayed": 10,
								"amountPending": 0,
								"amountCanceled": 0,
								"externalId": "DUOMUS_INT_L2504",
								"amountRefunded": 0,
								"invoiceSummary": "",
								"eventCalendar_guid": "f4f4c301-510e-4818-afea-4ba4799f501a",
								"passDetail_guid": "",
								"paymentCostCenter_guid": "",
								"organization_guid": "0b2a8439-6fd5-4310-847e-fd7c551d0893",
								"venue_guid": "bb2426b0-816d-496e-a859-06ebf5bfe106",
								"olapUpdateTimestamp": {
									"value": "@utcnow()",
									"type": "Expression"
								},
								"row_id": "840AA72DB857CD070985B141558C63C3DEEE7072AE68584657376E674AE0C8A9",
								"targetFolderPath": "Mida2/Test/Complete/2025/01",
								"targetFileName": "booking_complete.parquet",
								"tempFolderPath": "Mida2/Test/Temp",
								"tempFileName": "temp_update_complete.parquet"
							}
						}
					},
					{
						"name": "APPEND_Historical_UPDATE",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "FASE_4_UPDATE_RECORD_1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "VFD_PL_Mida2_Atomic_APPEND_Historical",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"guid_pk": "369f7c03-3ea7-4fa8-a4c5-0000d58323cb",
								"reservation_progressiveCode": "",
								"reservation_code": "RVFDKJQ5633NJZNX",
								"reservation_status": 50,
								"invoiceRequired": "false",
								"customer": 0,
								"visitDate": "2025-07-25",
								"reservationPayment_guid": "2e3cf753-0637-4657-b538-fb97bb87f6a3",
								"parentPayment_guid": "0ebfa3f5-e6b4-4024-84a9-c1ac81fa9fef",
								"sliced": "false",
								"reservation_guid": "aa32bdbe-bac5-4de7-9030-9ecbc7c0c964",
								"group_guid": "019ba95e-b0d3-47be-83fa-3c46f491b04b",
								"group_label": "",
								"group_email": "",
								"paymentCode": "MVFD2XB4YZZ8XQWZ",
								"paymentCondition": 0,
								"reservation_amount": 50,
								"reservation_amountTax": 0,
								"status": 2,
								"status_text": "Annullato",
								"stamp": "false",
								"notes": "Record aggiornato durante test",
								"transactionType": "CA",
								"transactionType_text": "Contanti",
								"paymentLimitDate": "2025-07-25T10:18:56.146Z",
								"paymentDate": "2025-07-25T10:18:56.146Z",
								"refund": "false",
								"refunded": "false",
								"convention_label": "",
								"receiptCode": "",
								"insertTimestamp": "2025-07-25T10:18:55.740Z",
								"updateTimestamp": {
									"value": "@utcnow()",
									"type": "Expression"
								},
								"owner": "MTK/duomomilano.cassiere023",
								"owner_text": "23 Cassiere",
								"sessionId": "b9ff1305-84b2-4d3b-afe2-f66fd5e9982e",
								"terminal_label": "WIN-1308-VFD",
								"terminalGroup_label": "SDC",
								"gateway_guid": "",
								"gateway_label": "",
								"transactionID": "",
								"bankAccount_guid": "0",
								"bankAccount_label": "0",
								"channel_guid": "2abad1e7-da98-4603-986c-5f2bce837e18",
								"channel_label": "Cassa",
								"channelType": "CP",
								"detail_guid": "98bb9375-aeac-444b-8bad-d81bc4fa1e42",
								"extra_guid": "0",
								"priceList": "duomo_museo",
								"event": "DUOMO+MUSEO",
								"detailType": "PK",
								"detail_text": "Pacchetto",
								"detail_label": "Intero_DuomoMuseo_L2504",
								"detail_count": 1,
								"paymentDetail_guid": "9aec2978-8b88-403d-822a-5328d5e54d1a",
								"detail_payingPartecipants": 1,
								"detail_quantity": 1,
								"tickets_quantity": 1,
								"pax_quantity": 5,
								"costCenter_guid": "1ae0783c-78f6-4f91-b8b1-0a40c74b06d3",
								"costCenter_label": "VFD",
								"object_receipt": 0,
								"object_taxCode": "N4  ",
								"object_taxNotes": "IVA esente art.10 c.1 n.22 DPR633/79",
								"object_amount": 10,
								"object_taxPercentage": 0,
								"amount": 10,
								"amountNet": 10,
								"amountPresale": 0,
								"amountSold": 10,
								"amountPayed": 10,
								"amountPending": 0,
								"amountCanceled": 0,
								"externalId": "DUOMUS_INT_L2504",
								"amountRefunded": 0,
								"invoiceSummary": "",
								"eventCalendar_guid": "f4f4c301-510e-4818-afea-4ba4799f501a",
								"passDetail_guid": "",
								"paymentCostCenter_guid": "",
								"organization_guid": "0b2a8439-6fd5-4310-847e-fd7c551d0893",
								"venue_guid": "bb2426b0-816d-496e-a859-06ebf5bfe106",
								"olapUpdateTimestamp": {
									"value": "@utcnow()",
									"type": "Expression"
								},
								"row_id": "840AA72DB857CD070985B141558C63C3DEEE7072AE68584657376E674AE0C8A9",
								"operationType": "UPDATE",
								"targetFolderPath": "Mida2/Test/Historical/2025/01",
								"targetFileName": "test_historical.parquet",
								"tempFolderPath": "Mida2/Test/Temp",
								"tempFileName": "temp_historical.parquet"
							}
						}
					},
					{
						"name": "FASE_5_LOOKUP_Tests",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "APPEND_Historical_UPDATE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "VFD_PL_Mida2_Atomic_LOOKUP_Historical",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"row_id": "840AA72DB857CD070985B141558C63C3DEEE7072AE68584657376E674AE0C8A9",
								"sourceFolderPath": "Mida2/Test/Historical/2025/01",
								"sourceFileName": "test_historical.parquet",
								"outputFolderPath": "Mida2/Test/Lookup",
								"outputFileName": "lookup_result.parquet"
							}
						}
					},
					{
						"name": "FASE_6_DELETE_RECORD_2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "FASE_5_LOOKUP_Tests",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "VFD_PL_Mida2_Atomic_DELETE_Booking_Complete",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"row_id": "6FF1B80D5DC8BB34C078330EF568A2A02022A8E9C6428FB46C9E1B9A5E7DE897",
								"targetFolderPath": "Mida2/Test/Complete/2025/01",
								"targetFileName": "test_complete.parquet",
								"tempFolderPath": "Mida2/Test/Temp",
								"tempFileName": "temp_delete_complete.parquet"
							}
						}
					},
					{
						"name": "DELETE_Summary_Record_2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "FASE_6_DELETE_RECORD_2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "VFD_PL_Mida2_Atomic_DELETE_Booking_Summary",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"row_id": "6FF1B80D5DC8BB34C078330EF568A2A02022A8E9C6428FB46C9E1B9A5E7DE897",
								"targetFolderPath": "Mida2/Test/Summary/2025/01",
								"targetFileName": "test_summary.parquet",
								"tempFolderPath": "Mida2/Test/Temp",
								"tempFileName": "temp_delete_summary.parquet"
							}
						}
					},
					{
						"name": "APPEND_Historical_DELETE",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DELETE_Summary_Record_2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "VFD_PL_Mida2_Atomic_APPEND_Historical",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"guid_pk": "1ccc6071-f5cb-46aa-9467-000edde646db",
								"reservation_progressiveCode": "PFD2367467",
								"reservation_code": "RVFDLXJKLRGK4K46",
								"reservation_status": 10,
								"invoiceRequired": "false",
								"customer": 0,
								"visitDate": "2025-07-26",
								"reservationPayment_guid": "9790238b-6950-424f-a833-bf4d3b9fc406",
								"parentPayment_guid": "e256989d-d167-4ccf-a547-edf84e33afd4",
								"sliced": "true",
								"reservation_guid": "e6ab6906-ef11-4a0e-ba25-13a953b3934b",
								"group_guid": "d0c0c4c9-43a1-442c-bd70-913b94b41283",
								"group_label": "Giovanna  Marongiu",
								"group_email": "marongiu.giovanna@tiscali.it",
								"paymentCode": "MVFDR3BPGZD2J645",
								"paymentCondition": 0,
								"reservation_amount": 109,
								"reservation_amountTax": 0,
								"status": 1,
								"status_text": "Confermato",
								"stamp": "false",
								"notes": "",
								"transactionType": "GW",
								"transactionType_text": "Gateway",
								"paymentLimitDate": "2025-07-18T12:39:34.999Z",
								"paymentDate": "2025-07-18T12:39:34.999Z",
								"refund": "false",
								"refunded": "false",
								"convention_label": "",
								"receiptCode": "",
								"insertTimestamp": "2025-07-18T12:38:25.819Z",
								"updateTimestamp": "2025-07-18T12:39:50.130Z",
								"owner": "MTK/wp-vfd.application",
								"owner_text": " ",
								"sessionId": "8plo2s7o47e0u8c7lnq3omdcqs",
								"terminal_label": "",
								"terminalGroup_label": "",
								"gateway_guid": "cded4878-fd5e-4cba-8682-7bf519e45fe0",
								"gateway_label": "Nexi",
								"transactionID": "M4PFD2367467cYpCZw",
								"bankAccount_guid": "0",
								"bankAccount_label": "0",
								"channel_guid": "71e6d9a7-0f69-4d00-aacb-e5106680a533",
								"channel_label": "Vendita Online",
								"channelType": "OP",
								"detail_guid": "ae276193-d3bc-4892-a593-e7259e327495",
								"extra_guid": "0",
								"priceList": "duomo_tour_fast_track",
								"event": "VISITE DT Duomo Tour Fast-Track",
								"detailType": "PK",
								"detail_text": "Pacchetto",
								"detail_label": "DT_Anni6-11_L2504",
								"detail_count": 1,
								"paymentDetail_guid": "729bc3b0-0160-41f1-aabe-11d0310b2152",
								"detail_payingPartecipants": 1,
								"detail_quantity": 1,
								"tickets_quantity": 1,
								"pax_quantity": 1,
								"costCenter_guid": "1ae0783c-78f6-4f91-b8b1-0a40c74b06d3",
								"costCenter_label": "VFD",
								"object_receipt": 0,
								"object_taxCode": "N4  ",
								"object_taxNotes": "IVA esente art.10 c.1 n.22 DPR633/79",
								"object_amount": 21,
								"object_taxPercentage": 0,
								"amount": 21,
								"amountNet": 21,
								"amountPresale": 0,
								"amountSold": 21,
								"amountPayed": 21,
								"amountPending": 0,
								"amountCanceled": 0,
								"externalId": "DTFT_6-11_L2504",
								"amountRefunded": 0,
								"invoiceSummary": "",
								"eventCalendar_guid": "65c92c94-c8b5-4450-b06b-d5a7c6b23e42",
								"passDetail_guid": "",
								"paymentCostCenter_guid": "",
								"organization_guid": "0b2a8439-6fd5-4310-847e-fd7c551d0893",
								"venue_guid": "bb2426b0-816d-496e-a859-06ebf5bfe106",
								"olapUpdateTimestamp": "2025-07-18T23:08:18.363Z",
								"row_id": "6FF1B80D5DC8BB34C078330EF568A2A02022A8E9C6428FB46C9E1B9A5E7DE897",
								"operationType": "DELETE",
								"targetFolderPath": "Mida2/Test/Historical/2025/01",
								"targetFileName": "test_historical.parquet",
								"tempFolderPath": "Mida2/Test/Temp",
								"tempFileName": "temp_historical.parquet"
							}
						}
					},
					{
						"name": "FINAL_VALIDATION",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "APPEND_Historical_DELETE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Historical_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "Mida2/Test/Historical/2025/01",
									"fileName": "test_historical.parquet"
								}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"testResult": {
						"type": "String"
					},
					"recordCount": {
						"type": "String",
						"defaultValue": "0"
					}
				},
				"folder": {
					"name": "Mida2/Test"
				},
				"annotations": [
					"Pipeline di test completa per operazioni atomiche MIDA2",
					"Testa: INSERT, UPDATE, DELETE, LOOKUP su Complete, Summary e Historical",
					"Parametri corretti per tutte le chiamate atomiche"
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/VFD_PL_Mida2_Test_Setup')]",
				"[concat(variables('factoryId'), '/pipelines/VFD_PL_Mida2_Atomic_INSERT_Booking_Complete')]",
				"[concat(variables('factoryId'), '/pipelines/VFD_PL_Mida2_Atomic_INSERT_Booking_Summary')]",
				"[concat(variables('factoryId'), '/pipelines/VFD_PL_Mida2_Atomic_APPEND_Historical')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Mida_Bookings_Complete_Parquet')]",
				"[concat(variables('factoryId'), '/pipelines/VFD_PL_Mida2_Atomic_UPDATE_Booking_Complete')]",
				"[concat(variables('factoryId'), '/pipelines/VFD_PL_Mida2_Atomic_LOOKUP_Historical')]",
				"[concat(variables('factoryId'), '/pipelines/VFD_PL_Mida2_Atomic_DELETE_Booking_Complete')]",
				"[concat(variables('factoryId'), '/pipelines/VFD_PL_Mida2_Atomic_DELETE_Booking_Summary')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Mida_Historical_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Mida2_Test_Setup')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Setup ambiente di test - pulizia cartelle e preparazione",
				"activities": [
					{
						"name": "Delete_Old_Complete_File",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Complete_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "Mida2/Test/Complete/2025/01",
									"fileName": "test_complete.parquet"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": false,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Delete_Old_Summary_File",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Summary_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "Mida2/Test/Summary/2025/01",
									"fileName": "test_summary.parquet"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": false,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Delete_Old_Historical_File",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Historical_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "Mida2/Test/Historical/2025/01",
									"fileName": "test_historical.parquet"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": false,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Delete_Temp_Files",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "Mida2/Test/Temp",
									"fileName": "*.parquet"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"wildcardFileName": "*.parquet",
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Delete_Lookup_Results",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "Mida2/Test/Lookup",
									"fileName": "*.parquet"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"wildcardFileName": "*.parquet",
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Wait_For_Cleanup",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "Delete_Old_Complete_File",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "Delete_Old_Summary_File",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "Delete_Old_Historical_File",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "Delete_Temp_Files",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "Delete_Lookup_Results",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 2
						}
					},
					{
						"name": "Set_Test_Start_Time",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Wait_For_Cleanup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "testStartTime",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"testStartTime": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Mida2/Test"
				},
				"annotations": [
					"Pipeline di setup per test atomici",
					"Pulisce ambiente test prima dell'esecuzione"
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Mida_Bookings_Complete_Parquet')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Mida_Bookings_Summary_Parquet')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Mida_Historical_Parquet')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Mida_Temp_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Mida_Bookings_FTP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline arricchita: FTP → ADLS solo se nuovo → Data Flow → Copy → Delete",
				"activities": [
					{
						"name": "ListFTPFiles",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Mida_Bookings_FTPServer_Folder",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								{
									"value": "childItems",
									"type": "Expression"
								}
							],
							"storeSettings": {
								"type": "FtpReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false,
								"useBinaryTransfer": true,
								"disableChunking": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ForEachFTPFile",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ListFTPFiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListFTPFiles').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetFileName",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileName",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetYear",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetFileName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "year",
										"value": {
											"value": "@substring(item().name, 37, 4)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetMonth",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetYear",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "month",
										"value": {
											"value": "@substring(item().name, 41, 2)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetDay",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetMonth",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "day",
										"value": {
											"value": "@substring(item().name, 43, 2)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetFolderPathVar",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetDay",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "folderPathVar",
										"value": {
											"value": "@concat('Mida/Bookings/', variables('year'), '/', variables('month'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetDateString",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetFolderPathVar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "dateString",
										"value": {
											"value": "@concat(variables('year'), variables('month'), variables('day'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "CheckIfExistsOnADLS",
									"type": "GetMetadata",
									"dependsOn": [
										{
											"activity": "SetDateString",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "VFD_DS_Raw_Mida_Bookings_Binary",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": {
													"value": "@variables('folderPathVar')",
													"type": "Expression"
												},
												"fileName": {
													"value": "@variables('fileName')",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "BinaryReadSettings"
										}
									}
								},
								{
									"name": "ProcessFileIfCondition",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "CheckIfExistsOnADLS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@and(endswith(toLower(variables('fileName')), '.xlsx'), not(activity('CheckIfExistsOnADLS').output.exists))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "CopyFromFTP",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "FtpReadSettings",
															"recursive": true,
															"useBinaryTransfer": true,
															"disableChunking": false
														},
														"formatSettings": {
															"type": "BinaryReadSettings"
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "VFD_DS_Mida_Bookings_FTPServer_Binary",
														"type": "DatasetReference",
														"parameters": {
															"fileName": "@variables('fileName')"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "VFD_DS_Raw_Mida_Bookings_Binary",
														"type": "DatasetReference",
														"parameters": {
															"folderPath": "@variables('folderPathVar')",
															"fileName": "@variables('fileName')"
														}
													}
												]
											},
											{
												"name": "CopyExcelToParquet",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "CopyFromFTP",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "ExcelSource",
														"storeSettings": {
															"type": "AzureBlobFSReadSettings",
															"recursive": true,
															"enablePartitionDiscovery": false
														}
													},
													"sink": {
														"type": "ParquetSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "ParquetWriteSettings"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "VFD_DS_Raw_Mida_Bookings_Excel",
														"type": "DatasetReference",
														"parameters": {
															"folderPath": "@variables('folderPathVar')",
															"fileName": "@variables('fileName')"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "VFD_DS_Processed_Mida_Bookings_Parquet",
														"type": "DatasetReference",
														"parameters": {
															"folderPath": "@variables('folderPathVar')",
															"fileName": "@replace(variables('fileName'), '.xlsx', '.parquet')"
														}
													}
												]
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"fileName": {
						"type": "String"
					},
					"year": {
						"type": "String"
					},
					"month": {
						"type": "String"
					},
					"folderPathVar": {
						"type": "String"
					},
					"day": {
						"type": "String"
					},
					"dateString": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Mida/Bookings"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Mida_Bookings_FTPServer_Folder')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Raw_Mida_Bookings_Binary')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Mida_Bookings_FTPServer_Binary')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Raw_Mida_Bookings_Excel')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Processed_Mida_Bookings_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Mida_FTP_Simple_Explorer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline semplice per ottenere la lista delle directory del server FTP Mida",
				"activities": [
					{
						"name": "ListAllFTPDirectories",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Mida_Bookings_FTPServer_Folder",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "FtpReadSettings",
								"recursive": false,
								"enablePartitionDiscovery": false,
								"useBinaryTransfer": true,
								"disableChunking": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Mida/Utilities"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Mida_Bookings_FTPServer_Folder')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Mida_Seals_FTP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline per acquisire i dati di emissioni biglietti (Seals) da FTP a Data Lake",
				"activities": [
					{
						"name": "ListFTPFiles",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Mida_Seals_FTPServer_Folder",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "FtpReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false,
								"useBinaryTransfer": true,
								"disableChunking": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ForEachFTPFile",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ListFTPFiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListFTPFiles').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetFileName",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileName",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetYear",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetFileName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "year",
										"value": {
											"value": "@substring(item().name, 25, 4)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetMonth",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetYear",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "month",
										"value": {
											"value": "@substring(item().name, 29, 2)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetDay",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetMonth",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "day",
										"value": {
											"value": "@substring(item().name, 31, 2)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetFolderPathVar",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetDay",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "folderPathVar",
										"value": {
											"value": "@concat('Mida/Seals/', variables('year'), '/', variables('month'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "CheckIfExistsOnADLS",
									"type": "GetMetadata",
									"dependsOn": [
										{
											"activity": "SetFolderPathVar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "VFD_DS_Raw_Mida_Seals_Excel",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": {
													"value": "@variables('folderPathVar')",
													"type": "Expression"
												},
												"fileName": {
													"value": "@variables('fileName')",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "IfNotExists",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "CheckIfExistsOnADLS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(activity('CheckIfExistsOnADLS').output.exists)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "CopyFromFTP",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "FtpReadSettings",
															"recursive": true,
															"useBinaryTransfer": true,
															"disableChunking": false
														},
														"formatSettings": {
															"type": "BinaryReadSettings"
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "VFD_DS_Mida_Seals_FTPServer_Binary",
														"type": "DatasetReference",
														"parameters": {
															"fileName": {
																"value": "@variables('fileName')",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "VFD_DS_Raw_Mida_Seals_Binary",
														"type": "DatasetReference",
														"parameters": {
															"folderPath": {
																"value": "@variables('folderPathVar')",
																"type": "Expression"
															},
															"fileName": "@variables('fileName')"
														}
													}
												]
											},
											{
												"name": "Raw to Curated Pipeline",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "CopyFromFTP",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "VFD_PL_Mida_Seals_Raw_Curated",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"folderPath": {
															"value": "@variables('folderPathVar')",
															"type": "Expression"
														},
														"fileName": {
															"value": "@variables('fileName')",
															"type": "Expression"
														},
														"year": {
															"value": "@variables('year')",
															"type": "Expression"
														},
														"month": {
															"value": "@variables('month')",
															"type": "Expression"
														},
														"day": {
															"value": "@variables('day')",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"fileName": {
						"type": "String"
					},
					"year": {
						"type": "String"
					},
					"month": {
						"type": "String"
					},
					"folderPathVar": {
						"type": "String"
					},
					"day": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Mida/Seals"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Mida_Seals_FTPServer_Folder')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Raw_Mida_Seals_Excel')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Mida_Seals_FTPServer_Binary')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Raw_Mida_Seals_Binary')]",
				"[concat(variables('factoryId'), '/pipelines/VFD_PL_Mida_Seals_Raw_Curated')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Mida_Seals_Raw_Curated')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline per convertire file Excel Seals in formato Parquet usando Data Flow",
				"activities": [
					{
						"name": "Raw to Processed Transformation",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_Mida_Seals_Raw_Processed",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceExcel": {
										"folderPath": "@pipeline().parameters.folderPath",
										"fileName": "@pipeline().parameters.fileName"
									},
									"SinkParquet": {
										"folderPath": "@pipeline().parameters.folderPath",
										"fileName": "@replace(pipeline().parameters.fileName, '.xlsx', '.parquet')"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Copy Data from Temporary File",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Raw to Processed Transformation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Processed_Mida_Seals_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.folderPath",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_Mida_Seals_Raw_Processed_output.parquet"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Processed_Mida_Seals_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.folderPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@replace(pipeline().parameters.fileName,'.xlsx','.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Delete Temporary File",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy Data from Temporary File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Processed_Mida_Seals_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.folderPath",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_Mida_Seals_Raw_Processed_output.parquet"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Processed to Curated Transformation",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Delete Temporary File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_Mida_Seals_Processed_Curated_Daily",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceProcessed": {
										"folderPath": {
											"value": "@pipeline().parameters.folderPath",
											"type": "Expression"
										},
										"fileName": "@replace(pipeline().parameters.fileName,'.xlsx','.parquet')"
									},
									"SinkCurated": {
										"folderPath": {
											"value": "@pipeline().parameters.folderPath",
											"type": "Expression"
										},
										"fileName": {
											"value": "@concat('Mida_Seals_',pipeline().parameters.year,pipeline().parameters.month,pipeline().parameters.day)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Copy Data from Temporary Curated",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Processed to Curated Transformation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Curated_Mida_Seals_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.folderPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "VFD_DFL_Mida_Seals_Processed_Curated_Daily_output.parquet",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Curated_Mida_Seals_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.folderPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@concat('Mida_Seals_',pipeline().parameters.year,pipeline().parameters.month,pipeline().parameters.day,'.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Delete Temporary File Curated",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy Data from Temporary Curated",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Seals_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.folderPath",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_Mida_Seals_Processed_Curated_Daily_output.parquet"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"folderPath": {
						"type": "String",
						"defaultValue": "Mida/Seals/2025/03"
					},
					"fileName": {
						"type": "String",
						"defaultValue": "EmissioniGiornoPrecedente20250313.xlsx"
					},
					"year": {
						"type": "string",
						"defaultValue": "2025"
					},
					"month": {
						"type": "string",
						"defaultValue": "03"
					},
					"day": {
						"type": "string",
						"defaultValue": "13"
					}
				},
				"variables": {
					"year": {
						"type": "String"
					},
					"day": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Mida/Seals"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/VFD_DFL_Mida_Seals_Raw_Processed')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Processed_Mida_Seals_Parquet')]",
				"[concat(variables('factoryId'), '/dataflows/VFD_DFL_Mida_Seals_Processed_Curated_Daily')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Mida_Seals_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Mida_Users_Processed_Curated')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline parametrica per convertire CSV in Parquet usando Data Flow",
				"activities": [
					{
						"name": "Processed to Curated Transformation",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_Mida_Users_Processed_Curated_Daily",
								"type": "DataFlowReference",
								"parameters": {
									"folderPath": "\"folder\"",
									"fileName": "\"file\""
								},
								"datasetParameters": {
									"SourceProcessed": {
										"folderPath": {
											"value": "@pipeline().parameters.bookingsFolderPath",
											"type": "Expression"
										},
										"fileName": {
											"value": "@replace(pipeline().parameters.bookingsFileName,'.csv','.parquet')",
											"type": "Expression"
										}
									},
									"SinkCurated": {
										"folderPath": {
											"value": "@pipeline().parameters.usersFolderPath",
											"type": "Expression"
										},
										"fileName": {
											"value": "@concat('Mida_Users_',pipeline().parameters.year,pipeline().parameters.month,pipeline().parameters.day)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 32,
								"computeType": "MemoryOptimized"
							},
							"traceLevel": "Coarse"
						}
					},
					{
						"name": "Copy Data from Temporary Curated",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Processed to Curated Transformation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Curated_Mida_Users_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.usersFolderPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "VFD_DFL_Mida_Users_Processed_Curated_Daily_output.parquet",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Curated_Mida_Users_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.usersFolderPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@concat('Mida_Users_',pipeline().parameters.year,pipeline().parameters.month,pipeline().parameters.day,'.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Delete Temporary File Curated",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy Data from Temporary Curated",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Users_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.usersFolderPath",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_Mida_Bookings_Processed_Curated_Daily_output.parquet"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"bookingsFolderPath": {
						"type": "String",
						"defaultValue": "Mida/Bookings/2021/10"
					},
					"bookingsFileName": {
						"type": "String",
						"defaultValue": "export_vw_summary_reservationPayments20211001.csv"
					},
					"year": {
						"type": "string",
						"defaultValue": "2021"
					},
					"month": {
						"type": "string",
						"defaultValue": "10"
					},
					"day": {
						"type": "string",
						"defaultValue": "01"
					},
					"usersFolderPath": {
						"type": "string",
						"defaultValue": "Mida/Users/2021/10"
					},
					"usersFileName": {
						"type": "string",
						"defaultValue": "export_vw_summary_reservationPayments20211001.csv"
					}
				},
				"variables": {
					"year": {
						"type": "String"
					},
					"day": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Mida/Users"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/VFD_DFL_Mida_Users_Processed_Curated_Daily')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Mida_Users_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Mida_Validations_FTP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline per acquisire i dati di vidimazioni (Validations) da FTP a Data Lake",
				"activities": [
					{
						"name": "ListFTPFiles",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Mida_Validations_FTPServer_Folder",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "FtpReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false,
								"useBinaryTransfer": true,
								"disableChunking": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ForEachFTPFile",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ListFTPFiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListFTPFiles').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetFileName",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileName",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetYear",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetFileName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "year",
										"value": {
											"value": "@substring(item().name, 27, 4)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetMonth",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetYear",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "month",
										"value": {
											"value": "@substring(item().name, 31, 2)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetDay",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetMonth",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "day",
										"value": {
											"value": "@substring(item().name, 33, 2)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetFolderPathVar",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetDay",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "folderPathVar",
										"value": {
											"value": "@concat('Mida/Validations/', variables('year'), '/', variables('month'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "CheckIfExistsOnADLS",
									"type": "GetMetadata",
									"dependsOn": [
										{
											"activity": "SetFolderPathVar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "VFD_DS_Raw_Mida_Validations_Excel",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": {
													"value": "@variables('folderPathVar')",
													"type": "Expression"
												},
												"fileName": {
													"value": "@variables('fileName')",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "IfNotExists",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "CheckIfExistsOnADLS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(activity('CheckIfExistsOnADLS').output.exists)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "CopyFromFTP",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "FtpReadSettings",
															"recursive": true,
															"useBinaryTransfer": true,
															"disableChunking": false
														},
														"formatSettings": {
															"type": "BinaryReadSettings"
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "VFD_DS_Mida_Validations_FTPServer_Binary",
														"type": "DatasetReference",
														"parameters": {
															"fileName": {
																"value": "@variables('fileName')",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "VFD_DS_Raw_Mida_Validations_Binary",
														"type": "DatasetReference",
														"parameters": {
															"folderPath": {
																"value": "@variables('folderPathVar')",
																"type": "Expression"
															},
															"fileName": {
																"value": "@variables('fileName')",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "Raw to Curated Pipeline",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "CopyFromFTP",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "VFD_PL_Mida_Validations_Raw_Curated",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"folderPath": {
															"value": "@variables('folderPathVar')",
															"type": "Expression"
														},
														"fileName": {
															"value": "@variables('fileName')",
															"type": "Expression"
														},
														"year": {
															"value": "@variables('year')",
															"type": "Expression"
														},
														"month": {
															"value": "@variables('month')",
															"type": "Expression"
														},
														"day": {
															"value": "@variables('day')",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"fileName": {
						"type": "String"
					},
					"year": {
						"type": "String"
					},
					"month": {
						"type": "String"
					},
					"folderPathVar": {
						"type": "String"
					},
					"day": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Mida/Validations"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Mida_Validations_FTPServer_Folder')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Raw_Mida_Validations_Excel')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Mida_Validations_FTPServer_Binary')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Raw_Mida_Validations_Binary')]",
				"[concat(variables('factoryId'), '/pipelines/VFD_PL_Mida_Validations_Raw_Curated')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Mida_Validations_Raw_Curated')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline per convertire file Excel Validations in formato Parquet usando Data Flow",
				"activities": [
					{
						"name": "Raw to Processed Transformation",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_Mida_Validations_Raw_Processed",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceExcel": {
										"folderPath": {
											"value": "@pipeline().parameters.folderPath",
											"type": "Expression"
										},
										"fileName": {
											"value": "@pipeline().parameters.fileName",
											"type": "Expression"
										}
									},
									"SinkParquet": {
										"folderPath": {
											"value": "@pipeline().parameters.folderPath",
											"type": "Expression"
										},
										"fileName": "VFD_DFL_Mida_Validations_Raw_Processed_output.parquet"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Copy Data from Temporary File",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Raw to Processed Transformation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Processed_Mida_Validations_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.folderPath",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_Mida_Validations_Raw_Processed_output.parquet"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Processed_Mida_Validations_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.folderPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@replace(pipeline().parameters.fileName,'.xlsx','.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Delete Temporary File",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy Data from Temporary File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Processed_Mida_Validations_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.folderPath",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_Mida_Validations_Raw_Processed_output.parquet"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Processed to Curated Transformation",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Delete Temporary File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_Mida_Validations_Processed_Curated_Daily",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceProcessed": {
										"folderPath": {
											"value": "@pipeline().parameters.folderPath",
											"type": "Expression"
										},
										"fileName": {
											"value": "@replace(pipeline().parameters.fileName,'.xlsx','.parquet')",
											"type": "Expression"
										}
									},
									"SinkCurated": {
										"folderPath": {
											"value": "@pipeline().parameters.folderPath",
											"type": "Expression"
										},
										"fileName": "VFD_DFL_Mida_Validations_Processed_Curated_Daily_output.parquet"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Copy Data from Temporary Curated",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Processed to Curated Transformation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Curated_Mida_Validations_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.folderPath",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_Mida_Validations_Processed_Curated_Daily_output.parquet"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Curated_Mida_Validations_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.folderPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@concat('Mida_Validations_',pipeline().parameters.year,pipeline().parameters.month,pipeline().parameters.day,'.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Delete Temporary File Curated",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy Data from Temporary Curated",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Validations_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.folderPath",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_Mida_Validations_Processed_Curated_Daily_output.parquet"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"folderPath": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					},
					"year": {
						"type": "String"
					},
					"month": {
						"type": "String"
					},
					"day": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Mida/Validations"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/VFD_DFL_Mida_Validations_Raw_Processed')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Processed_Mida_Validations_Parquet')]",
				"[concat(variables('factoryId'), '/dataflows/VFD_DFL_Mida_Validations_Processed_Curated_Daily')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Mida_Validations_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Test_Single_Parameter')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline di test con un solo parametro per verificare il passaggio al dataflow",
				"activities": [
					{
						"name": "Test Dataflow Single Param",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_Test_Single_Parameter",
								"type": "DataFlowReference",
								"parameters": {
									"test_param": {
										"value": "@pipeline().parameters.test_input",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SourceProcessed": {
										"folderPath": "Mida/Bookings/Processed/2025/01",
										"fileName": "VFD_Mida_Processed_20250101.parquet\""
									},
									"SinkTest": {
										"folderPath": "Test",
										"fileName": "test_single_param_output.parquet"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"test_input": {
						"type": "string",
						"defaultValue": "TEST_VALUE_123"
					}
				},
				"folder": {
					"name": "Mida2/Test"
				},
				"annotations": [
					"Test per verificare passaggio parametri da pipeline a dataflow"
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/VFD_DFL_Test_Single_Parameter')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Utils_AccessAreas_Raw_Curated')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TicketArea_CopyRawToProcessed",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Raw_AccessAreas_Excel",
								"type": "DatasetReference",
								"parameters": {
									"fileName": "AssociazioneBigliettiAccessi.xlsx"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Processed_AccessAreas_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"fileName": "AssociazioneBigliettiAccessi.parquet"
								}
							}
						]
					},
					{
						"name": "TicketArea_CopyProcessedToCurated",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "TicketArea_CopyRawToProcessed",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Processed_AccessAreas_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"fileName": "AssociazioneBigliettiAccessi.parquet"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Curated_AccessAreas_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"fileName": "AssociazioneBigliettiAccessi.parquet"
								}
							}
						]
					},
					{
						"name": "AreaSiteID_CopyRawToProcessed",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "TicketArea_CopyProcessedToCurated",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Raw_AccessAreas_Excel",
								"type": "DatasetReference",
								"parameters": {
									"fileName": "AssociazioneAccessiSiteIDAffluences.xlsx"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Processed_AccessAreas_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"fileName": "AssociazioneAccessiSiteIDAffluences.parquet"
								}
							}
						]
					},
					{
						"name": "AreaSiteID_CopyProcessedToCurated",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "AreaSiteID_CopyRawToProcessed",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Processed_AccessAreas_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"fileName": "AssociazioneAccessiSiteIDAffluences.parquet"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Curated_AccessAreas_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"fileName": "AssociazioneAccessiSiteIDAffluences.parquet"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Utils/AccessAreas"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Raw_AccessAreas_Excel')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Processed_AccessAreas_Parquet')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_AccessAreas_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Weather_API_Daily')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline per acquisire dati meteo da Visual Crossing API e processarli",
				"activities": [
					{
						"name": "SetDataInizio",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "data_inizio",
							"value": {
								"value": "@coalesce(pipeline().parameters.data_inizio, formatDateTime(addDays(utcNow(), -1), 'yyyy-MM-dd'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetDataFine",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "data_fine",
							"value": {
								"value": "@coalesce(pipeline().parameters.data_fine, formatDateTime(addDays(utcNow(), -1), 'yyyy-MM-dd'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetLocation",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "location",
							"value": {
								"value": "@coalesce(pipeline().parameters.location, 'Milano')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetYear",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetDataInizio",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "year",
							"value": {
								"value": "@substring(variables('data_inizio'), 0, 4)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetMonth",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetYear",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "month",
							"value": {
								"value": "@substring(variables('data_inizio'), 5, 2)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetFolderPath",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetMonth",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "folderPath",
							"value": {
								"value": "@concat('Weather/', variables('year'), '/', variables('month'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetFileName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetDataFine",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetFolderPath",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileName",
							"value": {
								"value": "@concat('weather_', replace(variables('data_inizio'), '-', ''), '_', replace(variables('data_fine'), '-', ''), '.csv')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CheckIfExistsInRaw",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "SetFileName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Raw_Weather_CSV",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@variables('folderPath')",
										"type": "Expression"
									},
									"fileName": {
										"value": "@variables('fileName')",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "IfNotExistsInRaw",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckIfExistsInRaw",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(activity('CheckIfExistsInRaw').output.exists)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "CopyFromAPI",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET"
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".csv"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "VFD_DS_VisualCrossing_HTTP_CSV",
											"type": "DatasetReference",
											"parameters": {
												"data_inizio": "@variables('data_inizio')",
												"data_fine": "@variables('data_fine')",
												"location": "@variables('location')"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "VFD_DS_Raw_Weather_CSV",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": {
													"value": "@variables('folderPath')",
													"type": "Expression"
												},
												"fileName": {
													"value": "@variables('fileName')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Raw to Curated Pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "IfNotExistsInRaw",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "VFD_PL_Weather_Raw_Curated",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"folderPath": {
									"value": "@variables('folderPath')",
									"type": "Expression"
								},
								"fileName": {
									"value": "@variables('fileName')",
									"type": "Expression"
								},
								"year": {
									"value": "@variables('year')",
									"type": "Expression"
								},
								"month": {
									"value": "@variables('month')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"data_inizio": {
						"type": "String"
					},
					"data_fine": {
						"type": "String"
					},
					"location": {
						"type": "String",
						"defaultValue": "Milano"
					}
				},
				"variables": {
					"data_inizio": {
						"type": "String"
					},
					"data_fine": {
						"type": "String"
					},
					"location": {
						"type": "String"
					},
					"year": {
						"type": "String"
					},
					"month": {
						"type": "String"
					},
					"folderPath": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Visual Crossing/Weather"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Raw_Weather_CSV')]",
				"[concat(variables('factoryId'), '/pipelines/VFD_PL_Weather_Raw_Curated')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_VisualCrossing_HTTP_CSV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_Weather_Raw_Curated')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline per convertire CSV meteo in Parquet e aggiornare file mensili con ForEach",
				"activities": [
					{
						"name": "Raw to Processed Transformation",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VFD_DFL_Weather_Raw_Processed",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceRaw": {
										"folderPath": {
											"value": "@pipeline().parameters.folderPath",
											"type": "Expression"
										},
										"fileName": {
											"value": "@pipeline().parameters.fileName",
											"type": "Expression"
										}
									},
									"SinkProcessed": {
										"folderPath": {
											"value": "@pipeline().parameters.folderPath",
											"type": "Expression"
										},
										"fileName": "VFD_DFL_Weather_Raw_Processed_output.parquet"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					},
					{
						"name": "Copy Raw to Processed",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Raw to Processed Transformation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Processed_Weather_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.folderPath",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_Weather_Raw_Processed_output.parquet"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Processed_Weather_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.folderPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@replace(pipeline().parameters.fileName, '.csv', '.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Delete Temporary Processed",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy Raw to Processed",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VFD_DS_Processed_Weather_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.folderPath",
										"type": "Expression"
									},
									"fileName": "VFD_DFL_Weather_Raw_Processed_output.parquet"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Get Processed Data Rows",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Delete Temporary Processed",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"dataset": {
								"referenceName": "VFD_DS_Processed_Weather_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.folderPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@replace(pipeline().parameters.fileName, '.csv', '.parquet')",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Weather Row",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Processed Data Rows",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Processed Data Rows').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetRowYear",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "rowYear",
										"value": {
											"value": "@substring(item().datetime, 0, 4)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetRowMonth",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetRowYear",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "rowMonth",
										"value": {
											"value": "@substring(item().datetime, 5, 2)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetRowDate",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetRowMonth",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "rowDate",
										"value": {
											"value": "@item().datetime",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Update Monthly File",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "SetRowDate",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "VFD_DFL_Weather_Single_Row_To_Monthly",
											"type": "DataFlowReference",
											"parameters": {
												"target_date": {
													"value": "'@{variables('rowDate')}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"SourceProcessed": {
													"folderPath": {
														"value": "@pipeline().parameters.folderPath",
														"type": "Expression"
													},
													"fileName": {
														"value": "@replace(pipeline().parameters.fileName, '.csv', '.parquet')",
														"type": "Expression"
													}
												},
												"SourceCuratedExisting": {
													"folderPath": {
														"value": "@concat('Weather/',variables('rowYear'))",
														"type": "Expression"
													},
													"fileName": {
														"value": "@concat('weather_monthly_', variables('rowYear'), variables('rowMonth'), '.parquet')",
														"type": "Expression"
													}
												},
												"SinkCurated": {
													"folderPath": {
														"value": "@concat('Weather/',variables('rowYear'))",
														"type": "Expression"
													},
													"fileName": {
														"value": "@concat('VFD_DFL_Weather_Single_Row_To_Monthly_', variables('rowYear'), variables('rowMonth'), '_output.parquet')",
														"type": "Expression"
													}
												}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Coarse"
									}
								},
								{
									"name": "Copy to Final Monthly File",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Update Monthly File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "ParquetReadSettings"
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "VFD_DS_Curated_Weather_Parquet",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": {
													"value": "@concat('Weather/',variables('rowYear'))",
													"type": "Expression"
												},
												"fileName": {
													"value": "VFD_DFL_Weather_Single_Row_To_Monthly_output.parquet",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "VFD_DS_Curated_Weather_Parquet",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": {
													"value": "@concat('Weather/',variables('rowYear'))",
													"type": "Expression"
												},
												"fileName": {
													"value": "@concat('weather_monthly_', variables('rowYear'), variables('rowMonth'), '.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete Temporary Monthly",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Copy to Final Monthly File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "VFD_DS_Curated_Weather_Parquet",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": {
													"value": "@concat('Weather/',variables('rowYear'))",
													"type": "Expression"
												},
												"fileName": {
													"value": "VFD_DFL_Weather_Single_Row_To_Monthly_output.parquet",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"folderPath": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					},
					"year": {
						"type": "String"
					},
					"month": {
						"type": "String"
					}
				},
				"variables": {
					"rowYear": {
						"type": "String"
					},
					"rowMonth": {
						"type": "String"
					},
					"rowDate": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Visual Crossing/Weather"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/VFD_DFL_Weather_Raw_Processed')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Processed_Weather_Parquet')]",
				"[concat(variables('factoryId'), '/dataflows/VFD_DFL_Weather_Single_Row_To_Monthly')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Weather_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_PL_test')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline di test per verificare passaggio parametri da pipeline a dataflow",
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "CFD_DFL_Mida2_test2",
								"type": "DataFlowReference",
								"parameters": {
									"param_string": {
										"value": "@concat('''', pipeline().parameters.pipeparam_string, '''')",
										"type": "Expression"
									},
									"param_int": {
										"value": "@pipeline().parameters.pipeparam_int",
										"type": "Expression"
									},
									"param_date": {
										"value": "@concat('''', pipeline().parameters.pipeparam_date, '''')",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {
										"folderPath": "Mida/Bookings/Temp",
										"fileName": "temp_update.parquet"
									},
									"sink1": {
										"folderPath": "Mida/Bookings/Temp",
										"fileName": "temp_update2.parquet"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "VFD-IR-DataflowExecution",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Complete_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "Mida2/Bookings/Complete/2025/01",
									"fileName": "test.parquet"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Complete_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "Mida2/Bookings/Complete/2025/01",
									"fileName": "test2.parquet"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"pipeparam_string": {
						"type": "string",
						"defaultValue": "RVFD2XNDRPZ3XPQX"
					},
					"pipeparam_int": {
						"type": "int",
						"defaultValue": 12
					},
					"pipeparam_date": {
						"type": "string",
						"defaultValue": "2025-07-25"
					},
					"pipeparam_timestamp": {
						"type": "string",
						"defaultValue": "2025-07-25T10:18:56.146Z"
					}
				},
				"folder": {
					"name": "Mida2/Test"
				},
				"annotations": [
					"Test per verificare passaggio parametri da pipeline a dataflow"
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/CFD_DFL_Mida2_test2')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/VFD-IR-DataflowExecution')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Mida_Bookings_Complete_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida_Validations_Raw_Processed')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Mida/Validations"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Affluences_API')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_LS_Affluences_API",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"siteUUID": {
						"type": "string"
					},
					"date": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Affluences"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@concat('historical/', dataset().siteUUID, '?date=', dataset().date)",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_LS_Affluences_API')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Cloud4Wi_Connections_HTTP')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_LS_Cloud4Wi_API",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"dateStart": {
						"type": "string"
					},
					"dateStop": {
						"type": "string"
					}
				},
				"folder": {
					"name": "WiFi/HTTP"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "@concat('/v2/organizations/55c9f26632e9fdf13d9a77df50d4f6cc/accountings?dateStart=', dataset().dateStart, '&dateEnd=', dataset().dateStop)",
							"type": "Expression"
						}
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"generated": {
							"type": "string"
						},
						"sId": {
							"type": "string"
						},
						"count": {
							"type": "integer"
						},
						"connections": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"customerId": {
										"type": "string"
									},
									"username": {
										"type": "string"
									},
									"organizationId": {
										"type": "string"
									},
									"start": {
										"type": "string"
									},
									"startBusiness": {
										"type": "string"
									},
									"stop": {
										"type": "string"
									},
									"stopBusiness": {
										"type": "string"
									},
									"duration": {
										"type": "integer"
									},
									"traffic": {
										"type": "integer"
									},
									"locationName": {
										"type": "string"
									},
									"locationId": {
										"type": "string"
									},
									"hotspotIdentifier": {
										"type": "string"
									},
									"hotspotId": {
										"type": "string"
									},
									"latitude": {
										"type": "number"
									},
									"longitude": {
										"type": "number"
									},
									"macAddressClient": {
										"type": "string"
									},
									"ipAddressClient": {
										"type": "string"
									},
									"terminateCause": {
										"type": "string"
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_LS_Cloud4Wi_API')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Cloud4Wi_Users_HTTP')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_LS_Cloud4Wi_API",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"username": {
						"type": "string"
					}
				},
				"folder": {
					"name": "WiFi/HTTP"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "@concat('/v2/customers/', dataset().username)",
							"type": "Expression"
						}
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"count": {
							"type": "integer"
						},
						"scrollId": {
							"type": "string"
						},
						"data": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"username": {
										"type": "string"
									},
									"firstName": {
										"type": "string"
									},
									"lastName": {
										"type": "string"
									},
									"email": {
										"type": "string"
									},
									"gender": {
										"type": "string"
									},
									"phone": {
										"type": "string"
									},
									"birthDate": {
										"type": "string"
									},
									"country": {
										"type": "string"
									},
									"zipCode": {
										"type": "string"
									},
									"companyName": {
										"type": "string"
									},
									"wifiArea": {
										"type": "string"
									},
									"creationDate": {
										"type": "string"
									},
									"marketing": {
										"type": "boolean"
									},
									"type": {
										"type": "string"
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_LS_Cloud4Wi_API')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Curated_AccessAreas_Parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Utils/AccessAreas"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": "utils/AccessAreas",
						"fileSystem": "curated"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Curated_Affluences_Daily_Parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderPath": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Affluences"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folderPath",
							"type": "Expression"
						},
						"fileSystem": "curated"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "site_id",
						"type": "UTF8"
					},
					{
						"name": "site_name",
						"type": "UTF8"
					},
					{
						"name": "date",
						"type": "DATE"
					},
					{
						"name": "hour",
						"type": "UTF8"
					},
					{
						"name": "occupancy",
						"type": "INT32"
					},
					{
						"name": "entries",
						"type": "INT32"
					},
					{
						"name": "exits",
						"type": "INT32"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Curated_Affluences_Monthly_Parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderPath": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Affluences"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folderPath",
							"type": "Expression"
						},
						"fileSystem": "curated"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "date",
						"type": "DATE"
					},
					{
						"name": "total_entries",
						"type": "INT32"
					},
					{
						"name": "ascensore_nord_entries",
						"type": "INT32"
					},
					{
						"name": "ascensore_sud_entries",
						"type": "INT32"
					},
					{
						"name": "salita_piedi_entries",
						"type": "INT32"
					},
					{
						"name": "discesa_piedi_entries",
						"type": "INT32"
					},
					{
						"name": "max_occupancy",
						"type": "INT32"
					},
					{
						"name": "max_occupancy_hour",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Curated_DuomoWiFi_Enriched_Parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"year": {
						"type": "string"
					},
					"month": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "WiFi/Curated"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@concat('Wifi/connections/', dataset().year, '/', dataset().month)",
							"type": "Expression"
						},
						"fileSystem": "curated"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "hotspotIdentifier",
						"type": "String"
					},
					{
						"name": "start",
						"type": "String"
					},
					{
						"name": "stop",
						"type": "String"
					},
					{
						"name": "duration",
						"type": "Int32"
					},
					{
						"name": "traffic",
						"type": "Int32"
					},
					{
						"name": "terminateCause",
						"type": "String"
					},
					{
						"name": "username",
						"type": "String"
					},
					{
						"name": "macAddressClient",
						"type": "String"
					},
					{
						"name": "ipAddressClient",
						"type": "String"
					},
					{
						"name": "locationId",
						"type": "String"
					},
					{
						"name": "customerId",
						"type": "String"
					},
					{
						"name": "sessionTime_minutes",
						"type": "Double"
					},
					{
						"name": "traffic_MB",
						"type": "Double"
					},
					{
						"name": "user_firstName",
						"type": "String"
					},
					{
						"name": "user_lastName",
						"type": "String"
					},
					{
						"name": "user_email",
						"type": "String"
					},
					{
						"name": "user_gender",
						"type": "String"
					},
					{
						"name": "user_phone",
						"type": "String"
					},
					{
						"name": "user_birthDate",
						"type": "String"
					},
					{
						"name": "user_country",
						"type": "String"
					},
					{
						"name": "user_zipCode",
						"type": "String"
					},
					{
						"name": "user_wifiArea",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Curated_Mida_Bookings_Complete_Parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderPath": {
						"type": "string",
						"defaultValue": "Mida2/Bookings/Complete/2025/01"
					},
					"fileName": {
						"type": "string",
						"defaultValue": "VFD_Mida_Bookings_20250101.parquet"
					}
				},
				"folder": {
					"name": "Mida2/Bookings"
				},
				"annotations": [
					"File completo prenotazioni - tutti i campi - partizionato per data inserimento"
				],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folderPath",
							"type": "Expression"
						},
						"fileSystem": "curated"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "guid_pk",
						"type": "UTF8"
					},
					{
						"name": "reservation_progressiveCode",
						"type": "UTF8"
					},
					{
						"name": "reservation_code",
						"type": "UTF8"
					},
					{
						"name": "reservation_status",
						"type": "INT32"
					},
					{
						"name": "invoiceRequired",
						"type": "UTF8"
					},
					{
						"name": "customer",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "visitDate",
						"type": "DATE"
					},
					{
						"name": "reservationPayment_guid",
						"type": "UTF8"
					},
					{
						"name": "parentPayment_guid",
						"type": "UTF8"
					},
					{
						"name": "sliced",
						"type": "UTF8"
					},
					{
						"name": "reservation_guid",
						"type": "UTF8"
					},
					{
						"name": "group_guid",
						"type": "UTF8"
					},
					{
						"name": "group_label",
						"type": "UTF8"
					},
					{
						"name": "group_email",
						"type": "UTF8"
					},
					{
						"name": "paymentCode",
						"type": "UTF8"
					},
					{
						"name": "paymentCondition",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "reservation_amount",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "reservation_amountTax",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "status",
						"type": "INT32"
					},
					{
						"name": "status_text",
						"type": "UTF8"
					},
					{
						"name": "stamp",
						"type": "UTF8"
					},
					{
						"name": "notes",
						"type": "UTF8"
					},
					{
						"name": "transactionType",
						"type": "UTF8"
					},
					{
						"name": "transactionType_text",
						"type": "UTF8"
					},
					{
						"name": "paymentLimitDate",
						"type": "DATE"
					},
					{
						"name": "paymentDate",
						"type": "DATE"
					},
					{
						"name": "refund",
						"type": "UTF8"
					},
					{
						"name": "refunded",
						"type": "UTF8"
					},
					{
						"name": "convention_label",
						"type": "UTF8"
					},
					{
						"name": "receiptCode",
						"type": "UTF8"
					},
					{
						"name": "insertTimestamp",
						"type": "DATE"
					},
					{
						"name": "updateTimestamp",
						"type": "DATE"
					},
					{
						"name": "owner",
						"type": "UTF8"
					},
					{
						"name": "owner_text",
						"type": "UTF8"
					},
					{
						"name": "sessionId",
						"type": "UTF8"
					},
					{
						"name": "terminal_label",
						"type": "UTF8"
					},
					{
						"name": "terminalGroup_label",
						"type": "UTF8"
					},
					{
						"name": "gateway_guid",
						"type": "UTF8"
					},
					{
						"name": "gateway_label",
						"type": "UTF8"
					},
					{
						"name": "transactionID",
						"type": "UTF8"
					},
					{
						"name": "bankAccount_guid",
						"type": "UTF8"
					},
					{
						"name": "bankAccount_label",
						"type": "UTF8"
					},
					{
						"name": "channel_guid",
						"type": "UTF8"
					},
					{
						"name": "channel_label",
						"type": "UTF8"
					},
					{
						"name": "channelType",
						"type": "UTF8"
					},
					{
						"name": "detail_guid",
						"type": "UTF8"
					},
					{
						"name": "extra_guid",
						"type": "UTF8"
					},
					{
						"name": "priceList",
						"type": "UTF8"
					},
					{
						"name": "event",
						"type": "UTF8"
					},
					{
						"name": "detailType",
						"type": "UTF8"
					},
					{
						"name": "detail_text",
						"type": "UTF8"
					},
					{
						"name": "detail_label",
						"type": "UTF8"
					},
					{
						"name": "detail_count",
						"type": "INT32"
					},
					{
						"name": "paymentDetail_guid",
						"type": "UTF8"
					},
					{
						"name": "detail_payingPartecipants",
						"type": "INT32"
					},
					{
						"name": "detail_quantity",
						"type": "INT32"
					},
					{
						"name": "tickets_quantity",
						"type": "INT32"
					},
					{
						"name": "pax_quantity",
						"type": "INT32"
					},
					{
						"name": "costCenter_guid",
						"type": "UTF8"
					},
					{
						"name": "costCenter_label",
						"type": "UTF8"
					},
					{
						"name": "object_receipt",
						"type": "INT32"
					},
					{
						"name": "object_taxCode",
						"type": "UTF8"
					},
					{
						"name": "object_taxNotes",
						"type": "UTF8"
					},
					{
						"name": "object_amount",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "object_taxPercentage",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "amount",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "amountNet",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "amountPresale",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "amountSold",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "amountPayed",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "amountPending",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "amountCanceled",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "externalId",
						"type": "UTF8"
					},
					{
						"name": "amountRefunded",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "invoiceSummary",
						"type": "UTF8"
					},
					{
						"name": "eventCalendar_guid",
						"type": "UTF8"
					},
					{
						"name": "passDetail_guid",
						"type": "UTF8"
					},
					{
						"name": "paymentCostCenter_guid",
						"type": "UTF8"
					},
					{
						"name": "organization_guid",
						"type": "UTF8"
					},
					{
						"name": "venue_guid",
						"type": "UTF8"
					},
					{
						"name": "olapUpdateTimestamp",
						"type": "DATE"
					},
					{
						"name": "row_id",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Curated_Mida_Bookings_Parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderPath": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Mida/Bookings"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folderPath",
							"type": "Expression"
						},
						"fileSystem": "curated"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Curated_Mida_Bookings_Summary_Parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderPath": {
						"type": "string",
						"defaultValue": "Mida2/Bookings/Summary/2025/01"
					},
					"fileName": {
						"type": "string",
						"defaultValue": "VFD_Mida_BookingsVisitDateSummary_20250101.parquet"
					}
				},
				"folder": {
					"name": "Mida2/Bookings"
				},
				"annotations": [
					"File summary prenotazioni - subset campi per analytics - partizionato per data visita",
					"Include row_id come chiave primaria per operazioni atomiche"
				],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folderPath",
							"type": "Expression"
						},
						"fileSystem": "curated"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "row_id",
						"type": "UTF8"
					},
					{
						"name": "reservation_code",
						"type": "UTF8"
					},
					{
						"name": "priceList",
						"type": "UTF8"
					},
					{
						"name": "channel_label",
						"type": "UTF8"
					},
					{
						"name": "pax_quantity",
						"type": "INT32"
					},
					{
						"name": "insertTimestamp",
						"type": "DATE"
					},
					{
						"name": "updateTimestamp",
						"type": "DATE"
					},
					{
						"name": "reservation_amount",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "visitDate",
						"type": "DATE"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Curated_Mida_Historical_Parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderPath": {
						"type": "string",
						"defaultValue": "Mida2/Bookings/Historical/2025/01"
					},
					"fileName": {
						"type": "string",
						"defaultValue": "VFD_Mida_Historical_20250101.parquet"
					}
				},
				"folder": {
					"name": "Mida2/Bookings"
				},
				"annotations": [
					"File storico modifiche - log audit trail - append-only - partizionato per data inserimento"
				],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folderPath",
							"type": "Expression"
						},
						"fileSystem": "curated"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "guid_pk",
						"type": "UTF8"
					},
					{
						"name": "reservation_progressiveCode",
						"type": "UTF8"
					},
					{
						"name": "reservation_code",
						"type": "UTF8"
					},
					{
						"name": "reservation_status",
						"type": "INT32"
					},
					{
						"name": "invoiceRequired",
						"type": "UTF8"
					},
					{
						"name": "customer",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "visitDate",
						"type": "DATE"
					},
					{
						"name": "reservationPayment_guid",
						"type": "UTF8"
					},
					{
						"name": "parentPayment_guid",
						"type": "UTF8"
					},
					{
						"name": "sliced",
						"type": "UTF8"
					},
					{
						"name": "reservation_guid",
						"type": "UTF8"
					},
					{
						"name": "group_guid",
						"type": "UTF8"
					},
					{
						"name": "group_label",
						"type": "UTF8"
					},
					{
						"name": "group_email",
						"type": "UTF8"
					},
					{
						"name": "paymentCode",
						"type": "UTF8"
					},
					{
						"name": "paymentCondition",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "reservation_amount",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "reservation_amountTax",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "status",
						"type": "INT32"
					},
					{
						"name": "status_text",
						"type": "UTF8"
					},
					{
						"name": "stamp",
						"type": "UTF8"
					},
					{
						"name": "notes",
						"type": "UTF8"
					},
					{
						"name": "transactionType",
						"type": "UTF8"
					},
					{
						"name": "transactionType_text",
						"type": "UTF8"
					},
					{
						"name": "paymentLimitDate",
						"type": "DATE"
					},
					{
						"name": "paymentDate",
						"type": "DATE"
					},
					{
						"name": "refund",
						"type": "UTF8"
					},
					{
						"name": "refunded",
						"type": "UTF8"
					},
					{
						"name": "convention_label",
						"type": "UTF8"
					},
					{
						"name": "receiptCode",
						"type": "UTF8"
					},
					{
						"name": "insertTimestamp",
						"type": "DATE"
					},
					{
						"name": "updateTimestamp",
						"type": "DATE"
					},
					{
						"name": "owner",
						"type": "UTF8"
					},
					{
						"name": "owner_text",
						"type": "UTF8"
					},
					{
						"name": "sessionId",
						"type": "UTF8"
					},
					{
						"name": "terminal_label",
						"type": "UTF8"
					},
					{
						"name": "terminalGroup_label",
						"type": "UTF8"
					},
					{
						"name": "gateway_guid",
						"type": "UTF8"
					},
					{
						"name": "gateway_label",
						"type": "UTF8"
					},
					{
						"name": "transactionID",
						"type": "UTF8"
					},
					{
						"name": "bankAccount_guid",
						"type": "UTF8"
					},
					{
						"name": "bankAccount_label",
						"type": "UTF8"
					},
					{
						"name": "channel_guid",
						"type": "UTF8"
					},
					{
						"name": "channel_label",
						"type": "UTF8"
					},
					{
						"name": "channelType",
						"type": "UTF8"
					},
					{
						"name": "detail_guid",
						"type": "UTF8"
					},
					{
						"name": "extra_guid",
						"type": "UTF8"
					},
					{
						"name": "priceList",
						"type": "UTF8"
					},
					{
						"name": "event",
						"type": "UTF8"
					},
					{
						"name": "detailType",
						"type": "UTF8"
					},
					{
						"name": "detail_text",
						"type": "UTF8"
					},
					{
						"name": "detail_label",
						"type": "UTF8"
					},
					{
						"name": "detail_count",
						"type": "INT32"
					},
					{
						"name": "paymentDetail_guid",
						"type": "UTF8"
					},
					{
						"name": "detail_payingPartecipants",
						"type": "INT32"
					},
					{
						"name": "detail_quantity",
						"type": "INT32"
					},
					{
						"name": "tickets_quantity",
						"type": "INT32"
					},
					{
						"name": "pax_quantity",
						"type": "INT32"
					},
					{
						"name": "costCenter_guid",
						"type": "UTF8"
					},
					{
						"name": "costCenter_label",
						"type": "UTF8"
					},
					{
						"name": "object_receipt",
						"type": "INT32"
					},
					{
						"name": "object_taxCode",
						"type": "UTF8"
					},
					{
						"name": "object_taxNotes",
						"type": "UTF8"
					},
					{
						"name": "object_amount",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "object_taxPercentage",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "amount",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "amountNet",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "amountPresale",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "amountSold",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "amountPayed",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "amountPending",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "amountCanceled",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "externalId",
						"type": "UTF8"
					},
					{
						"name": "amountRefunded",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "invoiceSummary",
						"type": "UTF8"
					},
					{
						"name": "eventCalendar_guid",
						"type": "UTF8"
					},
					{
						"name": "passDetail_guid",
						"type": "UTF8"
					},
					{
						"name": "paymentCostCenter_guid",
						"type": "UTF8"
					},
					{
						"name": "organization_guid",
						"type": "UTF8"
					},
					{
						"name": "venue_guid",
						"type": "UTF8"
					},
					{
						"name": "olapUpdateTimestamp",
						"type": "DATE"
					},
					{
						"name": "row_id",
						"type": "UTF8"
					},
					{
						"name": "operationType",
						"type": "UTF8"
					},
					{
						"name": "operationTimestamp",
						"type": "TIMESTAMP_MILLIS"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Curated_Mida_Seals_Parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderPath": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Mida/Seals"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folderPath",
							"type": "Expression"
						},
						"fileSystem": "curated"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Curated_Mida_Temp_Parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderPath": {
						"type": "string",
						"defaultValue": "Mida2/Bookings/Temp"
					},
					"fileName": {
						"type": "string",
						"defaultValue": "temp_operation.parquet"
					}
				},
				"folder": {
					"name": "Mida2/Bookings"
				},
				"annotations": [
					"File temporaneo per operazioni atomiche - schema flessibile"
				],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folderPath",
							"type": "Expression"
						},
						"fileSystem": "curated"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Curated_Mida_Users_Parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderPath": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Mida/Users"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folderPath",
							"type": "Expression"
						},
						"fileSystem": "curated"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Curated_Mida_Validations_Parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderPath": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Mida/Validations"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folderPath",
							"type": "Expression"
						},
						"fileSystem": "curated"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Curated_Weather_Parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderPath": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Visual Crossing/Weather"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folderPath",
							"type": "Expression"
						},
						"fileSystem": "curated"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Curated_dummy')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Mida2/Bookings"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dummy.csv",
						"fileSystem": "curated"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "dummy",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Mida_Bookings_FTPServer_Binary')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_LS_Mida_FtpServer",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Mida/Bookings"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "FtpServerLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": "vendite"
					},
					"sheetName": "export",
					"firstRowAsHeader": true
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_LS_Mida_FtpServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Mida_Bookings_FTPServer_Folder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_LS_Mida_FtpServer",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Mida/Bookings"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "FtpServerLocation",
						"fileName": "*.xlsx",
						"folderPath": "vendite"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_LS_Mida_FtpServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Mida_Seals_FTPServer_Binary')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_LS_Mida_FtpServer",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Mida/Seals"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "FtpServerLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": "emissioni"
					},
					"sheetName": "Emissioni di ieri",
					"firstRowAsHeader": true
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_LS_Mida_FtpServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Mida_Seals_FTPServer_Folder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_LS_Mida_FtpServer",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Mida/Seals"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "FtpServerLocation",
						"folderPath": "emissioni"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_LS_Mida_FtpServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Mida_Validations_FTPServer_Binary')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_LS_Mida_FtpServer",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Mida/Validations"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "FtpServerLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": "vidimazioni"
					},
					"sheetName": "Vidimazioni di ieri",
					"firstRowAsHeader": true
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_LS_Mida_FtpServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Mida_Validations_FTPServer_Folder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_LS_Mida_FtpServer",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Mida/Validations"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "FtpServerLocation",
						"folderPath": "vidimazioni"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_LS_Mida_FtpServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Processed_AccessAreas_Parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Utils/AccessAreas"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": "utils/AccessAreas",
						"fileSystem": "processed"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Processed_Affluences_Parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderPath": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Affluences"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folderPath",
							"type": "Expression"
						},
						"fileSystem": "processed"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "site_id",
						"type": "UTF8"
					},
					{
						"name": "site_name",
						"type": "UTF8"
					},
					{
						"name": "date",
						"type": "DATE"
					},
					{
						"name": "hour",
						"type": "UTF8"
					},
					{
						"name": "occupancy",
						"type": "INT32"
					},
					{
						"name": "entries",
						"type": "INT32"
					},
					{
						"name": "exits",
						"type": "INT32"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Processed_DuomoWiFi_Connections_Parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"year": {
						"type": "string"
					},
					"month": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "WiFi/Processed"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@concat('Wifi/connections/', dataset().year, '/', dataset().month)",
							"type": "Expression"
						},
						"fileSystem": "processed"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "hotspotIdentifier",
						"type": "String"
					},
					{
						"name": "start",
						"type": "String"
					},
					{
						"name": "stop",
						"type": "String"
					},
					{
						"name": "duration",
						"type": "Int32"
					},
					{
						"name": "traffic",
						"type": "Int32"
					},
					{
						"name": "terminateCause",
						"type": "String"
					},
					{
						"name": "username",
						"type": "String"
					},
					{
						"name": "macAddressClient",
						"type": "String"
					},
					{
						"name": "ipAddressClient",
						"type": "String"
					},
					{
						"name": "locationId",
						"type": "String"
					},
					{
						"name": "customerId",
						"type": "String"
					},
					{
						"name": "sessionTime_minutes",
						"type": "Double"
					},
					{
						"name": "traffic_MB",
						"type": "Double"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Processed_DuomoWiFi_Users_Parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"year": {
						"type": "string"
					},
					"month": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "WiFi/Processed"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@concat('Wifi/users/', dataset().year, '/', dataset().month)",
							"type": "Expression"
						},
						"fileSystem": "processed"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "cid",
						"type": "String"
					},
					{
						"name": "username",
						"type": "String"
					},
					{
						"name": "firstName",
						"type": "String"
					},
					{
						"name": "lastName",
						"type": "String"
					},
					{
						"name": "email",
						"type": "String"
					},
					{
						"name": "gender",
						"type": "String"
					},
					{
						"name": "phone",
						"type": "String"
					},
					{
						"name": "birthDate",
						"type": "String"
					},
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "zipCode",
						"type": "String"
					},
					{
						"name": "wifiArea",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Processed_Mida_Bookings_Parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderPath": {
						"type": "String",
						"defaultValue": "Mida/Bookings/Processed/2025/01"
					},
					"fileName": {
						"type": "String",
						"defaultValue": "VFD_Mida_Processed_20250101.parquet\""
					}
				},
				"folder": {
					"name": "Mida/Bookings"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folderPath",
							"type": "Expression"
						},
						"fileSystem": "processed"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "guid_pk",
						"type": "UTF8"
					},
					{
						"name": "reservation_progressiveCode",
						"type": "UTF8"
					},
					{
						"name": "reservation_code",
						"type": "UTF8"
					},
					{
						"name": "reservation_status",
						"type": "INT32"
					},
					{
						"name": "invoiceRequired",
						"type": "UTF8"
					},
					{
						"name": "customer",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "visitDate",
						"type": "DATE"
					},
					{
						"name": "reservationPayment_guid",
						"type": "UTF8"
					},
					{
						"name": "parentPayment_guid",
						"type": "UTF8"
					},
					{
						"name": "sliced",
						"type": "UTF8"
					},
					{
						"name": "reservation_guid",
						"type": "UTF8"
					},
					{
						"name": "group_guid",
						"type": "UTF8"
					},
					{
						"name": "group_label",
						"type": "UTF8"
					},
					{
						"name": "group_email",
						"type": "UTF8"
					},
					{
						"name": "paymentCode",
						"type": "UTF8"
					},
					{
						"name": "paymentCondition",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "reservation_amount",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "reservation_amountTax",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "status",
						"type": "INT32"
					},
					{
						"name": "status_text",
						"type": "UTF8"
					},
					{
						"name": "stamp",
						"type": "UTF8"
					},
					{
						"name": "notes",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "transactionType",
						"type": "UTF8"
					},
					{
						"name": "transactionType_text",
						"type": "UTF8"
					},
					{
						"name": "paymentLimitDate",
						"type": "DATE"
					},
					{
						"name": "paymentDate",
						"type": "DATE"
					},
					{
						"name": "refund",
						"type": "UTF8"
					},
					{
						"name": "refunded",
						"type": "UTF8"
					},
					{
						"name": "convention_label",
						"type": "UTF8"
					},
					{
						"name": "receiptCode",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "insertTimestamp",
						"type": "DATE"
					},
					{
						"name": "updateTimestamp",
						"type": "DATE"
					},
					{
						"name": "owner",
						"type": "UTF8"
					},
					{
						"name": "owner_text",
						"type": "UTF8"
					},
					{
						"name": "sessionId",
						"type": "UTF8"
					},
					{
						"name": "terminal_label",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "terminalGroup_label",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "gateway_guid",
						"type": "UTF8"
					},
					{
						"name": "gateway_label",
						"type": "UTF8"
					},
					{
						"name": "transactionID",
						"type": "UTF8"
					},
					{
						"name": "bankAccount_guid",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "bankAccount_label",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "channel_guid",
						"type": "UTF8"
					},
					{
						"name": "channel_label",
						"type": "UTF8"
					},
					{
						"name": "channelType",
						"type": "UTF8"
					},
					{
						"name": "detail_guid",
						"type": "UTF8"
					},
					{
						"name": "extra_guid",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "priceList",
						"type": "UTF8"
					},
					{
						"name": "event",
						"type": "UTF8"
					},
					{
						"name": "detailType",
						"type": "UTF8"
					},
					{
						"name": "detail_text",
						"type": "UTF8"
					},
					{
						"name": "detail_label",
						"type": "UTF8"
					},
					{
						"name": "detail_count",
						"type": "INT32"
					},
					{
						"name": "paymentDetail_guid",
						"type": "UTF8"
					},
					{
						"name": "detail_payingPartecipants",
						"type": "INT32"
					},
					{
						"name": "detail_quantity",
						"type": "INT32"
					},
					{
						"name": "tickets_quantity",
						"type": "INT32"
					},
					{
						"name": "pax_quantity",
						"type": "INT32"
					},
					{
						"name": "costCenter_guid",
						"type": "UTF8"
					},
					{
						"name": "costCenter_label",
						"type": "UTF8"
					},
					{
						"name": "object_receipt",
						"type": "INT32"
					},
					{
						"name": "object_taxCode",
						"type": "UTF8"
					},
					{
						"name": "object_taxNotes",
						"type": "UTF8"
					},
					{
						"name": "object_amount",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "object_taxPercentage",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "amount",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "amountNet",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "amountPresale",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "amountSold",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "amountPayed",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "amountPending",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "amountCanceled",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "externalId",
						"type": "UTF8"
					},
					{
						"name": "amountRefunded",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "invoiceSummary",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "eventCalendar_guid",
						"type": "UTF8"
					},
					{
						"name": "passDetail_guid",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "paymentCostCenter_guid",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "organization_guid",
						"type": "UTF8"
					},
					{
						"name": "venue_guid",
						"type": "UTF8"
					},
					{
						"name": "olapUpdateTimestamp",
						"type": "DATE"
					},
					{
						"name": "row_id",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Processed_Mida_Seals_Parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderPath": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Mida/Seals"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folderPath",
							"type": "Expression"
						},
						"fileSystem": "processed"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Processed_Mida_Validations_Parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderPath": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Mida/Validations"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folderPath",
							"type": "Expression"
						},
						"fileSystem": "processed"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Processed_Weather_Parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderPath": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Visual Crossing/Weather"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folderPath",
							"type": "Expression"
						},
						"fileSystem": "processed"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Raw_AccessAreas_Excel')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Utils/AccessAreas"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Associazioni",
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": "utils/AccessAreas",
						"fileSystem": "raw"
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Raw_Affluences_CSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderPath": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Affluences"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folderPath",
							"type": "Expression"
						},
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "site_id",
						"type": "String"
					},
					{
						"name": "site_name",
						"type": "String"
					},
					{
						"name": "date",
						"type": "String"
					},
					{
						"name": "hour",
						"type": "String"
					},
					{
						"name": "occupancy",
						"type": "String"
					},
					{
						"name": "entries",
						"type": "String"
					},
					{
						"name": "exits",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Raw_Affluences_JSON')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderPath": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Affluences"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folderPath",
							"type": "Expression"
						},
						"fileSystem": "raw"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"data": {
							"type": "object",
							"properties": {
								"results": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"day": {
												"type": "string"
											},
											"entries": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"hour": {
															"type": "string"
														},
														"occupancy": {
															"type": "integer"
														},
														"entries": {
															"type": "integer"
														},
														"exits": {
															"type": "integer"
														}
													}
												}
											}
										}
									}
								},
								"site_id": {
									"type": "string"
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Raw_DuomoWiFi_Connections_JSON')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"year": {
						"type": "string"
					},
					"month": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "WiFi/Raw"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@concat('Wifi/connections/', dataset().year, '/', dataset().month)",
							"type": "Expression"
						},
						"fileSystem": "raw"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"generated": {
							"type": "string"
						},
						"sId": {
							"type": "string"
						},
						"count": {
							"type": "integer"
						},
						"connections": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"customerId": {
										"type": "string"
									},
									"username": {
										"type": "string"
									},
									"organizationId": {
										"type": "string"
									},
									"start": {
										"type": "string"
									},
									"startBusiness": {
										"type": "string"
									},
									"stop": {
										"type": "string"
									},
									"stopBusiness": {
										"type": "string"
									},
									"duration": {
										"type": "integer"
									},
									"traffic": {
										"type": "integer"
									},
									"locationName": {
										"type": "string"
									},
									"locationId": {
										"type": "string"
									},
									"hotspotIdentifier": {
										"type": "string"
									},
									"hotspotId": {
										"type": "string"
									},
									"latitude": {
										"type": "number"
									},
									"longitude": {
										"type": "number"
									},
									"macAddressClient": {
										"type": "string"
									},
									"ipAddressClient": {
										"type": "string"
									},
									"terminateCause": {
										"type": "string"
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Raw_DuomoWiFi_Users_JSON')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "string"
					},
					"year": {
						"type": "string"
					},
					"month": {
						"type": "string"
					}
				},
				"folder": {
					"name": "WiFi/Raw"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@concat('Wifi/users/', dataset().year, '/', dataset().month)",
							"type": "Expression"
						},
						"fileSystem": "raw"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Raw_Mida_Bookings_Binary')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderPath": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Mida/Bookings"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folderPath",
							"type": "Expression"
						},
						"fileSystem": "raw"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Raw_Mida_Bookings_Excel')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderPath": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Mida/Bookings"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "export",
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folderPath",
							"type": "Expression"
						},
						"fileSystem": "raw"
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Raw_Mida_Bookings_Folder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderPath": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Mida/Bookings"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().folderPath",
							"type": "Expression"
						},
						"fileSystem": "raw"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Raw_Mida_Seals_Binary')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderPath": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Mida/Seals"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folderPath",
							"type": "Expression"
						},
						"fileSystem": "raw"
					},
					"sheetName": "Emissioni di ieri",
					"firstRowAsHeader": true
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Raw_Mida_Seals_Excel')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderPath": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Mida/Seals"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Emissioni di ieri",
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folderPath",
							"type": "Expression"
						},
						"fileSystem": "raw"
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Raw_Mida_Validations_Binary')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderPath": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Mida/Validations"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folderPath",
							"type": "Expression"
						},
						"fileSystem": "raw"
					},
					"sheetName": "Vidimazioni di ieri",
					"firstRowAsHeader": true
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Raw_Mida_Validations_Excel')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderPath": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Mida/Validations"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Vidimazioni di ieri",
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folderPath",
							"type": "Expression"
						},
						"fileSystem": "raw"
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Raw_Weather_CSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderPath": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Visual Crossing/Weather"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folderPath",
							"type": "Expression"
						},
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_Temp_Affluences_JSON')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_Big_Data_DL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Affluences"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": "temp/affluences",
						"fileSystem": "staging"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"data": {
							"type": "object",
							"properties": {
								"results": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"day": {
												"type": "string"
											},
											"entries": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"hour": {
															"type": "string"
														},
														"occupancy": {
															"type": "integer"
														},
														"entries": {
															"type": "integer"
														},
														"exits": {
															"type": "integer"
														}
													}
												}
											}
										}
									}
								},
								"site_id": {
									"type": "string"
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_VisualCrossing_HTTP_CSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_LS_VisualCrossing_HTTP",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"data_inizio": {
						"type": "string"
					},
					"data_fine": {
						"type": "string"
					},
					"location": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Visual Crossing/Weather"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "@concat(dataset().location,'/',dataset().data_inizio,'/',dataset().data_fine,'?unitGroup=metric&elements=datetime%2Cname%2Ctempmax%2Ctempmin%2Ctemp%2Cfeelslikemax%2Cfeelslikemin%2Cfeelslike%2Chumidity%2Cprecip%2Cpreciptype%2Cwindgust%2Cwindspeed%2Ccloudcover%2Cvisibility%2Csunset%2Cconditions%2Cdescription%2Cicon&include=days%2C&key=K8ZWJUA9BMDLD97KL8KGY292Y&contentType=csv')",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"rowDelimiter": "\n",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_LS_VisualCrossing_HTTP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DS_VisualCrossing_Historical_API')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VFD_LS_VisualCrossing_API",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"data_inizio": {
						"type": "string"
					},
					"data_fine": {
						"type": "string"
					},
					"location": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Visual Crossing/Weather"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@concat(dataset().location,'/',dataset().data_inizio,'/',dataset().data_fine,'?unitGroup=metric&elements=datetime%2Cname%2Ctempmax%2Ctempmin%2Ctemp%2Cfeelslikemax%2Cfeelslikemin%2Cfeelslike%2Chumidity%2Cprecip%2Cpreciptype%2Cwindgust%2Cwindspeed%2Ccloudcover%2Cvisibility%2Csunset%2Cconditions%2Cdescription%2Cicon&include=days%2C&key=K8ZWJUA9BMDLD97KL8KGY292Y&contentType=csv')",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_LS_VisualCrossing_API')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_Big_Data_DL')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Data Lake per la raccolta di tutti i dati da analizzare e utilizzare per la creazione delle dashboard.",
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('VFD_Big_Data_DL_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('VFD_Big_Data_DL_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "VFD-IR-DataflowExecution",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/VFD-IR-DataflowExecution')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_LS_Affluences_API')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('VFD_LS_Affluences_API_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_LS_Cloud4Wi_API')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('VFD_LS_Cloud4Wi_API_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_LS_Mida_FtpServer')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "FtpServer",
				"typeProperties": {
					"host": "[parameters('VFD_LS_Mida_FtpServer_properties_typeProperties_host')]",
					"port": "52013",
					"enableSsl": false,
					"enableServerCertificateValidation": false,
					"authenticationType": "Basic",
					"userName": "[parameters('VFD_LS_Mida_FtpServer_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('VFD_LS_Mida_FtpServer_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_LS_VisualCrossing_API')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Linked service per le API di Visual Crossing per i dati meteo",
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('VFD_LS_VisualCrossing_API_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_LS_VisualCrossing_HTTP')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('VFD_LS_VisualCrossing_HTTP_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_TRG_Affluences_Daily')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "VFD_PL_Affluences_Daily_v2",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2025-06-11T06:00:00",
						"timeZone": "W. Europe Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/VFD_PL_Affluences_Daily_v2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_TRG_Mida_Bookings_FTP_Schedule')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "VFD_PL_Mida",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2025-07-11T04:00:00",
						"timeZone": "W. Europe Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/VFD_PL_Mida')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_TRG_Weather_API_Daily')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "VFD_PL_Weather_API_Daily",
							"type": "PipelineReference"
						},
						"parameters": {
							"location": "[parameters('VFD_TRG_Weather_API_Daily_properties_VFD_PL_Weather_API_Daily_parameters_location')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2025-07-05T06:00:00",
						"timeZone": "W. Europe Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/VFD_PL_Weather_API_Daily')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_TRG_WiFi_Daily')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "VFD_PL_DuomoWiFi_Daily",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2025-07-11T16:00:00",
						"timeZone": "W. Europe Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								4
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/VFD_PL_DuomoWiFi_Daily')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IRTest')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "Central US",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 10,
							"cleanup": false,
							"customProperties": []
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD-IR-DataflowExecution')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"description": "IR dedicated to the execution of VFD dataflows and transformation",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 10,
							"cleanup": false,
							"customProperties": []
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CFD_DFL_Mida2_test2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Test"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Complete_Parquet",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Complete_Parquet",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     param_string as string,",
						"     param_int as integer,",
						"     param_date as string",
						"}",
						"source(output(",
						"          guid_pk as string,",
						"          reservation_progressiveCode as string,",
						"          reservation_code as string,",
						"          reservation_status as integer,",
						"          invoiceRequired as string,",
						"          customer as decimal(10,2),",
						"          visitDate as date,",
						"          reservationPayment_guid as string,",
						"          parentPayment_guid as string,",
						"          sliced as string,",
						"          reservation_guid as string,",
						"          group_guid as string,",
						"          group_label as string,",
						"          group_email as string,",
						"          paymentCode as string,",
						"          paymentCondition as decimal(10,2),",
						"          reservation_amount as decimal(10,2),",
						"          reservation_amountTax as decimal(10,2),",
						"          status as integer,",
						"          status_text as string,",
						"          stamp as string,",
						"          notes as string,",
						"          transactionType as string,",
						"          transactionType_text as string,",
						"          paymentLimitDate as date,",
						"          paymentDate as date,",
						"          refund as string,",
						"          refunded as string,",
						"          convention_label as string,",
						"          receiptCode as string,",
						"          insertTimestamp as date,",
						"          updateTimestamp as date,",
						"          owner as string,",
						"          owner_text as string,",
						"          sessionId as string,",
						"          terminal_label as string,",
						"          terminalGroup_label as string,",
						"          gateway_guid as string,",
						"          gateway_label as string,",
						"          transactionID as string,",
						"          bankAccount_guid as string,",
						"          bankAccount_label as string,",
						"          channel_guid as string,",
						"          channel_label as string,",
						"          channelType as string,",
						"          detail_guid as string,",
						"          extra_guid as string,",
						"          priceList as string,",
						"          event as string,",
						"          detailType as string,",
						"          detail_text as string,",
						"          detail_label as string,",
						"          detail_count as integer,",
						"          paymentDetail_guid as string,",
						"          detail_payingPartecipants as integer,",
						"          detail_quantity as integer,",
						"          tickets_quantity as integer,",
						"          pax_quantity as integer,",
						"          costCenter_guid as string,",
						"          costCenter_label as string,",
						"          object_receipt as integer,",
						"          object_taxCode as string,",
						"          object_taxNotes as string,",
						"          object_amount as decimal(10,2),",
						"          object_taxPercentage as decimal(10,2),",
						"          amount as decimal(10,2),",
						"          amountNet as decimal(10,2),",
						"          amountPresale as decimal(10,2),",
						"          amountSold as decimal(10,2),",
						"          amountPayed as decimal(10,2),",
						"          amountPending as decimal(10,2),",
						"          amountCanceled as decimal(10,2),",
						"          externalId as string,",
						"          amountRefunded as decimal(10,2),",
						"          invoiceSummary as string,",
						"          eventCalendar_guid as string,",
						"          passDetail_guid as string,",
						"          paymentCostCenter_guid as string,",
						"          organization_guid as string,",
						"          venue_guid as string,",
						"          olapUpdateTimestamp as date,",
						"          row_id as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: true,",
						"     ignoreNoFilesFound: true,",
						"     format: 'parquet') ~> source1",
						"source1 derive(reservation_code = $param_string,",
						"          reservation_status = $param_int,",
						"          visitDate = toDate($param_date)) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          guid_pk as string,",
						"          reservation_progressiveCode as string,",
						"          reservation_code as string,",
						"          reservation_status as integer,",
						"          invoiceRequired as string,",
						"          customer as decimal(10,2),",
						"          visitDate as date,",
						"          reservationPayment_guid as string,",
						"          parentPayment_guid as string,",
						"          sliced as string,",
						"          reservation_guid as string,",
						"          group_guid as string,",
						"          group_label as string,",
						"          group_email as string,",
						"          paymentCode as string,",
						"          paymentCondition as decimal(10,2),",
						"          reservation_amount as decimal(10,2),",
						"          reservation_amountTax as decimal(10,2),",
						"          status as integer,",
						"          status_text as string,",
						"          stamp as string,",
						"          notes as string,",
						"          transactionType as string,",
						"          transactionType_text as string,",
						"          paymentLimitDate as date,",
						"          paymentDate as date,",
						"          refund as string,",
						"          refunded as string,",
						"          convention_label as string,",
						"          receiptCode as string,",
						"          insertTimestamp as date,",
						"          updateTimestamp as date,",
						"          owner as string,",
						"          owner_text as string,",
						"          sessionId as string,",
						"          terminal_label as string,",
						"          terminalGroup_label as string,",
						"          gateway_guid as string,",
						"          gateway_label as string,",
						"          transactionID as string,",
						"          bankAccount_guid as string,",
						"          bankAccount_label as string,",
						"          channel_guid as string,",
						"          channel_label as string,",
						"          channelType as string,",
						"          detail_guid as string,",
						"          extra_guid as string,",
						"          priceList as string,",
						"          event as string,",
						"          detailType as string,",
						"          detail_text as string,",
						"          detail_label as string,",
						"          detail_count as integer,",
						"          paymentDetail_guid as string,",
						"          detail_payingPartecipants as integer,",
						"          detail_quantity as integer,",
						"          tickets_quantity as integer,",
						"          pax_quantity as integer,",
						"          costCenter_guid as string,",
						"          costCenter_label as string,",
						"          object_receipt as integer,",
						"          object_taxCode as string,",
						"          object_taxNotes as string,",
						"          object_amount as decimal(10,2),",
						"          object_taxPercentage as decimal(10,2),",
						"          amount as decimal(10,2),",
						"          amountNet as decimal(10,2),",
						"          amountPresale as decimal(10,2),",
						"          amountSold as decimal(10,2),",
						"          amountPayed as decimal(10,2),",
						"          amountPending as decimal(10,2),",
						"          amountCanceled as decimal(10,2),",
						"          externalId as string,",
						"          amountRefunded as decimal(10,2),",
						"          invoiceSummary as string,",
						"          eventCalendar_guid as string,",
						"          passDetail_guid as string,",
						"          paymentCostCenter_guid as string,",
						"          organization_guid as string,",
						"          venue_guid as string,",
						"          olapUpdateTimestamp as date,",
						"          row_id as string",
						"     ),",
						"     format: 'parquet',",
						"     partitionFileNames:['test.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Mida_Bookings_Complete_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Affluences_Daily_to_Curated')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Affluences"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Processed_Affluences_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceProcessed"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Affluences_Daily_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkCuratedDaily"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          site_id as string,",
						"          site_name as string,",
						"          date as date,",
						"          hour as string,",
						"          occupancy as integer,",
						"          entries as integer,",
						"          exits as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceProcessed",
						"SourceProcessed sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          site_id as string,",
						"          site_name as string,",
						"          date as date,",
						"          hour as string,",
						"          occupancy as integer,",
						"          entries as integer,",
						"          exits as integer",
						"     ),",
						"     format: 'parquet',",
						"     partitionFileNames:['VFD_DFL_Affluences_Daily_to_Curated_output.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1),",
						"     compressionCodec: 'snappy') ~> SinkCuratedDaily"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Processed_Affluences_Parquet')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Affluences_Daily_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Affluences_JSON_to_Processed')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Affluences"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Raw_Affluences_JSON",
								"type": "DatasetReference"
							},
							"name": "SourceJSON"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Processed_Affluences_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkProcessed"
						}
					],
					"transformations": [
						{
							"name": "FlattenJSON"
						},
						{
							"name": "ExpandEntries"
						},
						{
							"name": "AddSiteName"
						},
						{
							"name": "ConvertTypes"
						}
					],
					"scriptLines": [
						"parameters{",
						"     year as string,",
						"     month as string,",
						"     dateFormatted as string",
						"}",
						"source(output(",
						"          data as (results as (day as string, entries as (hour as string, occupancy as integer, entries as integer, exits as integer)[])[], site_id as string)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine',",
						"     wildcardPaths:[(concat(\"/Affluences/\",$year,\"/\",$month,\"/VFD_Affluences_\",$dateFormatted,\"_*.json\"))]) ~> SourceJSON",
						"SourceJSON foldDown(unroll(data.results, data.results),",
						"     mapColumn(",
						"          day = data.results.day,",
						"          entries = data.results.entries,",
						"          site_uuid = data.site_id",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenJSON",
						"FlattenJSON foldDown(unroll(entries, entries),",
						"     mapColumn(",
						"          site_uuid,",
						"          day,",
						"          hour = entries.hour,",
						"          occupancy = entries.occupancy,",
						"          entries_count = entries.entries,",
						"          exits_count = entries.exits",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> ExpandEntries",
						"ExpandEntries derive(site_name = case(",
						"     site_uuid == '5a2757bc-e1c6-4d5e-9db3-edfc4e9c9307', 'Terrazze',",
						"     site_uuid == 'ca2dae61-4a99-4cb7-8051-26cb852ea408', 'Ascensore Nord',",
						"     site_uuid == 'aa6c22f1-84b6-441a-bbb0-bd429e63536d', 'Ascensore Sud',",
						"     site_uuid == '8358df5f-0186-4a11-87ad-11fc19cda749', 'Salita a piedi',",
						"     site_uuid == '639bc326-010a-402f-ba5f-3c75e2740d9d', 'Discesa a piedi',",
						"     'Unknown'",
						")) ~> AddSiteName",
						"AddSiteName derive(date = toDate(day, 'yyyy-MM-dd'),",
						"          site_id = site_uuid) ~> ConvertTypes",
						"ConvertTypes sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          site_id as string,",
						"          site_name as string,",
						"          date as date,",
						"          hour as string,",
						"          occupancy as integer,",
						"          entries as integer,",
						"          exits as integer",
						"     ),",
						"     format: 'parquet',",
						"     partitionFileNames:['VFD_DFL_Affluences_JSON_to_Processed_output.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          site_id,",
						"          site_name,",
						"          date,",
						"          hour,",
						"          occupancy,",
						"          entries = entries_count,",
						"          exits = exits_count",
						"     ),",
						"     partitionBy('hash', 1),",
						"     folderPath: concat(\"Affluences/\", $year, \"/\", $month),",
						"     compressionCodec: 'snappy') ~> SinkProcessed"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Raw_Affluences_JSON')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Processed_Affluences_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Affluences_Monthly_Aggregation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Affluences"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Processed_Affluences_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceNewData"
						},
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Affluences_Monthly_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceExistingMonthly"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Affluences_Monthly_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkMonthly"
						}
					],
					"transformations": [
						{
							"name": "FilterEntryPoints"
						},
						{
							"name": "CleanSiteNames"
						},
						{
							"name": "AggregateByDate"
						},
						{
							"name": "FilterTerrazze"
						},
						{
							"name": "MaxOccupancyOnly"
						},
						{
							"name": "JoinWithMax"
						},
						{
							"name": "FilterMaxOccupancy"
						},
						{
							"name": "MaxOccupancyByDate"
						},
						{
							"name": "PivotEntries"
						},
						{
							"name": "CalculateTotals"
						},
						{
							"name": "JoinAggregations"
						},
						{
							"name": "CleanJoinOutput"
						},
						{
							"name": "GetCurrentDateFromNew"
						},
						{
							"name": "FilterExistingData"
						},
						{
							"name": "UnionWithExisting"
						}
					],
					"scriptLines": [
						"source(output(",
						"          site_id as string,",
						"          site_name as string,",
						"          date as date,",
						"          hour as string,",
						"          occupancy as integer,",
						"          entries as integer,",
						"          exits as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceNewData",
						"source(output(",
						"          date as date,",
						"          total_entries as integer,",
						"          ascensore_nord_entries as integer,",
						"          ascensore_sud_entries as integer,",
						"          salita_piedi_entries as integer,",
						"          discesa_piedi_entries as integer,",
						"          max_occupancy as integer,",
						"          max_occupancy_hour as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     format: 'parquet') ~> SourceExistingMonthly",
						"SourceNewData filter(site_name == 'Ascensore Nord' || site_name == 'Ascensore Sud' || site_name == 'Salita a piedi' || site_name == 'Discesa a piedi') ~> FilterEntryPoints",
						"FilterEntryPoints derive(site_name_clean = case(",
						"     site_name == 'Ascensore Nord', 'AscensoreNord',",
						"     site_name == 'Ascensore Sud', 'AscensoreSud',",
						"     site_name == 'Salita a piedi', 'SalitaPiedi',",
						"     site_name == 'Discesa a piedi', 'DiscesaPiedi',",
						"     site_name",
						")) ~> CleanSiteNames",
						"CleanSiteNames aggregate(groupBy(date,",
						"          site_name_clean),",
						"     entries_sum = sum(entries)) ~> AggregateByDate",
						"SourceNewData filter(site_name == 'Terrazze') ~> FilterTerrazze",
						"FilterTerrazze aggregate(groupBy(date),",
						"     max_occupancy = max(occupancy)) ~> MaxOccupancyOnly",
						"FilterTerrazze, MaxOccupancyOnly join(SourceNewData@date == MaxOccupancyOnly@date,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinWithMax",
						"JoinWithMax filter(occupancy == max_occupancy) ~> FilterMaxOccupancy",
						"FilterMaxOccupancy aggregate(groupBy(SourceNewData@date,",
						"          max_occupancy),",
						"     max_occupancy_hour = first(hour)) ~> MaxOccupancyByDate",
						"AggregateByDate pivot(groupBy(date),",
						"     pivotBy(site_name_clean, ['AscensoreNord', 'AscensoreSud', 'SalitaPiedi', 'DiscesaPiedi']),",
						"     entries_sum = sum(entries_sum),",
						"     columnNaming: '$N$V',",
						"     lateral: true) ~> PivotEntries",
						"PivotEntries derive(ascensore_nord_entries = coalesce(entries_sumAscensoreNord, 0),",
						"          ascensore_sud_entries = coalesce(entries_sumAscensoreSud, 0),",
						"          salita_piedi_entries = coalesce(entries_sumSalitaPiedi, 0),",
						"          discesa_piedi_entries = coalesce(entries_sumDiscesaPiedi, 0),",
						"          total_entries = coalesce(entries_sumAscensoreNord, 0) + coalesce(entries_sumAscensoreSud, 0) + coalesce(entries_sumSalitaPiedi, 0) + coalesce(entries_sumDiscesaPiedi, 0)) ~> CalculateTotals",
						"CalculateTotals, MaxOccupancyByDate join(PivotEntries@date == MaxOccupancyByDate@date,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinAggregations",
						"JoinAggregations select(mapColumn(",
						"          date = PivotEntries@date,",
						"          total_entries,",
						"          ascensore_nord_entries,",
						"          ascensore_sud_entries,",
						"          salita_piedi_entries,",
						"          discesa_piedi_entries,",
						"          max_occupancy,",
						"          max_occupancy_hour",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> CleanJoinOutput",
						"CleanJoinOutput derive(current_date_value = date) ~> GetCurrentDateFromNew",
						"SourceExistingMonthly, GetCurrentDateFromNew exists(SourceExistingMonthly@date == current_date_value,",
						"     negate:true,",
						"     broadcast: 'auto')~> FilterExistingData",
						"FilterExistingData, CleanJoinOutput union(byName: true,",
						"     partitionBy('hash', 1))~> UnionWithExisting",
						"UnionWithExisting sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          date as date,",
						"          total_entries as integer,",
						"          ascensore_nord_entries as integer,",
						"          ascensore_sud_entries as integer,",
						"          salita_piedi_entries as integer,",
						"          discesa_piedi_entries as integer,",
						"          max_occupancy as integer,",
						"          max_occupancy_hour as string",
						"     ),",
						"     format: 'parquet',",
						"     partitionFileNames:['VFD_DFL_Affluences_Monthly_Aggregation_output.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1),",
						"     compressionCodec: 'snappy') ~> SinkMonthly"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Processed_Affluences_Parquet')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Affluences_Monthly_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_DuomoWiFi_Connections_Raw_Processed')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Trasforma connessioni da JSON Raw a Parquet Processed con calcoli e conversioni",
				"folder": {
					"name": "WiFi"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Raw_DuomoWiFi_Connections_JSON",
								"type": "DatasetReference"
							},
							"name": "SourceConnectionsJSON"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Processed_DuomoWiFi_Connections_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkConnectionsParquet"
						}
					],
					"transformations": [
						{
							"name": "FlattenData"
						},
						{
							"name": "DerivedColumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          generated as string,",
						"          sId as string,",
						"          count as integer,",
						"          connections as (customerId as string, username as string, organizationId as string, start as string, startBusiness as string, stop as string, stopBusiness as string, duration as integer, traffic as integer, locationName as string, locationId as string, hotspotIdentifier as string, hotspotId as string, latitude as double, longitude as double, macAddressClient as string, ipAddressClient as string, terminateCause as string)[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> SourceConnectionsJSON",
						"SourceConnectionsJSON foldDown(unroll(connections),",
						"     mapColumn(",
						"          hotspotIdentifier = connections.hotspotIdentifier,",
						"          start = connections.start,",
						"          stop = connections.stop,",
						"          duration = connections.duration,",
						"          traffic = connections.traffic,",
						"          terminateCause = connections.terminateCause,",
						"          username = connections.username,",
						"          macAddressClient = connections.macAddressClient,",
						"          ipAddressClient = connections.ipAddressClient,",
						"          locationId = connections.locationId,",
						"          customerId = connections.customerId",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenData",
						"FlattenData derive(sessionTime_minutes = duration / 60,",
						"          traffic_MB = traffic / (1024 * 1024)) ~> DerivedColumns",
						"DerivedColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          hotspotIdentifier as string,",
						"          start as string,",
						"          stop as string,",
						"          duration as integer,",
						"          traffic as integer,",
						"          terminateCause as string,",
						"          username as string,",
						"          macAddressClient as string,",
						"          ipAddressClient as string,",
						"          locationId as string,",
						"          customerId as string,",
						"          sessionTime_minutes as double,",
						"          traffic_MB as double",
						"     ),",
						"     format: 'parquet',",
						"     partitionFileNames:['VFD_DFL_DuomoWiFi_Connections_Raw_Processed_output.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     partitionBy('hash', 1),",
						"     compressionCodec: 'snappy') ~> SinkConnectionsParquet"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Raw_DuomoWiFi_Connections_JSON')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Processed_DuomoWiFi_Connections_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_DuomoWiFi_Processed_Curated')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Esegue left join tra connessioni e utenti per creare dataset arricchito",
				"folder": {
					"name": "WiFi"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Processed_DuomoWiFi_Connections_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceConnections"
						},
						{
							"dataset": {
								"referenceName": "VFD_DS_Processed_DuomoWiFi_Users_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceUsers"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_DuomoWiFi_Enriched_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkEnrichedData"
						}
					],
					"transformations": [
						{
							"name": "LeftJoinConnectionsUsers"
						},
						{
							"name": "SelectAndRenameColumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          hotspotIdentifier as string,",
						"          start as string,",
						"          stop as string,",
						"          duration as integer,",
						"          traffic as integer,",
						"          terminateCause as string,",
						"          username as string,",
						"          macAddressClient as string,",
						"          ipAddressClient as string,",
						"          locationId as string,",
						"          customerId as string,",
						"          sessionTime_minutes as double,",
						"          traffic_MB as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceConnections",
						"source(output(",
						"          cid as string,",
						"          username as string,",
						"          firstName as string,",
						"          lastName as string,",
						"          email as string,",
						"          gender as string,",
						"          phone as string,",
						"          birthDate as string,",
						"          country as string,",
						"          zipCode as string,",
						"          wifiArea as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceUsers",
						"SourceConnections, SourceUsers join(SourceConnections@username == SourceUsers@username,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> LeftJoinConnectionsUsers",
						"LeftJoinConnectionsUsers select(mapColumn(",
						"          hotspotIdentifier,",
						"          start,",
						"          stop,",
						"          duration,",
						"          traffic,",
						"          terminateCause,",
						"          username = SourceConnections@username,",
						"          macAddressClient,",
						"          ipAddressClient,",
						"          locationId,",
						"          customerId,",
						"          sessionTime_minutes,",
						"          traffic_MB,",
						"          user_cid = cid,",
						"          user_firstName = firstName,",
						"          user_lastName = lastName,",
						"          user_email = email,",
						"          user_gender = gender,",
						"          user_phone = phone,",
						"          user_birthDate = birthDate,",
						"          user_country = country,",
						"          user_zipCode = zipCode,",
						"          user_wifiArea = wifiArea",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> SelectAndRenameColumns",
						"SelectAndRenameColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          hotspotIdentifier as string,",
						"          start as string,",
						"          stop as string,",
						"          duration as integer,",
						"          traffic as integer,",
						"          terminateCause as string,",
						"          username as string,",
						"          macAddressClient as string,",
						"          ipAddressClient as string,",
						"          locationId as string,",
						"          customerId as string,",
						"          sessionTime_minutes as double,",
						"          traffic_MB as double,",
						"          user_firstName as string,",
						"          user_lastName as string,",
						"          user_email as string,",
						"          user_gender as string,",
						"          user_phone as string,",
						"          user_birthDate as string,",
						"          user_country as string,",
						"          user_zipCode as string,",
						"          user_wifiArea as string",
						"     ),",
						"     format: 'parquet',",
						"     partitionFileNames:['VFD_DFL_DuomoWiFi_Processed_Curated_output.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     partitionBy('hash', 1),",
						"     compressionCodec: 'snappy') ~> SinkEnrichedData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Processed_DuomoWiFi_Connections_Parquet')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Processed_DuomoWiFi_Users_Parquet')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_DuomoWiFi_Enriched_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_DuomoWiFi_Users_Raw_Processed')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Consolida tutti i file JSON degli utenti in un singolo file Parquet",
				"folder": {
					"name": "WiFi"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Raw_DuomoWiFi_Users_JSON",
								"type": "DatasetReference"
							},
							"name": "SourceUsersJSON"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Processed_DuomoWiFi_Users_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkUsersParquet"
						}
					],
					"transformations": [
						{
							"name": "FlattenUserData"
						}
					],
					"scriptLines": [
						"parameters{",
						"     year as string,",
						"     month as string",
						"}",
						"source(output(",
						"          count as integer,",
						"          scrollId as string,",
						"          customers as (cid as string, username as string, firstName as string, lastName as string, email as string, gender as string, phone as string, birthDate as string, country as string, zipCode as string, wifiArea as string)[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine',",
						"     wildcardPaths:[(concat(\"/Wifi/users/\", $year, \"/\", $month, \"/VFD_Wifi_user_*.json\"))]) ~> SourceUsersJSON",
						"SourceUsersJSON foldDown(unroll(customers),",
						"     mapColumn(",
						"          cid = customers.cid,",
						"          username = customers.username,",
						"          firstName = customers.firstName,",
						"          lastName = customers.lastName,",
						"          email = customers.email,",
						"          gender = customers.gender,",
						"          phone = customers.phone,",
						"          birthDate = customers.birthDate,",
						"          country = customers.country,",
						"          zipCode = customers.zipCode,",
						"          wifiArea = customers.wifiArea",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenUserData",
						"FlattenUserData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          cid as string,",
						"          username as string,",
						"          firstName as string,",
						"          lastName as string,",
						"          email as string,",
						"          gender as string,",
						"          phone as string,",
						"          birthDate as string,",
						"          country as string,",
						"          zipCode as string,",
						"          wifiArea as string",
						"     ),",
						"     format: 'parquet',",
						"     partitionFileNames:['VFD_DFL_DuomoWiFi_Users_Raw_Processed_output.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     partitionBy('hash', 1),",
						"     compressionCodec: 'snappy') ~> SinkUsersParquet"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Raw_DuomoWiFi_Users_JSON')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Processed_DuomoWiFi_Users_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida2_Atomic_APPEND_Booking_Complete')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_dummy",
								"type": "DatasetReference"
							},
							"name": "DummySource"
						},
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Complete_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceExistingContent"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkTemp"
						}
					],
					"transformations": [
						{
							"name": "CreateNewRecord"
						},
						{
							"name": "SelectNewColumns"
						},
						{
							"name": "UnionAllRecords"
						}
					],
					"scriptLines": [
						"parameters{",
						"     guid_pk as string,",
						"     reservation_progressiveCode as string,",
						"     reservation_code as string,",
						"     reservation_status as integer,",
						"     invoiceRequired as string,",
						"     customer as decimal(10,2),",
						"     visitDate as string,",
						"     reservationPayment_guid as string,",
						"     parentPayment_guid as string,",
						"     sliced as string,",
						"     reservation_guid as string,",
						"     group_guid as string,",
						"     group_label as string,",
						"     group_email as string,",
						"     paymentCode as string,",
						"     paymentCondition as decimal(10,2),",
						"     reservation_amount as decimal(10,2),",
						"     reservation_amountTax as decimal(10,2),",
						"     status as integer,",
						"     status_text as string,",
						"     stamp as string,",
						"     notes as string,",
						"     transactionType as string,",
						"     transactionType_text as string,",
						"     paymentLimitDate as string,",
						"     paymentDate as string,",
						"     refund as string,",
						"     refunded as string,",
						"     convention_label as string,",
						"     receiptCode as string,",
						"     insertTimestamp as string,",
						"     updateTimestamp as string,",
						"     owner as string,",
						"     owner_text as string,",
						"     sessionId as string,",
						"     terminal_label as string,",
						"     terminalGroup_label as string,",
						"     gateway_guid as string,",
						"     gateway_label as string,",
						"     transactionID as string,",
						"     bankAccount_guid as string,",
						"     bankAccount_label as string,",
						"     channel_guid as string,",
						"     channel_label as string,",
						"     channelType as string,",
						"     detail_guid as string,",
						"     extra_guid as string,",
						"     priceList as string,",
						"     event as string,",
						"     detailType as string,",
						"     detail_text as string,",
						"     detail_label as string,",
						"     detail_count as integer,",
						"     paymentDetail_guid as string,",
						"     detail_payingPartecipants as integer,",
						"     detail_quantity as integer,",
						"     tickets_quantity as integer,",
						"     pax_quantity as integer,",
						"     costCenter_guid as string,",
						"     costCenter_label as string,",
						"     object_receipt as integer,",
						"     object_taxCode as string,",
						"     object_taxNotes as string,",
						"     object_amount as decimal(10,2),",
						"     object_taxPercentage as decimal(10,2),",
						"     amount as decimal(10,2),",
						"     amountNet as decimal(10,2),",
						"     amountPresale as decimal(10,2),",
						"     amountSold as decimal(10,2),",
						"     amountPayed as decimal(10,2),",
						"     amountPending as decimal(10,2),",
						"     amountCanceled as decimal(10,2),",
						"     externalId as string,",
						"     amountRefunded as decimal(10,2),",
						"     invoiceSummary as string,",
						"     eventCalendar_guid as string,",
						"     passDetail_guid as string,",
						"     paymentCostCenter_guid as string,",
						"     organization_guid as string,",
						"     venue_guid as string,",
						"     olapUpdateTimestamp as string,",
						"     row_id as string",
						"}",
						"source(output(",
						"          dummy as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     data: 'dummy\\n1') ~> DummySource",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceExistingContent",
						"DummySource derive(guid_pk = $guid_pk,",
						"          reservation_progressiveCode = $reservation_progressiveCode,",
						"          reservation_code = $reservation_code,",
						"          reservation_status = $reservation_status,",
						"          invoiceRequired = $invoiceRequired,",
						"          customer = $customer,",
						"          visitDate = toDate($visitDate, 'yyyy-MM-dd'),",
						"          reservationPayment_guid = $reservationPayment_guid,",
						"          parentPayment_guid = $parentPayment_guid,",
						"          sliced = $sliced,",
						"          reservation_guid = $reservation_guid,",
						"          group_guid = $group_guid,",
						"          group_label = $group_label,",
						"          group_email = $group_email,",
						"          paymentCode = $paymentCode,",
						"          paymentCondition = $paymentCondition,",
						"          reservation_amount = $reservation_amount,",
						"          reservation_amountTax = $reservation_amountTax,",
						"          status = $status,",
						"          status_text = $status_text,",
						"          stamp = $stamp,",
						"          notes = $notes,",
						"          transactionType = $transactionType,",
						"          transactionType_text = $transactionType_text,",
						"          paymentLimitDate = toDate($paymentLimitDate, 'yyyy-MM-dd'),",
						"          paymentDate = toDate($paymentDate, 'yyyy-MM-dd'),",
						"          refund = $refund,",
						"          refunded = $refunded,",
						"          convention_label = $convention_label,",
						"          receiptCode = $receiptCode,",
						"          insertTimestamp = toDate($insertTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          updateTimestamp = toDate($updateTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          owner = $owner,",
						"          owner_text = $owner_text,",
						"          sessionId = $sessionId,",
						"          terminal_label = $terminal_label,",
						"          terminalGroup_label = $terminalGroup_label,",
						"          gateway_guid = $gateway_guid,",
						"          gateway_label = $gateway_label,",
						"          transactionID = $transactionID,",
						"          bankAccount_guid = $bankAccount_guid,",
						"          bankAccount_label = $bankAccount_label,",
						"          channel_guid = $channel_guid,",
						"          channel_label = $channel_label,",
						"          channelType = $channelType,",
						"          detail_guid = $detail_guid,",
						"          extra_guid = $extra_guid,",
						"          priceList = $priceList,",
						"          event = $event,",
						"          detailType = $detailType,",
						"          detail_text = $detail_text,",
						"          detail_label = $detail_label,",
						"          detail_count = $detail_count,",
						"          paymentDetail_guid = $paymentDetail_guid,",
						"          detail_payingPartecipants = $detail_payingPartecipants,",
						"          detail_quantity = $detail_quantity,",
						"          tickets_quantity = $tickets_quantity,",
						"          pax_quantity = $pax_quantity,",
						"          costCenter_guid = $costCenter_guid,",
						"          costCenter_label = $costCenter_label,",
						"          object_receipt = $object_receipt,",
						"          object_taxCode = $object_taxCode,",
						"          object_taxNotes = $object_taxNotes,",
						"          object_amount = $object_amount,",
						"          object_taxPercentage = $object_taxPercentage,",
						"          amount = $amount,",
						"          amountNet = $amountNet,",
						"          amountPresale = $amountPresale,",
						"          amountSold = $amountSold,",
						"          amountPayed = $amountPayed,",
						"          amountPending = $amountPending,",
						"          amountCanceled = $amountCanceled,",
						"          externalId = $externalId,",
						"          amountRefunded = $amountRefunded,",
						"          invoiceSummary = $invoiceSummary,",
						"          eventCalendar_guid = $eventCalendar_guid,",
						"          passDetail_guid = $passDetail_guid,",
						"          paymentCostCenter_guid = $paymentCostCenter_guid,",
						"          organization_guid = $organization_guid,",
						"          venue_guid = $venue_guid,",
						"          olapUpdateTimestamp = toDate($olapUpdateTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          row_id = $row_id) ~> CreateNewRecord",
						"CreateNewRecord select(mapColumn(",
						"          guid_pk,",
						"          reservation_progressiveCode,",
						"          reservation_code,",
						"          reservation_status,",
						"          invoiceRequired,",
						"          customer,",
						"          visitDate,",
						"          reservationPayment_guid,",
						"          parentPayment_guid,",
						"          sliced,",
						"          reservation_guid,",
						"          group_guid,",
						"          group_label,",
						"          group_email,",
						"          paymentCode,",
						"          paymentCondition,",
						"          reservation_amount,",
						"          reservation_amountTax,",
						"          status,",
						"          status_text,",
						"          stamp,",
						"          notes,",
						"          transactionType,",
						"          transactionType_text,",
						"          paymentLimitDate,",
						"          paymentDate,",
						"          refund,",
						"          refunded,",
						"          convention_label,",
						"          receiptCode,",
						"          insertTimestamp,",
						"          updateTimestamp,",
						"          owner,",
						"          owner_text,",
						"          sessionId,",
						"          terminal_label,",
						"          terminalGroup_label,",
						"          gateway_guid,",
						"          gateway_label,",
						"          transactionID,",
						"          bankAccount_guid,",
						"          bankAccount_label,",
						"          channel_guid,",
						"          channel_label,",
						"          channelType,",
						"          detail_guid,",
						"          extra_guid,",
						"          priceList,",
						"          event,",
						"          detailType,",
						"          detail_text,",
						"          detail_label,",
						"          detail_count,",
						"          paymentDetail_guid,",
						"          detail_payingPartecipants,",
						"          detail_quantity,",
						"          tickets_quantity,",
						"          pax_quantity,",
						"          costCenter_guid,",
						"          costCenter_label,",
						"          object_receipt,",
						"          object_taxCode,",
						"          object_taxNotes,",
						"          object_amount,",
						"          object_taxPercentage,",
						"          amount,",
						"          amountNet,",
						"          amountPresale,",
						"          amountSold,",
						"          amountPayed,",
						"          amountPending,",
						"          amountCanceled,",
						"          externalId,",
						"          amountRefunded,",
						"          invoiceSummary,",
						"          eventCalendar_guid,",
						"          passDetail_guid,",
						"          paymentCostCenter_guid,",
						"          organization_guid,",
						"          venue_guid,",
						"          olapUpdateTimestamp,",
						"          row_id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectNewColumns",
						"SourceExistingContent, SelectNewColumns union(byName: true)~> UnionAllRecords",
						"UnionAllRecords sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['temp_complete.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SinkTemp"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_dummy')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Mida_Bookings_Complete_Parquet')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Mida_Temp_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida2_Atomic_APPEND_Booking_Summary')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_dummy",
								"type": "DatasetReference"
							},
							"name": "DummySource"
						},
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Summary_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceExistingContent"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkTemp"
						}
					],
					"transformations": [
						{
							"name": "CreateNewSummaryRecord"
						},
						{
							"name": "SelectSummaryFields"
						},
						{
							"name": "UnionByName"
						}
					],
					"scriptLines": [
						"parameters{",
						"     row_id as string,",
						"     reservation_code as string,",
						"     priceList as string,",
						"     channel_label as string,",
						"     pax_quantity as integer,",
						"     insertTimestamp as string,",
						"     updateTimestamp as string,",
						"     reservation_amount as decimal(10,2),",
						"     visitDate as string",
						"}",
						"source(output(",
						"          dummy as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     data: 'dummy\\n1') ~> DummySource",
						"source(output(",
						"          row_id as string,",
						"          reservation_code as string,",
						"          priceList as string,",
						"          channel_label as string,",
						"          pax_quantity as integer,",
						"          insertTimestamp as date,",
						"          updateTimestamp as date,",
						"          reservation_amount as decimal(10,2),",
						"          visitDate as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceExistingContent",
						"DummySource derive(row_id = $row_id,",
						"          reservation_code = $reservation_code,",
						"          priceList = $priceList,",
						"          channel_label = $channel_label,",
						"          pax_quantity = $pax_quantity,",
						"          insertTimestamp = toDate($insertTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          updateTimestamp = toDate($updateTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          reservation_amount = $reservation_amount,",
						"          visitDate = toDate($visitDate, 'yyyy-MM-dd')) ~> CreateNewSummaryRecord",
						"CreateNewSummaryRecord select(mapColumn(",
						"          row_id,",
						"          reservation_code,",
						"          priceList,",
						"          channel_label,",
						"          pax_quantity,",
						"          insertTimestamp,",
						"          updateTimestamp,",
						"          reservation_amount,",
						"          visitDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSummaryFields",
						"SourceExistingContent, SelectSummaryFields union(byName: true)~> UnionByName",
						"UnionByName sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['temp_append_summary.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SinkTemp"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_dummy')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Mida_Bookings_Summary_Parquet')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Mida_Temp_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida2_Atomic_APPEND_Historical')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_dummy",
								"type": "DatasetReference"
							},
							"name": "DummySource"
						},
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Historical_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceExistingHistorical"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkTemp"
						}
					],
					"transformations": [
						{
							"name": "CreateNewRecord"
						},
						{
							"name": "AddAuditFields"
						},
						{
							"name": "SelectNewColumns"
						},
						{
							"name": "UnionByName"
						}
					],
					"scriptLines": [
						"parameters{",
						"     guid_pk as string,",
						"     reservation_progressiveCode as string,",
						"     reservation_code as string,",
						"     reservation_status as integer,",
						"     invoiceRequired as string,",
						"     customer as decimal(10,2),",
						"     visitDate as string,",
						"     reservationPayment_guid as string,",
						"     parentPayment_guid as string,",
						"     sliced as string,",
						"     reservation_guid as string,",
						"     group_guid as string,",
						"     group_label as string,",
						"     group_email as string,",
						"     paymentCode as string,",
						"     paymentCondition as decimal(10,2),",
						"     reservation_amount as decimal(10,2),",
						"     reservation_amountTax as decimal(10,2),",
						"     status as integer,",
						"     status_text as string,",
						"     stamp as string,",
						"     notes as string,",
						"     transactionType as string,",
						"     transactionType_text as string,",
						"     paymentLimitDate as string,",
						"     paymentDate as string,",
						"     refund as string,",
						"     refunded as string,",
						"     convention_label as string,",
						"     receiptCode as string,",
						"     insertTimestamp as string,",
						"     updateTimestamp as string,",
						"     owner as string,",
						"     owner_text as string,",
						"     sessionId as string,",
						"     terminal_label as string,",
						"     terminalGroup_label as string,",
						"     gateway_guid as string,",
						"     gateway_label as string,",
						"     transactionID as string,",
						"     bankAccount_guid as string,",
						"     bankAccount_label as string,",
						"     channel_guid as string,",
						"     channel_label as string,",
						"     channelType as string,",
						"     detail_guid as string,",
						"     extra_guid as string,",
						"     priceList as string,",
						"     event as string,",
						"     detailType as string,",
						"     detail_text as string,",
						"     detail_label as string,",
						"     detail_count as integer,",
						"     paymentDetail_guid as string,",
						"     detail_payingPartecipants as integer,",
						"     detail_quantity as integer,",
						"     tickets_quantity as integer,",
						"     pax_quantity as integer,",
						"     costCenter_guid as string,",
						"     costCenter_label as string,",
						"     object_receipt as integer,",
						"     object_taxCode as string,",
						"     object_taxNotes as string,",
						"     object_amount as decimal(10,2),",
						"     object_taxPercentage as decimal(10,2),",
						"     amount as decimal(10,2),",
						"     amountNet as decimal(10,2),",
						"     amountPresale as decimal(10,2),",
						"     amountSold as decimal(10,2),",
						"     amountPayed as decimal(10,2),",
						"     amountPending as decimal(10,2),",
						"     amountCanceled as decimal(10,2),",
						"     externalId as string,",
						"     amountRefunded as decimal(10,2),",
						"     invoiceSummary as string,",
						"     eventCalendar_guid as string,",
						"     passDetail_guid as string,",
						"     paymentCostCenter_guid as string,",
						"     organization_guid as string,",
						"     venue_guid as string,",
						"     olapUpdateTimestamp as string,",
						"     row_id as string,",
						"     operationType as string",
						"}",
						"source(output(",
						"          dummy as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     data: 'dummy\\n1') ~> DummySource",
						"source(output(",
						"          guid_pk as string,",
						"          reservation_progressiveCode as string,",
						"          reservation_code as string,",
						"          reservation_status as integer,",
						"          invoiceRequired as string,",
						"          customer as decimal(10,2),",
						"          visitDate as date,",
						"          reservationPayment_guid as string,",
						"          parentPayment_guid as string,",
						"          sliced as string,",
						"          reservation_guid as string,",
						"          group_guid as string,",
						"          group_label as string,",
						"          group_email as string,",
						"          paymentCode as string,",
						"          paymentCondition as decimal(10,2),",
						"          reservation_amount as decimal(10,2),",
						"          reservation_amountTax as decimal(10,2),",
						"          status as integer,",
						"          status_text as string,",
						"          stamp as string,",
						"          notes as string,",
						"          transactionType as string,",
						"          transactionType_text as string,",
						"          paymentLimitDate as date,",
						"          paymentDate as date,",
						"          refund as string,",
						"          refunded as string,",
						"          convention_label as string,",
						"          receiptCode as string,",
						"          insertTimestamp as date,",
						"          updateTimestamp as date,",
						"          owner as string,",
						"          owner_text as string,",
						"          sessionId as string,",
						"          terminal_label as string,",
						"          terminalGroup_label as string,",
						"          gateway_guid as string,",
						"          gateway_label as string,",
						"          transactionID as string,",
						"          bankAccount_guid as string,",
						"          bankAccount_label as string,",
						"          channel_guid as string,",
						"          channel_label as string,",
						"          channelType as string,",
						"          detail_guid as string,",
						"          extra_guid as string,",
						"          priceList as string,",
						"          event as string,",
						"          detailType as string,",
						"          detail_text as string,",
						"          detail_label as string,",
						"          detail_count as integer,",
						"          paymentDetail_guid as string,",
						"          detail_payingPartecipants as integer,",
						"          detail_quantity as integer,",
						"          tickets_quantity as integer,",
						"          pax_quantity as integer,",
						"          costCenter_guid as string,",
						"          costCenter_label as string,",
						"          object_receipt as integer,",
						"          object_taxCode as string,",
						"          object_taxNotes as string,",
						"          object_amount as decimal(10,2),",
						"          object_taxPercentage as decimal(10,2),",
						"          amount as decimal(10,2),",
						"          amountNet as decimal(10,2),",
						"          amountPresale as decimal(10,2),",
						"          amountSold as decimal(10,2),",
						"          amountPayed as decimal(10,2),",
						"          amountPending as decimal(10,2),",
						"          amountCanceled as decimal(10,2),",
						"          externalId as string,",
						"          amountRefunded as decimal(10,2),",
						"          invoiceSummary as string,",
						"          eventCalendar_guid as string,",
						"          passDetail_guid as string,",
						"          paymentCostCenter_guid as string,",
						"          organization_guid as string,",
						"          venue_guid as string,",
						"          olapUpdateTimestamp as date,",
						"          row_id as string,",
						"          operationType as string,",
						"          operationTimestamp as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceExistingHistorical",
						"DummySource derive(guid_pk = $guid_pk,",
						"          reservation_progressiveCode = $reservation_progressiveCode,",
						"          reservation_code = $reservation_code,",
						"          reservation_status = $reservation_status,",
						"          invoiceRequired = $invoiceRequired,",
						"          customer = $customer,",
						"          visitDate = toDate($visitDate, 'yyyy-MM-dd'),",
						"          reservationPayment_guid = $reservationPayment_guid,",
						"          parentPayment_guid = $parentPayment_guid,",
						"          sliced = $sliced,",
						"          reservation_guid = $reservation_guid,",
						"          group_guid = $group_guid,",
						"          group_label = $group_label,",
						"          group_email = $group_email,",
						"          paymentCode = $paymentCode,",
						"          paymentCondition = $paymentCondition,",
						"          reservation_amount = $reservation_amount,",
						"          reservation_amountTax = $reservation_amountTax,",
						"          status = $status,",
						"          status_text = $status_text,",
						"          stamp = $stamp,",
						"          notes = $notes,",
						"          transactionType = $transactionType,",
						"          transactionType_text = $transactionType_text,",
						"          paymentLimitDate = toDate($paymentLimitDate, 'yyyy-MM-dd'),",
						"          paymentDate = toDate($paymentDate, 'yyyy-MM-dd'),",
						"          refund = $refund,",
						"          refunded = $refunded,",
						"          convention_label = $convention_label,",
						"          receiptCode = $receiptCode,",
						"          insertTimestamp = toDate($insertTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          updateTimestamp = toDate($updateTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          owner = $owner,",
						"          owner_text = $owner_text,",
						"          sessionId = $sessionId,",
						"          terminal_label = $terminal_label,",
						"          terminalGroup_label = $terminalGroup_label,",
						"          gateway_guid = $gateway_guid,",
						"          gateway_label = $gateway_label,",
						"          transactionID = $transactionID,",
						"          bankAccount_guid = $bankAccount_guid,",
						"          bankAccount_label = $bankAccount_label,",
						"          channel_guid = $channel_guid,",
						"          channel_label = $channel_label,",
						"          channelType = $channelType,",
						"          detail_guid = $detail_guid,",
						"          extra_guid = $extra_guid,",
						"          priceList = $priceList,",
						"          event = $event,",
						"          detailType = $detailType,",
						"          detail_text = $detail_text,",
						"          detail_label = $detail_label,",
						"          detail_count = $detail_count,",
						"          paymentDetail_guid = $paymentDetail_guid,",
						"          detail_payingPartecipants = $detail_payingPartecipants,",
						"          detail_quantity = $detail_quantity,",
						"          tickets_quantity = $tickets_quantity,",
						"          pax_quantity = $pax_quantity,",
						"          costCenter_guid = $costCenter_guid,",
						"          costCenter_label = $costCenter_label,",
						"          object_receipt = $object_receipt,",
						"          object_taxCode = $object_taxCode,",
						"          object_taxNotes = $object_taxNotes,",
						"          object_amount = $object_amount,",
						"          object_taxPercentage = $object_taxPercentage,",
						"          amount = $amount,",
						"          amountNet = $amountNet,",
						"          amountPresale = $amountPresale,",
						"          amountSold = $amountSold,",
						"          amountPayed = $amountPayed,",
						"          amountPending = $amountPending,",
						"          amountCanceled = $amountCanceled,",
						"          externalId = $externalId,",
						"          amountRefunded = $amountRefunded,",
						"          invoiceSummary = $invoiceSummary,",
						"          eventCalendar_guid = $eventCalendar_guid,",
						"          passDetail_guid = $passDetail_guid,",
						"          paymentCostCenter_guid = $paymentCostCenter_guid,",
						"          organization_guid = $organization_guid,",
						"          venue_guid = $venue_guid,",
						"          olapUpdateTimestamp = toDate($olapUpdateTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          row_id = $row_id) ~> CreateNewRecord",
						"CreateNewRecord derive(audit_operation = $operationType,",
						"          audit_timestamp = currentTimestamp()) ~> AddAuditFields",
						"AddAuditFields select(mapColumn(",
						"          guid_pk,",
						"          reservation_progressiveCode,",
						"          reservation_code,",
						"          reservation_status,",
						"          invoiceRequired,",
						"          customer,",
						"          visitDate,",
						"          reservationPayment_guid,",
						"          parentPayment_guid,",
						"          sliced,",
						"          reservation_guid,",
						"          group_guid,",
						"          group_label,",
						"          group_email,",
						"          paymentCode,",
						"          paymentCondition,",
						"          reservation_amount,",
						"          reservation_amountTax,",
						"          status,",
						"          status_text,",
						"          stamp,",
						"          notes,",
						"          transactionType,",
						"          transactionType_text,",
						"          paymentLimitDate,",
						"          paymentDate,",
						"          refund,",
						"          refunded,",
						"          convention_label,",
						"          receiptCode,",
						"          insertTimestamp,",
						"          updateTimestamp,",
						"          owner,",
						"          owner_text,",
						"          sessionId,",
						"          terminal_label,",
						"          terminalGroup_label,",
						"          gateway_guid,",
						"          gateway_label,",
						"          transactionID,",
						"          bankAccount_guid,",
						"          bankAccount_label,",
						"          channel_guid,",
						"          channel_label,",
						"          channelType,",
						"          detail_guid,",
						"          extra_guid,",
						"          priceList,",
						"          event,",
						"          detailType,",
						"          detail_text,",
						"          detail_label,",
						"          detail_count,",
						"          paymentDetail_guid,",
						"          detail_payingPartecipants,",
						"          detail_quantity,",
						"          tickets_quantity,",
						"          pax_quantity,",
						"          costCenter_guid,",
						"          costCenter_label,",
						"          object_receipt,",
						"          object_taxCode,",
						"          object_taxNotes,",
						"          object_amount,",
						"          object_taxPercentage,",
						"          amount,",
						"          amountNet,",
						"          amountPresale,",
						"          amountSold,",
						"          amountPayed,",
						"          amountPending,",
						"          amountCanceled,",
						"          externalId,",
						"          amountRefunded,",
						"          invoiceSummary,",
						"          eventCalendar_guid,",
						"          passDetail_guid,",
						"          paymentCostCenter_guid,",
						"          organization_guid,",
						"          venue_guid,",
						"          olapUpdateTimestamp,",
						"          row_id,",
						"          audit_operation,",
						"          audit_timestamp",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectNewColumns",
						"SourceExistingHistorical, SelectNewColumns union(byName: true)~> UnionByName",
						"UnionByName sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['temp_append_historical.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SinkTemp"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_dummy')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Mida_Historical_Parquet')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Mida_Temp_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida2_Atomic_CREATE_Booking_Complete')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_dummy",
								"type": "DatasetReference"
							},
							"name": "DummySource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Complete_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkComplete"
						}
					],
					"transformations": [
						{
							"name": "CreateRecordFromParameters"
						},
						{
							"name": "SelectFinalColumns"
						}
					],
					"scriptLines": [
						"parameters{",
						"     guid_pk as string,",
						"     reservation_progressiveCode as string,",
						"     reservation_code as string,",
						"     reservation_status as integer,",
						"     invoiceRequired as string,",
						"     customer as decimal(10,2),",
						"     visitDate as string,",
						"     reservationPayment_guid as string,",
						"     parentPayment_guid as string,",
						"     sliced as string,",
						"     reservation_guid as string,",
						"     group_guid as string,",
						"     group_label as string,",
						"     group_email as string,",
						"     paymentCode as string,",
						"     paymentCondition as decimal(10,2),",
						"     reservation_amount as decimal(10,2),",
						"     reservation_amountTax as decimal(10,2),",
						"     status as integer,",
						"     status_text as string,",
						"     stamp as string,",
						"     notes as string,",
						"     transactionType as string,",
						"     transactionType_text as string,",
						"     paymentLimitDate as string,",
						"     paymentDate as string,",
						"     refund as string,",
						"     refunded as string,",
						"     convention_label as string,",
						"     receiptCode as string,",
						"     insertTimestamp as string,",
						"     updateTimestamp as string,",
						"     owner as string,",
						"     owner_text as string,",
						"     sessionId as string,",
						"     terminal_label as string,",
						"     terminalGroup_label as string,",
						"     gateway_guid as string,",
						"     gateway_label as string,",
						"     transactionID as string,",
						"     bankAccount_guid as string,",
						"     bankAccount_label as string,",
						"     channel_guid as string,",
						"     channel_label as string,",
						"     channelType as string,",
						"     detail_guid as string,",
						"     extra_guid as string,",
						"     priceList as string,",
						"     event as string,",
						"     detailType as string,",
						"     detail_text as string,",
						"     detail_label as string,",
						"     detail_count as integer,",
						"     paymentDetail_guid as string,",
						"     detail_payingPartecipants as integer,",
						"     detail_quantity as integer,",
						"     tickets_quantity as integer,",
						"     pax_quantity as integer,",
						"     costCenter_guid as string,",
						"     costCenter_label as string,",
						"     object_receipt as integer,",
						"     object_taxCode as string,",
						"     object_taxNotes as string,",
						"     object_amount as decimal(10,2),",
						"     object_taxPercentage as decimal(10,2),",
						"     amount as decimal(10,2),",
						"     amountNet as decimal(10,2),",
						"     amountPresale as decimal(10,2),",
						"     amountSold as decimal(10,2),",
						"     amountPayed as decimal(10,2),",
						"     amountPending as decimal(10,2),",
						"     amountCanceled as decimal(10,2),",
						"     externalId as string,",
						"     amountRefunded as decimal(10,2),",
						"     invoiceSummary as string,",
						"     eventCalendar_guid as string,",
						"     passDetail_guid as string,",
						"     paymentCostCenter_guid as string,",
						"     organization_guid as string,",
						"     venue_guid as string,",
						"     olapUpdateTimestamp as string,",
						"     row_id as string",
						"}",
						"source(output(",
						"          dummy as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DummySource",
						"DummySource derive(guid_pk = $guid_pk,",
						"          reservation_progressiveCode = $reservation_progressiveCode,",
						"          reservation_code = $reservation_code,",
						"          reservation_status = $reservation_status,",
						"          invoiceRequired = $invoiceRequired,",
						"          customer = $customer,",
						"          visitDate = toDate($visitDate, 'yyyy-MM-dd'),",
						"          reservationPayment_guid = $reservationPayment_guid,",
						"          parentPayment_guid = $parentPayment_guid,",
						"          sliced = $sliced,",
						"          reservation_guid = $reservation_guid,",
						"          group_guid = $group_guid,",
						"          group_label = $group_label,",
						"          group_email = $group_email,",
						"          paymentCode = $paymentCode,",
						"          paymentCondition = $paymentCondition,",
						"          reservation_amount = $reservation_amount,",
						"          reservation_amountTax = $reservation_amountTax,",
						"          status = $status,",
						"          status_text = $status_text,",
						"          stamp = $stamp,",
						"          notes = $notes,",
						"          transactionType = $transactionType,",
						"          transactionType_text = $transactionType_text,",
						"          paymentLimitDate = toDate($paymentLimitDate, 'yyyy-MM-dd'),",
						"          paymentDate = toDate($paymentDate, 'yyyy-MM-dd'),",
						"          refund = $refund,",
						"          refunded = $refunded,",
						"          convention_label = $convention_label,",
						"          receiptCode = $receiptCode,",
						"          insertTimestamp = toDate($insertTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          updateTimestamp = toDate($updateTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          owner = $owner,",
						"          owner_text = $owner_text,",
						"          sessionId = $sessionId,",
						"          terminal_label = $terminal_label,",
						"          terminalGroup_label = $terminalGroup_label,",
						"          gateway_guid = $gateway_guid,",
						"          gateway_label = $gateway_label,",
						"          transactionID = $transactionID,",
						"          bankAccount_guid = $bankAccount_guid,",
						"          bankAccount_label = $bankAccount_label,",
						"          channel_guid = $channel_guid,",
						"          channel_label = $channel_label,",
						"          channelType = $channelType,",
						"          detail_guid = $detail_guid,",
						"          extra_guid = $extra_guid,",
						"          priceList = $priceList,",
						"          event = $event,",
						"          detailType = $detailType,",
						"          detail_text = $detail_text,",
						"          detail_label = $detail_label,",
						"          detail_count = $detail_count,",
						"          paymentDetail_guid = $paymentDetail_guid,",
						"          detail_payingPartecipants = $detail_payingPartecipants,",
						"          detail_quantity = $detail_quantity,",
						"          tickets_quantity = $tickets_quantity,",
						"          pax_quantity = $pax_quantity,",
						"          costCenter_guid = $costCenter_guid,",
						"          costCenter_label = $costCenter_label,",
						"          object_receipt = $object_receipt,",
						"          object_taxCode = $object_taxCode,",
						"          object_taxNotes = $object_taxNotes,",
						"          object_amount = $object_amount,",
						"          object_taxPercentage = $object_taxPercentage,",
						"          amount = $amount,",
						"          amountNet = $amountNet,",
						"          amountPresale = $amountPresale,",
						"          amountSold = $amountSold,",
						"          amountPayed = $amountPayed,",
						"          amountPending = $amountPending,",
						"          amountCanceled = $amountCanceled,",
						"          externalId = $externalId,",
						"          amountRefunded = $amountRefunded,",
						"          invoiceSummary = $invoiceSummary,",
						"          eventCalendar_guid = $eventCalendar_guid,",
						"          passDetail_guid = $passDetail_guid,",
						"          paymentCostCenter_guid = $paymentCostCenter_guid,",
						"          organization_guid = $organization_guid,",
						"          venue_guid = $venue_guid,",
						"          olapUpdateTimestamp = toDate($olapUpdateTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          row_id = $row_id) ~> CreateRecordFromParameters",
						"CreateRecordFromParameters select(mapColumn(",
						"          guid_pk,",
						"          reservation_progressiveCode,",
						"          reservation_code,",
						"          reservation_status,",
						"          invoiceRequired,",
						"          customer,",
						"          visitDate,",
						"          reservationPayment_guid,",
						"          parentPayment_guid,",
						"          sliced,",
						"          reservation_guid,",
						"          group_guid,",
						"          group_label,",
						"          group_email,",
						"          paymentCode,",
						"          paymentCondition,",
						"          reservation_amount,",
						"          reservation_amountTax,",
						"          status,",
						"          status_text,",
						"          stamp,",
						"          notes,",
						"          transactionType,",
						"          transactionType_text,",
						"          paymentLimitDate,",
						"          paymentDate,",
						"          refund,",
						"          refunded,",
						"          convention_label,",
						"          receiptCode,",
						"          insertTimestamp,",
						"          updateTimestamp,",
						"          owner,",
						"          owner_text,",
						"          sessionId,",
						"          terminal_label,",
						"          terminalGroup_label,",
						"          gateway_guid,",
						"          gateway_label,",
						"          transactionID,",
						"          bankAccount_guid,",
						"          bankAccount_label,",
						"          channel_guid,",
						"          channel_label,",
						"          channelType,",
						"          detail_guid,",
						"          extra_guid,",
						"          priceList,",
						"          event,",
						"          detailType,",
						"          detail_text,",
						"          detail_label,",
						"          detail_count,",
						"          paymentDetail_guid,",
						"          detail_payingPartecipants,",
						"          detail_quantity,",
						"          tickets_quantity,",
						"          pax_quantity,",
						"          costCenter_guid,",
						"          costCenter_label,",
						"          object_receipt,",
						"          object_taxCode,",
						"          object_taxNotes,",
						"          object_amount,",
						"          object_taxPercentage,",
						"          amount,",
						"          amountNet,",
						"          amountPresale,",
						"          amountSold,",
						"          amountPayed,",
						"          amountPending,",
						"          amountCanceled,",
						"          externalId,",
						"          amountRefunded,",
						"          invoiceSummary,",
						"          eventCalendar_guid,",
						"          passDetail_guid,",
						"          paymentCostCenter_guid,",
						"          organization_guid,",
						"          venue_guid,",
						"          olapUpdateTimestamp,",
						"          row_id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinalColumns",
						"SelectFinalColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          guid_pk as string,",
						"          reservation_progressiveCode as string,",
						"          reservation_code as string,",
						"          reservation_status as integer,",
						"          invoiceRequired as string,",
						"          customer as decimal(10,2),",
						"          visitDate as date,",
						"          reservationPayment_guid as string,",
						"          parentPayment_guid as string,",
						"          sliced as string,",
						"          reservation_guid as string,",
						"          group_guid as string,",
						"          group_label as string,",
						"          group_email as string,",
						"          paymentCode as string,",
						"          paymentCondition as decimal(10,2),",
						"          reservation_amount as decimal(10,2),",
						"          reservation_amountTax as decimal(10,2),",
						"          status as integer,",
						"          status_text as string,",
						"          stamp as string,",
						"          notes as string,",
						"          transactionType as string,",
						"          transactionType_text as string,",
						"          paymentLimitDate as date,",
						"          paymentDate as date,",
						"          refund as string,",
						"          refunded as string,",
						"          convention_label as string,",
						"          receiptCode as string,",
						"          insertTimestamp as date,",
						"          updateTimestamp as date,",
						"          owner as string,",
						"          owner_text as string,",
						"          sessionId as string,",
						"          terminal_label as string,",
						"          terminalGroup_label as string,",
						"          gateway_guid as string,",
						"          gateway_label as string,",
						"          transactionID as string,",
						"          bankAccount_guid as string,",
						"          bankAccount_label as string,",
						"          channel_guid as string,",
						"          channel_label as string,",
						"          channelType as string,",
						"          detail_guid as string,",
						"          extra_guid as string,",
						"          priceList as string,",
						"          event as string,",
						"          detailType as string,",
						"          detail_text as string,",
						"          detail_label as string,",
						"          detail_count as integer,",
						"          paymentDetail_guid as string,",
						"          detail_payingPartecipants as integer,",
						"          detail_quantity as integer,",
						"          tickets_quantity as integer,",
						"          pax_quantity as integer,",
						"          costCenter_guid as string,",
						"          costCenter_label as string,",
						"          object_receipt as integer,",
						"          object_taxCode as string,",
						"          object_taxNotes as string,",
						"          object_amount as decimal(10,2),",
						"          object_taxPercentage as decimal(10,2),",
						"          amount as decimal(10,2),",
						"          amountNet as decimal(10,2),",
						"          amountPresale as decimal(10,2),",
						"          amountSold as decimal(10,2),",
						"          amountPayed as decimal(10,2),",
						"          amountPending as decimal(10,2),",
						"          amountCanceled as decimal(10,2),",
						"          externalId as string,",
						"          amountRefunded as decimal(10,2),",
						"          invoiceSummary as string,",
						"          eventCalendar_guid as string,",
						"          passDetail_guid as string,",
						"          paymentCostCenter_guid as string,",
						"          organization_guid as string,",
						"          venue_guid as string,",
						"          olapUpdateTimestamp as date,",
						"          row_id as string",
						"     ),",
						"     format: 'parquet',",
						"     partitionFileNames:['booking_complete.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SinkComplete"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_dummy')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Mida_Bookings_Complete_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida2_Atomic_CREATE_Booking_Summary')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_dummy",
								"type": "DatasetReference"
							},
							"name": "DummySource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Summary_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkSummary"
						}
					],
					"transformations": [
						{
							"name": "CreateSummaryRecord"
						},
						{
							"name": "SelectSummaryFields"
						}
					],
					"scriptLines": [
						"parameters{",
						"     row_id as string,",
						"     reservation_code as string,",
						"     priceList as string,",
						"     channel_label as string,",
						"     pax_quantity as integer,",
						"     insertTimestamp as string,",
						"     updateTimestamp as string,",
						"     reservation_amount as decimal(10,2),",
						"     visitDate as string",
						"}",
						"source(output(",
						"          dummy as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     data: 'dummy\\n1') ~> DummySource",
						"DummySource derive(row_id = $row_id,",
						"          reservation_code = $reservation_code,",
						"          priceList = $priceList,",
						"          channel_label = $channel_label,",
						"          pax_quantity = $pax_quantity,",
						"          insertTimestamp = toDate($insertTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          updateTimestamp = toDate($updateTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          reservation_amount = $reservation_amount,",
						"          visitDate = toDate($visitDate, 'yyyy-MM-dd')) ~> CreateSummaryRecord",
						"CreateSummaryRecord select(mapColumn(",
						"          row_id,",
						"          reservation_code,",
						"          priceList,",
						"          channel_label,",
						"          pax_quantity,",
						"          insertTimestamp,",
						"          updateTimestamp,",
						"          reservation_amount,",
						"          visitDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSummaryFields",
						"SelectSummaryFields sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          row_id as string,",
						"          reservation_code as string,",
						"          priceList as string,",
						"          channel_label as string,",
						"          pax_quantity as integer,",
						"          insertTimestamp as date,",
						"          updateTimestamp as date,",
						"          reservation_amount as decimal(10,2),",
						"          visitDate as date",
						"     ),",
						"     format: 'parquet',",
						"     partitionFileNames:['booking_summary.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SinkSummary"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_dummy')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Mida_Bookings_Summary_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida2_Atomic_CREATE_Historical')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_dummy",
								"type": "DatasetReference"
							},
							"name": "DummySource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Historical_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkHistorical"
						}
					],
					"transformations": [
						{
							"name": "CreateHistoricalRecord"
						},
						{
							"name": "AddAuditFields"
						},
						{
							"name": "SelectFinalColumns"
						}
					],
					"scriptLines": [
						"parameters{",
						"     guid_pk as string,",
						"     reservation_progressiveCode as string,",
						"     reservation_code as string,",
						"     reservation_status as integer,",
						"     invoiceRequired as string,",
						"     customer as decimal(10,2),",
						"     visitDate as string,",
						"     reservationPayment_guid as string,",
						"     parentPayment_guid as string,",
						"     sliced as string,",
						"     reservation_guid as string,",
						"     group_guid as string,",
						"     group_label as string,",
						"     group_email as string,",
						"     paymentCode as string,",
						"     paymentCondition as decimal(10,2),",
						"     reservation_amount as decimal(10,2),",
						"     reservation_amountTax as decimal(10,2),",
						"     status as integer,",
						"     status_text as string,",
						"     stamp as string,",
						"     notes as string,",
						"     transactionType as string,",
						"     transactionType_text as string,",
						"     paymentLimitDate as string,",
						"     paymentDate as string,",
						"     refund as string,",
						"     refunded as string,",
						"     convention_label as string,",
						"     receiptCode as string,",
						"     insertTimestamp as string,",
						"     updateTimestamp as string,",
						"     owner as string,",
						"     owner_text as string,",
						"     sessionId as string,",
						"     terminal_label as string,",
						"     terminalGroup_label as string,",
						"     gateway_guid as string,",
						"     gateway_label as string,",
						"     transactionID as string,",
						"     bankAccount_guid as string,",
						"     bankAccount_label as string,",
						"     channel_guid as string,",
						"     channel_label as string,",
						"     channelType as string,",
						"     detail_guid as string,",
						"     extra_guid as string,",
						"     priceList as string,",
						"     event as string,",
						"     detailType as string,",
						"     detail_text as string,",
						"     detail_label as string,",
						"     detail_count as integer,",
						"     paymentDetail_guid as string,",
						"     detail_payingPartecipants as integer,",
						"     detail_quantity as integer,",
						"     tickets_quantity as integer,",
						"     pax_quantity as integer,",
						"     costCenter_guid as string,",
						"     costCenter_label as string,",
						"     object_receipt as integer,",
						"     object_taxCode as string,",
						"     object_taxNotes as string,",
						"     object_amount as decimal(10,2),",
						"     object_taxPercentage as decimal(10,2),",
						"     amount as decimal(10,2),",
						"     amountNet as decimal(10,2),",
						"     amountPresale as decimal(10,2),",
						"     amountSold as decimal(10,2),",
						"     amountPayed as decimal(10,2),",
						"     amountPending as decimal(10,2),",
						"     amountCanceled as decimal(10,2),",
						"     externalId as string,",
						"     amountRefunded as decimal(10,2),",
						"     invoiceSummary as string,",
						"     eventCalendar_guid as string,",
						"     passDetail_guid as string,",
						"     paymentCostCenter_guid as string,",
						"     organization_guid as string,",
						"     venue_guid as string,",
						"     olapUpdateTimestamp as string,",
						"     row_id as string,",
						"     operationType as string",
						"}",
						"source(output(",
						"          dummy as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     data: 'dummy\\n1') ~> DummySource",
						"DummySource derive(guid_pk = $guid_pk,",
						"          reservation_progressiveCode = $reservation_progressiveCode,",
						"          reservation_code = $reservation_code,",
						"          reservation_status = $reservation_status,",
						"          invoiceRequired = $invoiceRequired,",
						"          customer = $customer,",
						"          visitDate = toDate($visitDate, 'yyyy-MM-dd'),",
						"          reservationPayment_guid = $reservationPayment_guid,",
						"          parentPayment_guid = $parentPayment_guid,",
						"          sliced = $sliced,",
						"          reservation_guid = $reservation_guid,",
						"          group_guid = $group_guid,",
						"          group_label = $group_label,",
						"          group_email = $group_email,",
						"          paymentCode = $paymentCode,",
						"          paymentCondition = $paymentCondition,",
						"          reservation_amount = $reservation_amount,",
						"          reservation_amountTax = $reservation_amountTax,",
						"          status = $status,",
						"          status_text = $status_text,",
						"          stamp = $stamp,",
						"          notes = $notes,",
						"          transactionType = $transactionType,",
						"          transactionType_text = $transactionType_text,",
						"          paymentLimitDate = toDate($paymentLimitDate, 'yyyy-MM-dd'),",
						"          paymentDate = toDate($paymentDate, 'yyyy-MM-dd'),",
						"          refund = $refund,",
						"          refunded = $refunded,",
						"          convention_label = $convention_label,",
						"          receiptCode = $receiptCode,",
						"          insertTimestamp = toDate($insertTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          updateTimestamp = toDate($updateTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          owner = $owner,",
						"          owner_text = $owner_text,",
						"          sessionId = $sessionId,",
						"          terminal_label = $terminal_label,",
						"          terminalGroup_label = $terminalGroup_label,",
						"          gateway_guid = $gateway_guid,",
						"          gateway_label = $gateway_label,",
						"          transactionID = $transactionID,",
						"          bankAccount_guid = $bankAccount_guid,",
						"          bankAccount_label = $bankAccount_label,",
						"          channel_guid = $channel_guid,",
						"          channel_label = $channel_label,",
						"          channelType = $channelType,",
						"          detail_guid = $detail_guid,",
						"          extra_guid = $extra_guid,",
						"          priceList = $priceList,",
						"          event = $event,",
						"          detailType = $detailType,",
						"          detail_text = $detail_text,",
						"          detail_label = $detail_label,",
						"          detail_count = $detail_count,",
						"          paymentDetail_guid = $paymentDetail_guid,",
						"          detail_payingPartecipants = $detail_payingPartecipants,",
						"          detail_quantity = $detail_quantity,",
						"          tickets_quantity = $tickets_quantity,",
						"          pax_quantity = $pax_quantity,",
						"          costCenter_guid = $costCenter_guid,",
						"          costCenter_label = $costCenter_label,",
						"          object_receipt = $object_receipt,",
						"          object_taxCode = $object_taxCode,",
						"          object_taxNotes = $object_taxNotes,",
						"          object_amount = $object_amount,",
						"          object_taxPercentage = $object_taxPercentage,",
						"          amount = $amount,",
						"          amountNet = $amountNet,",
						"          amountPresale = $amountPresale,",
						"          amountSold = $amountSold,",
						"          amountPayed = $amountPayed,",
						"          amountPending = $amountPending,",
						"          amountCanceled = $amountCanceled,",
						"          externalId = $externalId,",
						"          amountRefunded = $amountRefunded,",
						"          invoiceSummary = $invoiceSummary,",
						"          eventCalendar_guid = $eventCalendar_guid,",
						"          passDetail_guid = $passDetail_guid,",
						"          paymentCostCenter_guid = $paymentCostCenter_guid,",
						"          organization_guid = $organization_guid,",
						"          venue_guid = $venue_guid,",
						"          olapUpdateTimestamp = toDate($olapUpdateTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          row_id = $row_id) ~> CreateHistoricalRecord",
						"CreateHistoricalRecord derive(audit_operation = $operationType,",
						"          audit_timestamp = currentTimestamp()) ~> AddAuditFields",
						"AddAuditFields select(mapColumn(",
						"          guid_pk,",
						"          reservation_progressiveCode,",
						"          reservation_code,",
						"          reservation_status,",
						"          invoiceRequired,",
						"          customer,",
						"          visitDate,",
						"          reservationPayment_guid,",
						"          parentPayment_guid,",
						"          sliced,",
						"          reservation_guid,",
						"          group_guid,",
						"          group_label,",
						"          group_email,",
						"          paymentCode,",
						"          paymentCondition,",
						"          reservation_amount,",
						"          reservation_amountTax,",
						"          status,",
						"          status_text,",
						"          stamp,",
						"          notes,",
						"          transactionType,",
						"          transactionType_text,",
						"          paymentLimitDate,",
						"          paymentDate,",
						"          refund,",
						"          refunded,",
						"          convention_label,",
						"          receiptCode,",
						"          insertTimestamp,",
						"          updateTimestamp,",
						"          owner,",
						"          owner_text,",
						"          sessionId,",
						"          terminal_label,",
						"          terminalGroup_label,",
						"          gateway_guid,",
						"          gateway_label,",
						"          transactionID,",
						"          bankAccount_guid,",
						"          bankAccount_label,",
						"          channel_guid,",
						"          channel_label,",
						"          channelType,",
						"          detail_guid,",
						"          extra_guid,",
						"          priceList,",
						"          event,",
						"          detailType,",
						"          detail_text,",
						"          detail_label,",
						"          detail_count,",
						"          paymentDetail_guid,",
						"          detail_payingPartecipants,",
						"          detail_quantity,",
						"          tickets_quantity,",
						"          pax_quantity,",
						"          costCenter_guid,",
						"          costCenter_label,",
						"          object_receipt,",
						"          object_taxCode,",
						"          object_taxNotes,",
						"          object_amount,",
						"          object_taxPercentage,",
						"          amount,",
						"          amountNet,",
						"          amountPresale,",
						"          amountSold,",
						"          amountPayed,",
						"          amountPending,",
						"          amountCanceled,",
						"          externalId,",
						"          amountRefunded,",
						"          invoiceSummary,",
						"          eventCalendar_guid,",
						"          passDetail_guid,",
						"          paymentCostCenter_guid,",
						"          organization_guid,",
						"          venue_guid,",
						"          olapUpdateTimestamp,",
						"          row_id,",
						"          audit_operation,",
						"          audit_timestamp",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinalColumns",
						"SelectFinalColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          guid_pk as string,",
						"          reservation_progressiveCode as string,",
						"          reservation_code as string,",
						"          reservation_status as integer,",
						"          invoiceRequired as string,",
						"          customer as decimal(10,2),",
						"          visitDate as date,",
						"          reservationPayment_guid as string,",
						"          parentPayment_guid as string,",
						"          sliced as string,",
						"          reservation_guid as string,",
						"          group_guid as string,",
						"          group_label as string,",
						"          group_email as string,",
						"          paymentCode as string,",
						"          paymentCondition as decimal(10,2),",
						"          reservation_amount as decimal(10,2),",
						"          reservation_amountTax as decimal(10,2),",
						"          status as integer,",
						"          status_text as string,",
						"          stamp as string,",
						"          notes as string,",
						"          transactionType as string,",
						"          transactionType_text as string,",
						"          paymentLimitDate as date,",
						"          paymentDate as date,",
						"          refund as string,",
						"          refunded as string,",
						"          convention_label as string,",
						"          receiptCode as string,",
						"          insertTimestamp as date,",
						"          updateTimestamp as date,",
						"          owner as string,",
						"          owner_text as string,",
						"          sessionId as string,",
						"          terminal_label as string,",
						"          terminalGroup_label as string,",
						"          gateway_guid as string,",
						"          gateway_label as string,",
						"          transactionID as string,",
						"          bankAccount_guid as string,",
						"          bankAccount_label as string,",
						"          channel_guid as string,",
						"          channel_label as string,",
						"          channelType as string,",
						"          detail_guid as string,",
						"          extra_guid as string,",
						"          priceList as string,",
						"          event as string,",
						"          detailType as string,",
						"          detail_text as string,",
						"          detail_label as string,",
						"          detail_count as integer,",
						"          paymentDetail_guid as string,",
						"          detail_payingPartecipants as integer,",
						"          detail_quantity as integer,",
						"          tickets_quantity as integer,",
						"          pax_quantity as integer,",
						"          costCenter_guid as string,",
						"          costCenter_label as string,",
						"          object_receipt as integer,",
						"          object_taxCode as string,",
						"          object_taxNotes as string,",
						"          object_amount as decimal(10,2),",
						"          object_taxPercentage as decimal(10,2),",
						"          amount as decimal(10,2),",
						"          amountNet as decimal(10,2),",
						"          amountPresale as decimal(10,2),",
						"          amountSold as decimal(10,2),",
						"          amountPayed as decimal(10,2),",
						"          amountPending as decimal(10,2),",
						"          amountCanceled as decimal(10,2),",
						"          externalId as string,",
						"          amountRefunded as decimal(10,2),",
						"          invoiceSummary as string,",
						"          eventCalendar_guid as string,",
						"          passDetail_guid as string,",
						"          paymentCostCenter_guid as string,",
						"          organization_guid as string,",
						"          venue_guid as string,",
						"          olapUpdateTimestamp as date,",
						"          row_id as string,",
						"          operationType as string,",
						"          operationTimestamp as timestamp",
						"     ),",
						"     format: 'parquet',",
						"     partitionFileNames:['booking_historical.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SinkHistorical"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_dummy')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Mida_Historical_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida2_Atomic_DELETE_Booking_Complete')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Complete_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceExistingContent"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkTemp"
						}
					],
					"transformations": [
						{
							"name": "FilterOutDeletedRecord"
						}
					],
					"scriptLines": [
						"parameters{",
						"     row_id as string",
						"}",
						"source(output(",
						"          guid_pk as string,",
						"          reservation_progressiveCode as string,",
						"          reservation_code as string,",
						"          reservation_status as integer,",
						"          invoiceRequired as string,",
						"          customer as decimal(10,2),",
						"          visitDate as date,",
						"          reservationPayment_guid as string,",
						"          parentPayment_guid as string,",
						"          sliced as string,",
						"          reservation_guid as string,",
						"          group_guid as string,",
						"          group_label as string,",
						"          group_email as string,",
						"          paymentCode as string,",
						"          paymentCondition as decimal(10,2),",
						"          reservation_amount as decimal(10,2),",
						"          reservation_amountTax as decimal(10,2),",
						"          status as integer,",
						"          status_text as string,",
						"          stamp as string,",
						"          notes as string,",
						"          transactionType as string,",
						"          transactionType_text as string,",
						"          paymentLimitDate as date,",
						"          paymentDate as date,",
						"          refund as string,",
						"          refunded as string,",
						"          convention_label as string,",
						"          receiptCode as string,",
						"          insertTimestamp as date,",
						"          updateTimestamp as date,",
						"          owner as string,",
						"          owner_text as string,",
						"          sessionId as string,",
						"          terminal_label as string,",
						"          terminalGroup_label as string,",
						"          gateway_guid as string,",
						"          gateway_label as string,",
						"          transactionID as string,",
						"          bankAccount_guid as string,",
						"          bankAccount_label as string,",
						"          channel_guid as string,",
						"          channel_label as string,",
						"          channelType as string,",
						"          detail_guid as string,",
						"          extra_guid as string,",
						"          priceList as string,",
						"          event as string,",
						"          detailType as string,",
						"          detail_text as string,",
						"          detail_label as string,",
						"          detail_count as integer,",
						"          paymentDetail_guid as string,",
						"          detail_payingPartecipants as integer,",
						"          detail_quantity as integer,",
						"          tickets_quantity as integer,",
						"          pax_quantity as integer,",
						"          costCenter_guid as string,",
						"          costCenter_label as string,",
						"          object_receipt as integer,",
						"          object_taxCode as string,",
						"          object_taxNotes as string,",
						"          object_amount as decimal(10,2),",
						"          object_taxPercentage as decimal(10,2),",
						"          amount as decimal(10,2),",
						"          amountNet as decimal(10,2),",
						"          amountPresale as decimal(10,2),",
						"          amountSold as decimal(10,2),",
						"          amountPayed as decimal(10,2),",
						"          amountPending as decimal(10,2),",
						"          amountCanceled as decimal(10,2),",
						"          externalId as string,",
						"          amountRefunded as decimal(10,2),",
						"          invoiceSummary as string,",
						"          eventCalendar_guid as string,",
						"          passDetail_guid as string,",
						"          paymentCostCenter_guid as string,",
						"          organization_guid as string,",
						"          venue_guid as string,",
						"          olapUpdateTimestamp as date,",
						"          row_id as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceExistingContent",
						"SourceExistingContent filter(row_id != $row_id) ~> FilterOutDeletedRecord",
						"FilterOutDeletedRecord sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['temp_delete_complete.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SinkTemp"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Mida_Bookings_Complete_Parquet')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Mida_Temp_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida2_Atomic_DELETE_Booking_Summary')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Summary_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceExistingContent"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkTemp"
						}
					],
					"transformations": [
						{
							"name": "FilterOutDeletedRecord"
						}
					],
					"scriptLines": [
						"parameters{",
						"     row_id as string",
						"}",
						"source(output(",
						"          row_id as string,",
						"          reservation_code as string,",
						"          priceList as string,",
						"          channel_label as string,",
						"          pax_quantity as integer,",
						"          insertTimestamp as date,",
						"          updateTimestamp as date,",
						"          reservation_amount as decimal(10,2),",
						"          visitDate as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceExistingContent",
						"SourceExistingContent filter(row_id != $row_id) ~> FilterOutDeletedRecord",
						"FilterOutDeletedRecord sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['temp_delete_summary.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SinkTemp"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Mida_Bookings_Summary_Parquet')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Mida_Temp_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida2_Atomic_LOOKUP_Historical')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Historical_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceHistorical"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkTemp"
						}
					],
					"transformations": [
						{
							"name": "FilterByRowId"
						},
						{
							"name": "SelectRequiredFields"
						}
					],
					"scriptLines": [
						"parameters{",
						"     row_id as string",
						"}",
						"source(output(",
						"          guid_pk as string,",
						"          reservation_progressiveCode as string,",
						"          reservation_code as string,",
						"          reservation_status as integer,",
						"          invoiceRequired as string,",
						"          customer as decimal(10,2),",
						"          visitDate as date,",
						"          reservationPayment_guid as string,",
						"          parentPayment_guid as string,",
						"          sliced as string,",
						"          reservation_guid as string,",
						"          group_guid as string,",
						"          group_label as string,",
						"          group_email as string,",
						"          paymentCode as string,",
						"          paymentCondition as decimal(10,2),",
						"          reservation_amount as decimal(10,2),",
						"          reservation_amountTax as decimal(10,2),",
						"          status as integer,",
						"          status_text as string,",
						"          stamp as string,",
						"          notes as string,",
						"          transactionType as string,",
						"          transactionType_text as string,",
						"          paymentLimitDate as date,",
						"          paymentDate as date,",
						"          refund as string,",
						"          refunded as string,",
						"          convention_label as string,",
						"          receiptCode as decimal(10,2),",
						"          insertTimestamp as date,",
						"          updateTimestamp as date,",
						"          owner as string,",
						"          owner_text as string,",
						"          sessionId as string,",
						"          terminal_label as string,",
						"          terminalGroup_label as string,",
						"          gateway_guid as string,",
						"          gateway_label as string,",
						"          transactionID as string,",
						"          bankAccount_guid as string,",
						"          bankAccount_label as string,",
						"          channel_guid as string,",
						"          channel_label as string,",
						"          channelType as string,",
						"          detail_guid as string,",
						"          extra_guid as string,",
						"          priceList as string,",
						"          event as string,",
						"          detailType as string,",
						"          detail_text as string,",
						"          detail_label as string,",
						"          detail_count as integer,",
						"          paymentDetail_guid as string,",
						"          detail_payingPartecipants as integer,",
						"          detail_quantity as integer,",
						"          tickets_quantity as integer,",
						"          pax_quantity as integer,",
						"          costCenter_guid as string,",
						"          costCenter_label as string,",
						"          object_receipt as integer,",
						"          object_taxCode as string,",
						"          object_taxNotes as string,",
						"          object_amount as decimal(10,2),",
						"          object_taxPercentage as decimal(10,2),",
						"          amount as decimal(10,2),",
						"          amountNet as decimal(10,2),",
						"          amountPresale as decimal(10,2),",
						"          amountSold as decimal(10,2),",
						"          amountPayed as decimal(10,2),",
						"          amountPending as decimal(10,2),",
						"          amountCanceled as decimal(10,2),",
						"          externalId as string,",
						"          amountRefunded as decimal(10,2),",
						"          invoiceSummary as decimal(10,2),",
						"          eventCalendar_guid as string,",
						"          passDetail_guid as string,",
						"          paymentCostCenter_guid as string,",
						"          organization_guid as string,",
						"          venue_guid as string,",
						"          olapUpdateTimestamp as date,",
						"          row_id as string,",
						"          operationType as string,",
						"          operationTimestamp as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceHistorical",
						"SourceHistorical filter(row_id == $row_id) ~> FilterByRowId",
						"FilterByRowId select(mapColumn(",
						"          each(match(true()))",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectRequiredFields",
						"SelectRequiredFields sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['temp_lookup_historical.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SinkTemp"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Mida_Historical_Parquet')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Mida_Temp_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida2_Atomic_LOOKUP_Summary')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Summary_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceSummaryFile"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkTemp"
						}
					],
					"transformations": [
						{
							"name": "FilterByRowId"
						},
						{
							"name": "SelectLookupFields"
						}
					],
					"scriptLines": [
						"parameters{",
						"     row_id as string",
						"}",
						"source(output(",
						"          row_id as string,",
						"          reservation_code as string,",
						"          priceList as string,",
						"          channel_label as string,",
						"          pax_quantity as integer,",
						"          insertTimestamp as date,",
						"          updateTimestamp as date,",
						"          reservation_amount as decimal(10,2),",
						"          visitDate as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceSummaryFile",
						"SourceSummaryFile filter(row_id == $row_id) ~> FilterByRowId",
						"FilterByRowId select(mapColumn(",
						"          row_id,",
						"          reservation_code,",
						"          visitDate,",
						"          updateTimestamp,",
						"          reservation_amount,",
						"          pax_quantity",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectLookupFields",
						"SelectLookupFields sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['temp_lookup_summary.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SinkTemp"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Mida_Bookings_Summary_Parquet')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Mida_Temp_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida2_Atomic_UPDATE_Booking_Complete')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "VFD_Big_Data_DL",
								"type": "LinkedServiceReference"
							},
							"name": "DummySource"
						},
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Complete_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceExistingContent"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkTemp"
						}
					],
					"transformations": [
						{
							"name": "CreateNewRecord"
						},
						{
							"name": "SelectNewColumns"
						},
						{
							"name": "FilterOutOldRecord"
						},
						{
							"name": "UnionRecords"
						}
					],
					"scriptLines": [
						"parameters{",
						"     guid_pk as string,",
						"     reservation_progressiveCode as string,",
						"     reservation_code as string,",
						"     reservation_status as integer,",
						"     invoiceRequired as string,",
						"     customer as decimal(10,2),",
						"     visitDate as string,",
						"     reservationPayment_guid as string,",
						"     parentPayment_guid as string,",
						"     sliced as string,",
						"     reservation_guid as string,",
						"     group_guid as string,",
						"     group_label as string,",
						"     group_email as string,",
						"     paymentCode as string,",
						"     paymentCondition as decimal(10,2),",
						"     reservation_amount as decimal(10,2),",
						"     reservation_amountTax as decimal(10,2),",
						"     status as integer,",
						"     status_text as string,",
						"     stamp as string,",
						"     notes as string,",
						"     transactionType as string,",
						"     transactionType_text as string,",
						"     paymentLimitDate as string,",
						"     paymentDate as string,",
						"     refund as string,",
						"     refunded as string,",
						"     convention_label as string,",
						"     receiptCode as string,",
						"     insertTimestamp as string,",
						"     updateTimestamp as string,",
						"     owner as string,",
						"     owner_text as string,",
						"     sessionId as string,",
						"     terminal_label as string,",
						"     terminalGroup_label as string,",
						"     gateway_guid as string,",
						"     gateway_label as string,",
						"     transactionID as string,",
						"     bankAccount_guid as string,",
						"     bankAccount_label as string,",
						"     channel_guid as string,",
						"     channel_label as string,",
						"     channelType as string,",
						"     detail_guid as string,",
						"     extra_guid as string,",
						"     priceList as string,",
						"     event as string,",
						"     detailType as string,",
						"     detail_text as string,",
						"     detail_label as string,",
						"     detail_count as integer,",
						"     paymentDetail_guid as string,",
						"     detail_payingPartecipants as integer,",
						"     detail_quantity as integer,",
						"     tickets_quantity as integer,",
						"     pax_quantity as integer,",
						"     costCenter_guid as string,",
						"     costCenter_label as string,",
						"     object_receipt as integer,",
						"     object_taxCode as string,",
						"     object_taxNotes as string,",
						"     object_amount as decimal(10,2),",
						"     object_taxPercentage as decimal(10,2),",
						"     amount as decimal(10,2),",
						"     amountNet as decimal(10,2),",
						"     amountPresale as decimal(10,2),",
						"     amountSold as decimal(10,2),",
						"     amountPayed as decimal(10,2),",
						"     amountPending as decimal(10,2),",
						"     amountCanceled as decimal(10,2),",
						"     externalId as string,",
						"     amountRefunded as decimal(10,2),",
						"     invoiceSummary as string,",
						"     eventCalendar_guid as string,",
						"     passDetail_guid as string,",
						"     paymentCostCenter_guid as string,",
						"     organization_guid as string,",
						"     venue_guid as string,",
						"     olapUpdateTimestamp as string,",
						"     row_id as string",
						"}",
						"source(output(",
						"          dummy as integer",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'dummy',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     data: 'dummy\\n1') ~> DummySource",
						"source(output(",
						"          guid_pk as string,",
						"          reservation_progressiveCode as string,",
						"          reservation_code as string,",
						"          reservation_status as integer,",
						"          invoiceRequired as string,",
						"          customer as decimal(10,2),",
						"          visitDate as date,",
						"          reservationPayment_guid as string,",
						"          parentPayment_guid as string,",
						"          sliced as string,",
						"          reservation_guid as string,",
						"          group_guid as string,",
						"          group_label as string,",
						"          group_email as string,",
						"          paymentCode as string,",
						"          paymentCondition as decimal(10,2),",
						"          reservation_amount as decimal(10,2),",
						"          reservation_amountTax as decimal(10,2),",
						"          status as integer,",
						"          status_text as string,",
						"          stamp as string,",
						"          notes as string,",
						"          transactionType as string,",
						"          transactionType_text as string,",
						"          paymentLimitDate as date,",
						"          paymentDate as date,",
						"          refund as string,",
						"          refunded as string,",
						"          convention_label as string,",
						"          receiptCode as string,",
						"          insertTimestamp as date,",
						"          updateTimestamp as date,",
						"          owner as string,",
						"          owner_text as string,",
						"          sessionId as string,",
						"          terminal_label as string,",
						"          terminalGroup_label as string,",
						"          gateway_guid as string,",
						"          gateway_label as string,",
						"          transactionID as string,",
						"          bankAccount_guid as string,",
						"          bankAccount_label as string,",
						"          channel_guid as string,",
						"          channel_label as string,",
						"          channelType as string,",
						"          detail_guid as string,",
						"          extra_guid as string,",
						"          priceList as string,",
						"          event as string,",
						"          detailType as string,",
						"          detail_text as string,",
						"          detail_label as string,",
						"          detail_count as integer,",
						"          paymentDetail_guid as string,",
						"          detail_payingPartecipants as integer,",
						"          detail_quantity as integer,",
						"          tickets_quantity as integer,",
						"          pax_quantity as integer,",
						"          costCenter_guid as string,",
						"          costCenter_label as string,",
						"          object_receipt as integer,",
						"          object_taxCode as string,",
						"          object_taxNotes as string,",
						"          object_amount as decimal(10,2),",
						"          object_taxPercentage as decimal(10,2),",
						"          amount as decimal(10,2),",
						"          amountNet as decimal(10,2),",
						"          amountPresale as decimal(10,2),",
						"          amountSold as decimal(10,2),",
						"          amountPayed as decimal(10,2),",
						"          amountPending as decimal(10,2),",
						"          amountCanceled as decimal(10,2),",
						"          externalId as string,",
						"          amountRefunded as decimal(10,2),",
						"          invoiceSummary as string,",
						"          eventCalendar_guid as string,",
						"          passDetail_guid as string,",
						"          paymentCostCenter_guid as string,",
						"          organization_guid as string,",
						"          venue_guid as string,",
						"          olapUpdateTimestamp as date,",
						"          row_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceExistingContent",
						"DummySource derive(guid_pk = $guid_pk,",
						"          reservation_progressiveCode = $reservation_progressiveCode,",
						"          reservation_code = $reservation_code,",
						"          reservation_status = $reservation_status,",
						"          invoiceRequired = $invoiceRequired,",
						"          customer = $customer,",
						"          visitDate = toDate($visitDate, 'yyyy-MM-dd'),",
						"          reservationPayment_guid = $reservationPayment_guid,",
						"          parentPayment_guid = $parentPayment_guid,",
						"          sliced = $sliced,",
						"          reservation_guid = $reservation_guid,",
						"          group_guid = $group_guid,",
						"          group_label = $group_label,",
						"          group_email = $group_email,",
						"          paymentCode = $paymentCode,",
						"          paymentCondition = $paymentCondition,",
						"          reservation_amount = $reservation_amount,",
						"          reservation_amountTax = $reservation_amountTax,",
						"          status = $status,",
						"          status_text = $status_text,",
						"          stamp = $stamp,",
						"          notes = $notes,",
						"          transactionType = $transactionType,",
						"          transactionType_text = $transactionType_text,",
						"          paymentLimitDate = toDate($paymentLimitDate, 'yyyy-MM-dd'),",
						"          paymentDate = toDate($paymentDate, 'yyyy-MM-dd'),",
						"          refund = $refund,",
						"          refunded = $refunded,",
						"          convention_label = $convention_label,",
						"          receiptCode = $receiptCode,",
						"          insertTimestamp = toDate($insertTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          updateTimestamp = toDate($updateTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          owner = $owner,",
						"          owner_text = $owner_text,",
						"          sessionId = $sessionId,",
						"          terminal_label = $terminal_label,",
						"          terminalGroup_label = $terminalGroup_label,",
						"          gateway_guid = $gateway_guid,",
						"          gateway_label = $gateway_label,",
						"          transactionID = $transactionID,",
						"          bankAccount_guid = $bankAccount_guid,",
						"          bankAccount_label = $bankAccount_label,",
						"          channel_guid = $channel_guid,",
						"          channel_label = $channel_label,",
						"          channelType = $channelType,",
						"          detail_guid = $detail_guid,",
						"          extra_guid = $extra_guid,",
						"          priceList = $priceList,",
						"          event = $event,",
						"          detailType = $detailType,",
						"          detail_text = $detail_text,",
						"          detail_label = $detail_label,",
						"          detail_count = $detail_count,",
						"          paymentDetail_guid = $paymentDetail_guid,",
						"          detail_payingPartecipants = $detail_payingPartecipants,",
						"          detail_quantity = $detail_quantity,",
						"          tickets_quantity = $tickets_quantity,",
						"          pax_quantity = $pax_quantity,",
						"          costCenter_guid = $costCenter_guid,",
						"          costCenter_label = $costCenter_label,",
						"          object_receipt = $object_receipt,",
						"          object_taxCode = $object_taxCode,",
						"          object_taxNotes = $object_taxNotes,",
						"          object_amount = $object_amount,",
						"          object_taxPercentage = $object_taxPercentage,",
						"          amount = $amount,",
						"          amountNet = $amountNet,",
						"          amountPresale = $amountPresale,",
						"          amountSold = $amountSold,",
						"          amountPayed = $amountPayed,",
						"          amountPending = $amountPending,",
						"          amountCanceled = $amountCanceled,",
						"          externalId = $externalId,",
						"          amountRefunded = $amountRefunded,",
						"          invoiceSummary = $invoiceSummary,",
						"          eventCalendar_guid = $eventCalendar_guid,",
						"          passDetail_guid = $passDetail_guid,",
						"          paymentCostCenter_guid = $paymentCostCenter_guid,",
						"          organization_guid = $organization_guid,",
						"          venue_guid = $venue_guid,",
						"          olapUpdateTimestamp = toDate($olapUpdateTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          row_id = $row_id) ~> CreateNewRecord",
						"CreateNewRecord select(mapColumn(",
						"          guid_pk,",
						"          reservation_progressiveCode,",
						"          reservation_code,",
						"          reservation_status,",
						"          invoiceRequired,",
						"          customer,",
						"          visitDate,",
						"          reservationPayment_guid,",
						"          parentPayment_guid,",
						"          sliced,",
						"          reservation_guid,",
						"          group_guid,",
						"          group_label,",
						"          group_email,",
						"          paymentCode,",
						"          paymentCondition,",
						"          reservation_amount,",
						"          reservation_amountTax,",
						"          status,",
						"          status_text,",
						"          stamp,",
						"          notes,",
						"          transactionType,",
						"          transactionType_text,",
						"          paymentLimitDate,",
						"          paymentDate,",
						"          refund,",
						"          refunded,",
						"          convention_label,",
						"          receiptCode,",
						"          insertTimestamp,",
						"          updateTimestamp,",
						"          owner,",
						"          owner_text,",
						"          sessionId,",
						"          terminal_label,",
						"          terminalGroup_label,",
						"          gateway_guid,",
						"          gateway_label,",
						"          transactionID,",
						"          bankAccount_guid,",
						"          bankAccount_label,",
						"          channel_guid,",
						"          channel_label,",
						"          channelType,",
						"          detail_guid,",
						"          extra_guid,",
						"          priceList,",
						"          event,",
						"          detailType,",
						"          detail_text,",
						"          detail_label,",
						"          detail_count,",
						"          paymentDetail_guid,",
						"          detail_payingPartecipants,",
						"          detail_quantity,",
						"          tickets_quantity,",
						"          pax_quantity,",
						"          costCenter_guid,",
						"          costCenter_label,",
						"          object_receipt,",
						"          object_taxCode,",
						"          object_taxNotes,",
						"          object_amount,",
						"          object_taxPercentage,",
						"          amount,",
						"          amountNet,",
						"          amountPresale,",
						"          amountSold,",
						"          amountPayed,",
						"          amountPending,",
						"          amountCanceled,",
						"          externalId,",
						"          amountRefunded,",
						"          invoiceSummary,",
						"          eventCalendar_guid,",
						"          passDetail_guid,",
						"          paymentCostCenter_guid,",
						"          organization_guid,",
						"          venue_guid,",
						"          olapUpdateTimestamp,",
						"          row_id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectNewColumns",
						"SourceExistingContent filter(row_id != $row_id) ~> FilterOutOldRecord",
						"FilterOutOldRecord, SelectNewColumns union(byName: true)~> UnionRecords",
						"UnionRecords sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['temp_update_complete.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SinkTemp"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Mida_Bookings_Complete_Parquet')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Mida_Temp_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida2_Atomic_UPDATE_Booking_Summary')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Mida2/Bookings/Atomic"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "VFD_Big_Data_DL",
								"type": "LinkedServiceReference"
							},
							"name": "DummySource"
						},
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Summary_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceExistingContent"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkTemp"
						}
					],
					"transformations": [
						{
							"name": "CreateNewSummaryRecord"
						},
						{
							"name": "SelectSummaryFields"
						},
						{
							"name": "FilterOutOldRecord"
						},
						{
							"name": "UnionRecords"
						}
					],
					"scriptLines": [
						"parameters{",
						"     row_id as string,",
						"     reservation_code as string,",
						"     priceList as string,",
						"     channel_label as string,",
						"     pax_quantity as integer,",
						"     insertTimestamp as string,",
						"     updateTimestamp as string,",
						"     reservation_amount as decimal(10,2),",
						"     visitDate as string",
						"}",
						"source(output(",
						"          dummy as integer",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'dummy',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     data: 'dummy\\n1') ~> DummySource",
						"source(output(",
						"          row_id as string,",
						"          reservation_code as string,",
						"          priceList as string,",
						"          channel_label as string,",
						"          pax_quantity as integer,",
						"          insertTimestamp as date,",
						"          updateTimestamp as date,",
						"          reservation_amount as decimal(10,2),",
						"          visitDate as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceExistingContent",
						"DummySource derive(row_id = $row_id,",
						"          reservation_code = $reservation_code,",
						"          priceList = $priceList,",
						"          channel_label = $channel_label,",
						"          pax_quantity = $pax_quantity,",
						"          insertTimestamp = toDate($insertTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          updateTimestamp = toDate($updateTimestamp, 'yyyy-MM-dd HH:mm:ss'),",
						"          reservation_amount = $reservation_amount,",
						"          visitDate = toDate($visitDate, 'yyyy-MM-dd')) ~> CreateNewSummaryRecord",
						"CreateNewSummaryRecord select(mapColumn(",
						"          row_id,",
						"          reservation_code,",
						"          priceList,",
						"          channel_label,",
						"          pax_quantity,",
						"          insertTimestamp,",
						"          updateTimestamp,",
						"          reservation_amount,",
						"          visitDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSummaryFields",
						"SourceExistingContent filter(row_id != $row_id) ~> FilterOutOldRecord",
						"FilterOutOldRecord, SelectSummaryFields union(byName: true)~> UnionRecords",
						"UnionRecords sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['temp_update_summary.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SinkTemp"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Mida_Bookings_Summary_Parquet')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Mida_Temp_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida_Bookings_Processed_Curated_Daily')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Dataflow per filtrare colonne dal parquet processed e scrivere su un file fisso",
				"folder": {
					"name": "Mida/Bookings"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Processed_Mida_Bookings_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceProcessed"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Bookings_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkCurated"
						}
					],
					"transformations": [
						{
							"name": "TransformData"
						},
						{
							"name": "SelectFields"
						}
					],
					"scriptLines": [
						"parameters{",
						"     folderPath as string (\"folder\"),",
						"     fileName as string (\"file\")",
						"}",
						"source(output(",
						"          guid_pk as string,",
						"          reservation_progressiveCode as string,",
						"          reservation_code as string,",
						"          reservation_status as integer,",
						"          invoiceRequired as string,",
						"          customer as decimal(10,2),",
						"          visitDate as date,",
						"          reservationPayment_guid as string,",
						"          parentPayment_guid as string,",
						"          sliced as string,",
						"          reservation_guid as string,",
						"          group_guid as string,",
						"          group_label as string,",
						"          group_email as string,",
						"          paymentCode as string,",
						"          paymentCondition as decimal(10,2),",
						"          reservation_amount as decimal(10,2),",
						"          reservation_amountTax as decimal(10,2),",
						"          status as integer,",
						"          status_text as string,",
						"          stamp as string,",
						"          notes as decimal(10,2),",
						"          transactionType as string,",
						"          transactionType_text as string,",
						"          paymentLimitDate as date,",
						"          paymentDate as date,",
						"          refund as string,",
						"          refunded as string,",
						"          convention_label as string,",
						"          receiptCode as decimal(10,2),",
						"          insertTimestamp as date,",
						"          updateTimestamp as date,",
						"          owner as string,",
						"          owner_text as string,",
						"          sessionId as string,",
						"          terminal_label as decimal(10,2),",
						"          terminalGroup_label as decimal(10,2),",
						"          gateway_guid as string,",
						"          gateway_label as string,",
						"          transactionID as string,",
						"          bankAccount_guid as decimal(10,2),",
						"          bankAccount_label as decimal(10,2),",
						"          channel_guid as string,",
						"          channel_label as string,",
						"          channelType as string,",
						"          detail_guid as string,",
						"          extra_guid as decimal(10,2),",
						"          priceList as string,",
						"          event as string,",
						"          detailType as string,",
						"          detail_text as string,",
						"          detail_label as string,",
						"          detail_count as integer,",
						"          paymentDetail_guid as string,",
						"          detail_payingPartecipants as integer,",
						"          detail_quantity as integer,",
						"          tickets_quantity as integer,",
						"          pax_quantity as integer,",
						"          costCenter_guid as string,",
						"          costCenter_label as string,",
						"          object_receipt as integer,",
						"          object_taxCode as string,",
						"          object_taxNotes as string,",
						"          object_amount as decimal(10,2),",
						"          object_taxPercentage as decimal(10,2),",
						"          amount as decimal(10,2),",
						"          amountNet as decimal(10,2),",
						"          amountPresale as decimal(10,2),",
						"          amountSold as decimal(10,2),",
						"          amountPayed as decimal(10,2),",
						"          amountPending as decimal(10,2),",
						"          amountCanceled as decimal(10,2),",
						"          externalId as string,",
						"          amountRefunded as decimal(10,2),",
						"          invoiceSummary as decimal(10,2),",
						"          eventCalendar_guid as string,",
						"          passDetail_guid as decimal(10,2),",
						"          paymentCostCenter_guid as decimal(10,2),",
						"          organization_guid as string,",
						"          venue_guid as string,",
						"          olapUpdateTimestamp as date,",
						"          row_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     folderPath: folderPath,",
						"     fileName: fileName) ~> SourceProcessed",
						"SourceProcessed derive(adjusted_pax_quantity = iif(status == 6 || status == 7 || status == 101, pax_quantity * -1, pax_quantity),",
						"          adjusted_tickets_quantity = iif(status == 6 || status == 7 || status == 101, tickets_quantity * -1, tickets_quantity),",
						"          adjusted_amount = iif(status == 6 || status == 7 || status == 101, amount * -1, amount)) ~> TransformData",
						"TransformData select(mapColumn(",
						"          pax_quantity = adjusted_pax_quantity,",
						"          priceList,",
						"          tickets_quantity = adjusted_tickets_quantity,",
						"          amount = adjusted_amount,",
						"          visitDate,",
						"          channel_label,",
						"          transactionType_text,",
						"          insertTimestamp,",
						"          paymentDate,",
						"          secondaryVisitDate = visitDate,",
						"          status,",
						"          status_text",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> SelectFields",
						"SelectFields sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['VFD_DFL_Mida_Bookings_Processed_Curated_Daily_output.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     partitionBy('hash', 1),",
						"     fileName: 'VFD_DFL_Mida_Sales_Curated_output.parquet') ~> SinkCurated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Processed_Mida_Bookings_Parquet')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Mida_Bookings_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida_Seals_Processed_Curated_Daily')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Dataflow per selezionare campi rilevanti dal parquet processed",
				"folder": {
					"name": "Mida/Seals"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Processed_Mida_Seals_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceProcessed"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Seals_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkCurated"
						}
					],
					"transformations": [
						{
							"name": "SelectFields"
						}
					],
					"scriptLines": [
						"source(output(",
						"          sealCode as string,",
						"          reservationCode as string,",
						"          TicketLabel as string,",
						"          EventLabel as string,",
						"          List as string,",
						"          externalCode as string,",
						"          processing_date as timestamp,",
						"          data_source as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceProcessed",
						"SourceProcessed select(mapColumn(",
						"          sealCode,",
						"          reservationCode,",
						"          ticketLabel = TicketLabel,",
						"          eventLabel = EventLabel,",
						"          list = List,",
						"          externalCode,",
						"          processing_date",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> SelectFields",
						"SelectFields sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['VFD_DFL_Mida_Seals_Processed_Curated_Daily_output.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     partitionBy('hash', 1),",
						"     compressionCodec: 'snappy') ~> SinkCurated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Processed_Mida_Seals_Parquet')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Mida_Seals_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida_Seals_Raw_Processed')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Dataflow per convertire Excel Seals in Parquet con conversioni di tipo",
				"folder": {
					"name": "Mida/Seals"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Raw_Mida_Seals_Excel",
								"type": "DatasetReference"
							},
							"name": "SourceExcel"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Processed_Mida_Seals_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkParquet",
							"rejectedDataLinkedService": {
								"referenceName": "VFD_Big_Data_DL",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "dataTypeConversions"
						}
					],
					"scriptLines": [
						"source(output(",
						"          sealCode as string,",
						"          reservationCode as string,",
						"          TicketLabel as string,",
						"          EventLabel as string,",
						"          List as string,",
						"          externalCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourceExcel",
						"SourceExcel derive(processing_date = currentUTC(),",
						"          data_source = 'mida_seals') ~> dataTypeConversions",
						"dataTypeConversions sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['VFD_DFL_Mida_Seals_Raw_Processed_output.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     partitionBy('hash', 1),",
						"     compressionCodec: 'snappy') ~> SinkParquet"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Raw_Mida_Seals_Excel')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Processed_Mida_Seals_Parquet')]",
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida_Users_Processed_Curated_Daily')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Dataflow per filtrare colonne dal parquet processed e scrivere su un file fisso",
				"folder": {
					"name": "Mida/Users"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Processed_Mida_Bookings_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceProcessed"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Users_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkCurated"
						}
					],
					"transformations": [
						{
							"name": "SelectFields"
						}
					],
					"scriptLines": [
						"parameters{",
						"     folderPath as string (\"folder\"),",
						"     fileName as string (\"file\")",
						"}",
						"source(output(",
						"          guid_pk as string,",
						"          reservation_progressiveCode as string,",
						"          reservation_code as string,",
						"          reservation_status as integer,",
						"          invoiceRequired as string,",
						"          customer as decimal(10,2),",
						"          visitDate as date,",
						"          reservationPayment_guid as string,",
						"          parentPayment_guid as string,",
						"          sliced as string,",
						"          reservation_guid as string,",
						"          group_guid as string,",
						"          group_label as string,",
						"          group_email as string,",
						"          paymentCode as string,",
						"          paymentCondition as decimal(10,2),",
						"          reservation_amount as decimal(10,2),",
						"          reservation_amountTax as decimal(10,2),",
						"          status as integer,",
						"          status_text as string,",
						"          stamp as string,",
						"          notes as decimal(10,2),",
						"          transactionType as string,",
						"          transactionType_text as string,",
						"          paymentLimitDate as date,",
						"          paymentDate as date,",
						"          refund as string,",
						"          refunded as string,",
						"          convention_label as string,",
						"          receiptCode as decimal(10,2),",
						"          insertTimestamp as date,",
						"          updateTimestamp as date,",
						"          owner as string,",
						"          owner_text as string,",
						"          sessionId as string,",
						"          terminal_label as decimal(10,2),",
						"          terminalGroup_label as decimal(10,2),",
						"          gateway_guid as string,",
						"          gateway_label as string,",
						"          transactionID as string,",
						"          bankAccount_guid as decimal(10,2),",
						"          bankAccount_label as decimal(10,2),",
						"          channel_guid as string,",
						"          channel_label as string,",
						"          channelType as string,",
						"          detail_guid as string,",
						"          extra_guid as decimal(10,2),",
						"          priceList as string,",
						"          event as string,",
						"          detailType as string,",
						"          detail_text as string,",
						"          detail_label as string,",
						"          detail_count as integer,",
						"          paymentDetail_guid as string,",
						"          detail_payingPartecipants as integer,",
						"          detail_quantity as integer,",
						"          tickets_quantity as integer,",
						"          pax_quantity as integer,",
						"          costCenter_guid as string,",
						"          costCenter_label as string,",
						"          object_receipt as integer,",
						"          object_taxCode as string,",
						"          object_taxNotes as string,",
						"          object_amount as decimal(10,2),",
						"          object_taxPercentage as decimal(10,2),",
						"          amount as decimal(10,2),",
						"          amountNet as decimal(10,2),",
						"          amountPresale as decimal(10,2),",
						"          amountSold as decimal(10,2),",
						"          amountPayed as decimal(10,2),",
						"          amountPending as decimal(10,2),",
						"          amountCanceled as decimal(10,2),",
						"          externalId as string,",
						"          amountRefunded as decimal(10,2),",
						"          invoiceSummary as decimal(10,2),",
						"          eventCalendar_guid as string,",
						"          passDetail_guid as decimal(10,2),",
						"          paymentCostCenter_guid as decimal(10,2),",
						"          organization_guid as string,",
						"          venue_guid as string,",
						"          olapUpdateTimestamp as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     folderPath: folderPath,",
						"     fileName: fileName) ~> SourceProcessed",
						"SourceProcessed select(mapColumn(",
						"          reservation_progressiveCode,",
						"          reservation_code,",
						"          group_label,",
						"          group_email",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> SelectFields",
						"SelectFields sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['VFD_DFL_Mida_Bookings_Processed_Curated_Daily_output.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     partitionBy('hash', 1),",
						"     fileName: 'VFD_DFL_Mida_Sales_Curated_output.parquet') ~> SinkCurated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Processed_Mida_Bookings_Parquet')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Mida_Users_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida_Validations_Processed_Curated_Daily')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Dataflow per selezionare campi rilevanti dal parquet processed",
				"folder": {
					"name": "Mida/Validations"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Processed_Mida_Validations_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceProcessed"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Validations_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkCurated"
						}
					],
					"transformations": [
						{
							"name": "SelectFields"
						}
					],
					"scriptLines": [
						"source(output(",
						"          event_guid as string,",
						"          siae as integer,",
						"          seal as string,",
						"          reservationCode as string,",
						"          inGateTimestamp as timestamp,",
						"          entranceLabel as string,",
						"          passCode as string,",
						"          externalCode as string,",
						"          processing_date as timestamp,",
						"          data_source as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceProcessed",
						"SourceProcessed select(mapColumn(",
						"          event_guid,",
						"          siae,",
						"          seal,",
						"          reservationCode,",
						"          inGateTimestamp,",
						"          entranceLabel,",
						"          passCode,",
						"          externalCode,",
						"          processing_date,",
						"          data_source",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> SelectFields",
						"SelectFields sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['VFD_DFL_Mida_Validations_Processed_Curated_Daily_output.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     partitionBy('hash', 1),",
						"     compressionCodec: 'snappy') ~> SinkCurated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Processed_Mida_Validations_Parquet')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Mida_Validations_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Mida_Validations_Raw_Processed')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Dataflow per convertire Excel Validations in Parquet con conversioni di tipo",
				"folder": {
					"name": "Mida/Validations"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Raw_Mida_Validations_Excel",
								"type": "DatasetReference"
							},
							"name": "SourceExcel"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Processed_Mida_Validations_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkParquet",
							"rejectedDataLinkedService": {
								"referenceName": "VFD_Big_Data_DL",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "dataTypeConversions"
						}
					],
					"scriptLines": [
						"source(output(",
						"          event_guid as string,",
						"          siae as integer,",
						"          seal as string,",
						"          reservationCode as string,",
						"          inGateTimestamp as string,",
						"          entranceLabel as string,",
						"          passCode as string,",
						"          externalCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourceExcel",
						"SourceExcel derive(processing_date = currentUTC(),",
						"          data_source = 'mida_validations') ~> dataTypeConversions",
						"dataTypeConversions sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['VFD_DFL_Mida_Validations_Raw_Processed_output.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     partitionBy('hash', 1),",
						"     compressionCodec: 'snappy') ~> SinkParquet"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Raw_Mida_Validations_Excel')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Processed_Mida_Validations_Parquet')]",
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Test_Single_Parameter')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Test"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Processed_Mida_Bookings_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceProcessed"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkTest"
						}
					],
					"transformations": [
						{
							"name": "FilterByParam"
						}
					],
					"scriptLines": [
						"parameters{",
						"     test_param as string",
						"}",
						"source(output(",
						"          guid_pk as string,",
						"          reservation_progressiveCode as string,",
						"          reservation_code as string,",
						"          reservation_status as integer,",
						"          invoiceRequired as string,",
						"          customer as decimal(10,2),",
						"          visitDate as date,",
						"          reservationPayment_guid as string,",
						"          parentPayment_guid as string,",
						"          sliced as string,",
						"          reservation_guid as string,",
						"          group_guid as string,",
						"          group_label as string,",
						"          group_email as string,",
						"          paymentCode as string,",
						"          paymentCondition as decimal(10,2),",
						"          reservation_amount as decimal(10,2),",
						"          reservation_amountTax as decimal(10,2),",
						"          status as integer,",
						"          status_text as string,",
						"          stamp as string,",
						"          notes as decimal(10,2),",
						"          transactionType as string,",
						"          transactionType_text as string,",
						"          paymentLimitDate as date,",
						"          paymentDate as date,",
						"          refund as string,",
						"          refunded as string,",
						"          convention_label as string,",
						"          receiptCode as decimal(10,2),",
						"          insertTimestamp as date,",
						"          updateTimestamp as date,",
						"          owner as string,",
						"          owner_text as string,",
						"          sessionId as string,",
						"          terminal_label as decimal(10,2),",
						"          terminalGroup_label as decimal(10,2),",
						"          gateway_guid as string,",
						"          gateway_label as string,",
						"          transactionID as string,",
						"          bankAccount_guid as decimal(10,2),",
						"          bankAccount_label as decimal(10,2),",
						"          channel_guid as string,",
						"          channel_label as string,",
						"          channelType as string,",
						"          detail_guid as string,",
						"          extra_guid as decimal(10,2),",
						"          priceList as string,",
						"          event as string,",
						"          detailType as string,",
						"          detail_text as string,",
						"          detail_label as string,",
						"          detail_count as integer,",
						"          paymentDetail_guid as string,",
						"          detail_payingPartecipants as integer,",
						"          detail_quantity as integer,",
						"          tickets_quantity as integer,",
						"          pax_quantity as integer,",
						"          costCenter_guid as string,",
						"          costCenter_label as string,",
						"          object_receipt as integer,",
						"          object_taxCode as string,",
						"          object_taxNotes as string,",
						"          object_amount as decimal(10,2),",
						"          object_taxPercentage as decimal(10,2),",
						"          amount as decimal(10,2),",
						"          amountNet as decimal(10,2),",
						"          amountPresale as decimal(10,2),",
						"          amountSold as decimal(10,2),",
						"          amountPayed as decimal(10,2),",
						"          amountPending as decimal(10,2),",
						"          amountCanceled as decimal(10,2),",
						"          externalId as string,",
						"          amountRefunded as decimal(10,2),",
						"          invoiceSummary as decimal(10,2),",
						"          eventCalendar_guid as string,",
						"          passDetail_guid as decimal(10,2),",
						"          paymentCostCenter_guid as decimal(10,2),",
						"          organization_guid as string,",
						"          venue_guid as string,",
						"          olapUpdateTimestamp as date,",
						"          row_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceProcessed",
						"SourceProcessed filter(reservation_code == $test_param) ~> FilterByParam",
						"FilterByParam sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['test_output.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SinkTest"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Processed_Mida_Bookings_Parquet')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Mida_Temp_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Weather_Raw_Processed')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Conversione CSV meteo in Parquet senza modifiche",
				"folder": {
					"name": "Visual Crossing/Weather"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Raw_Weather_CSV",
								"type": "DatasetReference"
							},
							"name": "SourceRaw"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Processed_Weather_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkProcessed",
							"rejectedDataLinkedService": {
								"referenceName": "VFD_Big_Data_DL",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "AddProcessingMetadata"
						}
					],
					"scriptLines": [
						"source(output(",
						"          name as string,",
						"          datetime as string,",
						"          tempmax as double,",
						"          tempmin as double,",
						"          temp as double,",
						"          feelslikemax as double,",
						"          feelslikemin as double,",
						"          feelslike as double,",
						"          humidity as double,",
						"          precip as double,",
						"          precipprob as double,",
						"          preciptype as string,",
						"          windgust as double,",
						"          windspeed as double,",
						"          cloudcover as double,",
						"          visibility as double,",
						"          sunset as string,",
						"          conditions as string,",
						"          description as string,",
						"          icon as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourceRaw",
						"SourceRaw derive(processing_date = currentUTC(),",
						"          data_source = 'visual_crossing_api',",
						"          datetime_parsed = toDate(datetime)) ~> AddProcessingMetadata",
						"AddProcessingMetadata sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['VFD_DFL_Weather_Raw_Processed_output.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     partitionBy('hash', 1),",
						"     compressionCodec: 'snappy') ~> SinkProcessed"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Raw_Weather_CSV')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Processed_Weather_Parquet')]",
				"[concat(variables('factoryId'), '/linkedServices/VFD_Big_Data_DL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VFD_DFL_Weather_Single_Row_To_Monthly')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Aggiorna file mensile con singola riga filtrata per data",
				"folder": {
					"name": "Visual Crossing/Weather"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Processed_Weather_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceProcessed"
						},
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Weather_Parquet",
								"type": "DatasetReference"
							},
							"name": "SourceCuratedExisting"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VFD_DS_Curated_Weather_Parquet",
								"type": "DatasetReference"
							},
							"name": "SinkCurated"
						}
					],
					"transformations": [
						{
							"name": "FilterTargetDate"
						},
						{
							"name": "RemoveTargetDateFromExisting"
						},
						{
							"name": "UnionWithExisting"
						},
						{
							"name": "SortByDate"
						}
					],
					"scriptLines": [
						"parameters{",
						"     target_date as string",
						"}",
						"source(output(",
						"          name as string,",
						"          datetime as string,",
						"          tempmax as double,",
						"          tempmin as double,",
						"          temp as double,",
						"          feelslikemax as double,",
						"          feelslikemin as double,",
						"          feelslike as double,",
						"          humidity as double,",
						"          precip as double,",
						"          precipprob as double,",
						"          preciptype as string,",
						"          windgust as double,",
						"          windspeed as double,",
						"          cloudcover as double,",
						"          visibility as double,",
						"          sunset as string,",
						"          conditions as string,",
						"          description as string,",
						"          icon as string,",
						"          processing_date as timestamp,",
						"          data_source as string,",
						"          datetime_parsed as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceProcessed",
						"source(output(",
						"          name as string,",
						"          datetime as string,",
						"          tempmax as double,",
						"          tempmin as double,",
						"          temp as double,",
						"          feelslikemax as double,",
						"          feelslikemin as double,",
						"          feelslike as double,",
						"          humidity as double,",
						"          precip as double,",
						"          precipprob as double,",
						"          preciptype as string,",
						"          windgust as double,",
						"          windspeed as double,",
						"          cloudcover as double,",
						"          visibility as double,",
						"          sunset as string,",
						"          conditions as string,",
						"          description as string,",
						"          icon as string,",
						"          processing_date as timestamp,",
						"          data_source as string,",
						"          datetime_parsed as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     format: 'parquet') ~> SourceCuratedExisting",
						"SourceProcessed filter(datetime == $target_date) ~> FilterTargetDate",
						"SourceCuratedExisting filter(datetime != $target_date) ~> RemoveTargetDateFromExisting",
						"FilterTargetDate, RemoveTargetDateFromExisting union(byName: true)~> UnionWithExisting",
						"UnionWithExisting sort(asc(datetime, false)) ~> SortByDate",
						"SortByDate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['VFD_DFL_Weather_Single_Row_To_Monthly_output.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     partitionBy('hash', 1),",
						"     compressionCodec: 'snappy') ~> SinkCurated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Processed_Weather_Parquet')]",
				"[concat(variables('factoryId'), '/datasets/VFD_DS_Curated_Weather_Parquet')]"
			]
		}
	]
}