{
	"name": "VFD_PL_Mida2_Atomic_DELETE_Booking_Complete",
	"properties": {
		"description": "Pipeline atomica per rimozione di una prenotazione dal file completo",
		"activities": [
			{
				"name": "Check Complete File Exists",
				"type": "GetMetadata",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataset": {
						"referenceName": "VFD_DS_Curated_Mida_Bookings_Complete_Parquet",
						"type": "DatasetReference",
						"parameters": {
							"folderPath": "@pipeline().parameters.targetFolderPath",
							"fileName": "@pipeline().parameters.targetFileName"
						}
					},
					"fieldList": [
						"exists"
					],
					"storeSettings": {
						"type": "AzureBlobFSReadSettings",
						"recursive": true,
						"enablePartitionDiscovery": false
					},
					"formatSettings": {
						"type": "ParquetReadSettings"
					}
				}
			},
			{
				"name": "If File Exists Then Process Else Log",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Check Complete File Exists",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@activity('Check Complete File Exists').output.exists",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "Set File Exists False",
							"type": "SetVariable",
							"dependsOn": [],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "fileExists",
								"value": "false"
							}
						},
						{
							"name": "Log - Complete File Not Found",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Set File Exists False",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "warningMessage",
								"value": "DELETE_COMPLETE_FILE_NOT_FOUND: Cannot delete from non-existing file"
							}
						}
					],
					"ifTrueActivities": [
						{
							"name": "Set File Exists True",
							"type": "SetVariable",
							"dependsOn": [],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "fileExists",
								"value": "true"
							}
						},
						{
							"name": "Delete Record From File",
							"type": "ExecuteDataFlow",
							"dependsOn": [
								{
									"activity": "Set File Exists True",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"dataflow": {
									"referenceName": "VFD_DFL_Mida2_Atomic_DELETE_Booking_Complete",
									"type": "DataFlowReference",
									"parameters": {
										"reservationCode": {
											"value": "'@{pipeline().parameters.reservationCode}'",
											"type": "Expression"
										}
									},
									"datasetParameters": {
										"SourceExistingContent": {
											"folderPath": "@pipeline().parameters.targetFolderPath",
											"fileName": "@pipeline().parameters.targetFileName"
										},
										"SinkTemp": {
											"folderPath": "@pipeline().parameters.tempFolderPath",
											"fileName": "@pipeline().parameters.tempFileName"
										}
									}
								},
								"compute": {
									"coreCount": 8,
									"computeType": "General"
								},
								"traceLevel": "Fine"
							}
						},
						{
							"name": "Get Temp File Size",
							"type": "GetMetadata",
							"dependsOn": [
								{
									"activity": "Delete Record From File",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"dataset": {
									"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
									"type": "DatasetReference",
									"parameters": {
										"folderPath": "@pipeline().parameters.tempFolderPath",
										"fileName": "@pipeline().parameters.tempFileName"
									}
								},
								"fieldList": [
									"size"
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							}
						},
						{
							"name": "Set Temp File Size",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Get Temp File Size",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "tempFileSize",
								"value": {
									"value": "@string(activity('Get Temp File Size').output.size)",
									"type": "Expression"
								}
							}
						}
					]
				}
			},
			{
				"name": "If Temp File Not Empty Replace File",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "If File Exists Then Process Else Log",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@and(greater(int(variables('tempFileSize')), 1000), equals(variables('fileExists'), 'true'))",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "Replace Complete File",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "ParquetSource",
									"storeSettings": {
										"type": "AzureBlobFSReadSettings",
										"recursive": false,
										"enablePartitionDiscovery": false
									}
								},
								"sink": {
									"type": "ParquetSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									},
									"formatSettings": {
										"type": "ParquetWriteSettings"
									}
								},
								"enableStaging": false
							},
							"inputs": [
								{
									"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
									"type": "DatasetReference",
									"parameters": {
										"folderPath": "@pipeline().parameters.tempFolderPath",
										"fileName": "@pipeline().parameters.tempFileName"
									}
								}
							],
							"outputs": [
								{
									"referenceName": "VFD_DS_Curated_Mida_Bookings_Complete_Parquet",
									"type": "DatasetReference",
									"parameters": {
										"folderPath": "@pipeline().parameters.targetFolderPath",
										"fileName": "@pipeline().parameters.targetFileName"
									}
								}
							]
						}
					]
				}
			},
			{
				"name": "If Temp File Empty Delete Original",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "If Temp File Not Empty Replace File",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@and(lessOrEqual(int(variables('tempFileSize')), 1000), equals(variables('fileExists'), 'true'))",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "Delete Empty Complete File",
							"type": "Delete",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"dataset": {
									"referenceName": "VFD_DS_Curated_Mida_Bookings_Complete_Parquet",
									"type": "DatasetReference",
									"parameters": {
										"folderPath": "@pipeline().parameters.targetFolderPath",
										"fileName": "@pipeline().parameters.targetFileName"
									}
								},
								"enableLogging": false,
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								}
							}
						}
					]
				}
			},
			{
				"name": "Delete Temp File Cleanup",
				"type": "Delete",
				"dependsOn": [
					{
						"activity": "If Temp File Empty Delete Original",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataset": {
						"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
						"type": "DatasetReference",
						"parameters": {
							"folderPath": "@pipeline().parameters.tempFolderPath",
							"fileName": "@pipeline().parameters.tempFileName"
						}
					},
					"enableLogging": false,
					"storeSettings": {
						"type": "AzureBlobFSReadSettings",
						"recursive": false,
						"enablePartitionDiscovery": false
					}
				}
			}
		],
		"parameters": {
			"reservationCode": {
				"type": "String",
				"defaultValue": "RVFDTEST001"
			},
			"targetFolderPath": {
				"type": "String",
				"defaultValue": "Mida/Bookings/Complete/2025/01"
			},
			"targetFileName": {
				"type": "String",
				"defaultValue": "VFD_Mida_Bookings_20250101.parquet"
			},
			"tempFolderPath": {
				"type": "String",
				"defaultValue": "Mida/Bookings/Temp"
			},
			"tempFileName": {
				"type": "String",
				"defaultValue": "temp_delete_complete.parquet"
			}
		},
		"variables": {
			"fileExists": {
				"type": "String",
				"defaultValue": "false"
			},
			"tempFileSize": {
				"type": "String",
				"defaultValue": "0"
			},
			"warningMessage": {
				"type": "String"
			}
		},
		"folder": {
			"name": "Mida2/Bookings/Atomic"
		},
		"annotations": [
			"Pipeline atomica per rimozione prenotazioni complete",
			"Usa logica appiattita per evitare If Condition annidate",
			"Gestisce automaticamente file vuoti dopo cancellazione"
		]
	}
}