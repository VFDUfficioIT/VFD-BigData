{
	"name": "VFD_DFL_Mida_Bookings_Processed_Curated_Daily",
	"properties": {
		"description": "Dataflow per filtrare colonne dal parquet processed e scrivere su un file fisso",
		"folder": {
			"name": "Mida/Bookings"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "VFD_DS_Processed_Mida_Bookings_Parquet",
						"type": "DatasetReference"
					},
					"name": "SourceProcessed"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "VFD_DS_Curated_Mida_Bookings_Parquet",
						"type": "DatasetReference"
					},
					"name": "SinkCurated"
				}
			],
			"transformations": [
				{
					"name": "TransformData"
				},
				{
					"name": "SelectFields"
				}
			],
			"scriptLines": [
				"parameters{",
				"     folderPath as string (\"folder\"),",
				"     fileName as string (\"file\")",
				"}",
				"source(output(",
				"          guid_pk as string,",
				"          reservation_progressiveCode as string,",
				"          reservation_code as string,",
				"          reservation_status as string,",
				"          invoiceRequired as string,",
				"          customer as string,",
				"          visitDate as string,",
				"          reservationPayment_guid as string,",
				"          parentPayment_guid as string,",
				"          sliced as string,",
				"          reservation_guid as string,",
				"          group_guid as string,",
				"          group_label as string,",
				"          group_email as string,",
				"          paymentCode as string,",
				"          paymentCondition as string,",
				"          reservation_amount as string,",
				"          reservation_amountTax as string,",
				"          status as string,",
				"          status_text as string,",
				"          stamp as string,",
				"          notes as string,",
				"          transactionType as string,",
				"          transactionType_text as string,",
				"          paymentLimitDate as string,",
				"          paymentDate as string,",
				"          refund as string,",
				"          refunded as string,",
				"          convention_label as string,",
				"          receiptCode as string,",
				"          insertTimestamp as string,",
				"          updateTimestamp as string,",
				"          owner as string,",
				"          owner_text as string,",
				"          sessionId as string,",
				"          terminal_label as string,",
				"          terminalGroup_label as string,",
				"          gateway_guid as string,",
				"          gateway_label as string,",
				"          transactionID as string,",
				"          bankAccount_guid as string,",
				"          bankAccount_label as string,",
				"          channel_guid as string,",
				"          channel_label as string,",
				"          channelType as string,",
				"          detail_guid as string,",
				"          extra_guid as string,",
				"          priceList as string,",
				"          event as string,",
				"          detailType as string,",
				"          detail_text as string,",
				"          detail_label as string,",
				"          detail_count as string,",
				"          paymentDetail_guid as string,",
				"          detail_payingPartecipants as string,",
				"          detail_quantity as string,",
				"          tickets_quantity as string,",
				"          pax_quantity as string,",
				"          costCenter_guid as string,",
				"          costCenter_label as string,",
				"          object_receipt as string,",
				"          object_taxCode as string,",
				"          object_taxNotes as string,",
				"          object_amount as string,",
				"          object_taxPercentage as string,",
				"          amount as string,",
				"          amountNet as string,",
				"          amountPresale as string,",
				"          amountSold as string,",
				"          amountPayed as string,",
				"          amountPending as string,",
				"          amountCanceled as string,",
				"          externalId as string,",
				"          amountRefunded as string,",
				"          invoiceSummary as string,",
				"          eventCalendar_guid as string,",
				"          passDetail_guid as string,",
				"          paymentCostCenter_guid as string,",
				"          organization_guid as string,",
				"          venue_guid as string,",
				"          olapUpdateTimestamp as string,",
				"          row_id as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet',",
				"     folderPath: folderPath,",
				"     fileName: fileName) ~> SourceProcessed",
				"SourceProcessed derive(adjusted_pax_quantity = iif(status == 6 || status == 7 || status == 101, pax_quantity * -1, pax_quantity),",
				"          adjusted_tickets_quantity = iif(status == 6 || status == 7 || status == 101, tickets_quantity * -1, tickets_quantity),",
				"          adjusted_amount = iif(status == 6 || status == 7 || status == 101, amount * -1, amount)) ~> TransformData",
				"TransformData select(mapColumn(",
				"          pax_quantity = adjusted_pax_quantity,",
				"          priceList,",
				"          tickets_quantity = adjusted_tickets_quantity,",
				"          amount = adjusted_amount,",
				"          visitDate,",
				"          channel_label,",
				"          transactionType_text,",
				"          insertTimestamp,",
				"          paymentDate,",
				"          secondaryVisitDate = visitDate,",
				"          status,",
				"          status_text",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SelectFields",
				"SelectFields sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:['VFD_DFL_Mida_Bookings_Processed_Curated_Daily_output.parquet'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     partitionBy('hash', 1),",
				"     fileName: 'VFD_DFL_Mida_Sales_Curated_output.parquet') ~> SinkCurated"
			]
		}
	}
}