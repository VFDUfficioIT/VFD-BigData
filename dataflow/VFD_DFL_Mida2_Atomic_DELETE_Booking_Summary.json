{
	"name": "VFD_DFL_Mida2_Atomic_DELETE_Booking_Summary",
	"properties": {
		"folder": {
			"name": "Mida2/Bookings/Atomic"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "VFD_DS_Curated_Mida_Bookings_Summary_Parquet",
						"type": "DatasetReference"
					},
					"name": "SourceExistingContent"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
						"type": "DatasetReference"
					},
					"name": "SinkTemp"
				}
			],
			"transformations": [
				{
					"name": "FilterOutDeletedRecord"
				}
			],
			"scriptLines": [
				"parameters{",
				"     row_id as string",
				"}",
				"source(output(",
				"          row_id as string,",
				"          reservation_code as string,",
				"          priceList as string,",
				"          channel_label as string,",
				"          pax_quantity as integer,",
				"          insertTimestamp as date,",
				"          updateTimestamp as date,",
				"          reservation_amount as decimal(10,2),",
				"          visitDate as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> SourceExistingContent",
				"SourceExistingContent filter(row_id != $row_id) ~> FilterOutDeletedRecord",
				"FilterOutDeletedRecord sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:['temp_delete_summary.parquet'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> SinkTemp"
			]
		}
	}
}