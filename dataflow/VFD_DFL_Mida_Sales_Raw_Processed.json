{
	"name": "VFD_DFL_Mida_Sales_Raw_Processed",
	"properties": {
		"folder": {
			"name": "Mida/Sales"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "VFD_DS_Raw_Mida_Sales_CSV",
						"type": "DatasetReference"
					},
					"name": "sourceRaw"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "VFD_DS_Processed_Mida_Sales_Parquet",
						"type": "DatasetReference"
					},
					"name": "sinkProcessed"
				}
			],
			"transformations": [
				{
					"name": "dataTypeConversions"
				},
				{
					"name": "addMetadata"
				}
			],
			"scriptLines": [
				"parameters{",
				"     p_folderPath as string,",
				"     p_fileName as string",
				"}",
				"source(output(",
				"          guid_pk as string,",
				"          reservation_progressiveCode as string,",
				"          reservation_code as string,",
				"          reservation_status as string,",
				"          invoiceRequired as boolean,",
				"          customer as string,",
				"          visitDate as string,",
				"          reservationPayment_guid as string,",
				"          parentPayment_guid as string,",
				"          sliced as boolean,",
				"          reservation_guid as string,",
				"          group_guid as string,",
				"          group_label as string,",
				"          group_email as string,",
				"          paymentCode as string,",
				"          paymentCondition as string,",
				"          reservation_amount as string,",
				"          reservation_amountTax as string,",
				"          status as string,",
				"          status_text as string,",
				"          stamp as string,",
				"          notes as string,",
				"          transactionType as string,",
				"          transactionType_text as string,",
				"          paymentLimitDate as string,",
				"          paymentDate as string,",
				"          refund as boolean,",
				"          refunded as boolean,",
				"          convention_label as string,",
				"          receiptCode as string,",
				"          insertTimestamp as string,",
				"          updateTimestamp as string,",
				"          owner as string,",
				"          owner_text as string,",
				"          sessionId as string,",
				"          terminal_label as string,",
				"          terminalGroup_label as string,",
				"          gateway_guid as string,",
				"          gateway_label as string,",
				"          transactionID as string,",
				"          bankAccount_guid as string,",
				"          bankAccount_label as string,",
				"          channel_guid as string,",
				"          channel_label as string,",
				"          channelType as string,",
				"          detail_guid as string,",
				"          extra_guid as string,",
				"          priceList as string,",
				"          event as string,",
				"          detailType as string,",
				"          detail_text as string,",
				"          detail_label as string,",
				"          detail_count as string,",
				"          paymentDetail_guid as string,",
				"          detail_payingPartecipants as string,",
				"          detail_quantity as string,",
				"          tickets_quantity as string,",
				"          pax_quantity as string,",
				"          costCenter_guid as string,",
				"          costCenter_label as string,",
				"          object_receipt as string,",
				"          object_taxCode as string,",
				"          object_taxNotes as string,",
				"          object_amount as string,",
				"          object_taxPercentage as string,",
				"          amount as string,",
				"          amountNet as string,",
				"          amountPresale as string,",
				"          amountSold as string,",
				"          amountPayed as string,",
				"          amountPending as string,",
				"          amountCanceled as string,",
				"          externalId as string,",
				"          amountRefunded as string,",
				"          invoiceSummary as string,",
				"          eventCalendar_guid as string,",
				"          passDetail_guid as string,",
				"          paymentCostCenter_guid as string,",
				"          organization_guid as string,",
				"          venue_guid as string,",
				"          olapUpdateTimestamp as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     delimiter: ';',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"') ~> sourceRaw",
				"sourceRaw derive(visitDate = case(!isNull(visitDate) && !equals(trim(visitDate), ''), toDate(visitDate, 'dd/MM/yyyy')),",
				"          paymentLimitDate = case(!isNull(paymentLimitDate) && !equals(trim(paymentLimitDate), ''), toDate(paymentLimitDate, 'dd/MM/yyyy')),",
				"          paymentDate = case(!isNull(paymentDate) && !equals(trim(paymentDate), ''), toDate(paymentDate, 'dd/MM/yyyy')),",
				"          insertTimestamp = case(!isNull(insertTimestamp) && !equals(trim(insertTimestamp), ''), toDate(insertTimestamp, 'dd/MM/yyyy')),",
				"          updateTimestamp = case(!isNull(updateTimestamp) && !equals(trim(updateTimestamp), ''), toDate(updateTimestamp, 'dd/MM/yyyy')),",
				"          olapUpdateTimestamp = case(!isNull(olapUpdateTimestamp) && !equals(trim(olapUpdateTimestamp), ''), toDate(olapUpdateTimestamp, 'dd/MM/yyyy')),",
				"          reservation_amount = case(!isNull(reservation_amount) && !equals(trim(reservation_amount), ''), toDecimal(reservation_amount)),",
				"          reservation_amountTax = case(!isNull(reservation_amountTax) && !equals(trim(reservation_amountTax), ''), toDecimal(reservation_amountTax)),",
				"          detail_count = case(!isNull(detail_count) && !equals(trim(detail_count), ''), toInteger(detail_count)),",
				"          detail_payingPartecipants = case(!isNull(detail_payingPartecipants) && !equals(trim(detail_payingPartecipants), ''), toInteger(detail_payingPartecipants)),",
				"          detail_quantity = case(!isNull(detail_quantity) && !equals(trim(detail_quantity), ''), toInteger(detail_quantity)),",
				"          tickets_quantity = case(!isNull(tickets_quantity) && !equals(trim(tickets_quantity), ''), toInteger(tickets_quantity)),",
				"          pax_quantity = case(!isNull(pax_quantity) && !equals(trim(pax_quantity), ''), toInteger(pax_quantity)),",
				"          object_amount = case(!isNull(object_amount) && !equals(trim(object_amount), ''), toDecimal(object_amount)),",
				"          object_taxPercentage = case(!isNull(object_taxPercentage) && !equals(trim(object_taxPercentage), ''), toDecimal(object_taxPercentage)),",
				"          amount = case(!isNull(amount) && !equals(trim(amount), ''), toDecimal(amount)),",
				"          amountNet = case(!isNull(amountNet) && !equals(trim(amountNet), ''), toDecimal(amountNet)),",
				"          amountPresale = case(!isNull(amountPresale) && !equals(trim(amountPresale), ''), toDecimal(amountPresale)),",
				"          amountSold = case(!isNull(amountSold) && !equals(trim(amountSold), ''), toDecimal(amountSold)),",
				"          amountPayed = case(!isNull(amountPayed) && !equals(trim(amountPayed), ''), toDecimal(amountPayed)),",
				"          amountPending = case(!isNull(amountPending) && !equals(trim(amountPending), ''), toDecimal(amountPending)),",
				"          amountCanceled = case(!isNull(amountCanceled) && !equals(trim(amountCanceled), ''), toDecimal(amountCanceled)),",
				"          amountRefunded = case(!isNull(amountRefunded) && !equals(trim(amountRefunded), ''), toDecimal(amountRefunded))) ~> dataTypeConversions",
				"dataTypeConversions derive(processing_date = currentUTC(),",
				"          source_file = concatWS('/', 'raw', $p_folderPath, $p_fileName),",
				"          data_source = 'export_vw_summary_reservationPayments') ~> addMetadata",
				"addMetadata sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkProcessed"
			]
		}
	}
}