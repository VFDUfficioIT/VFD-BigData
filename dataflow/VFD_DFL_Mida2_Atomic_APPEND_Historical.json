{
	"name": "VFD_DFL_Mida2_Atomic_APPEND_Historical",
	"properties": {
		"folder": {
			"name": "Mida2/Bookings/Atomic"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "VFD_DS_Processed_Mida_Bookings_Parquet",
						"type": "DatasetReference"
					},
					"name": "SourceNewRecord"
				},
				{
					"dataset": {
						"referenceName": "VFD_DS_Curated_Mida_Historical_Parquet",
						"type": "DatasetReference"
					},
					"name": "SourceExistingHistorical"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
						"type": "DatasetReference"
					},
					"name": "SinkTemp"
				}
			],
			"transformations": [
				{
					"name": "FilterNewRecord"
				},
				{
					"name": "AddAuditFields"
				},
				{
					"name": "UnionByName"
				}
			],
			"scriptLines": [
				"parameters{",
				"     reservationCode as string,",
				"     operationType as string",
				"}",
				"source(output(",
				"          guid_pk as string,",
				"          reservation_progressiveCode as string,",
				"          reservation_code as string,",
				"          reservation_status as string,",
				"          invoiceRequired as string,",
				"          customer as string,",
				"          visitDate as string,",
				"          reservationPayment_guid as string,",
				"          parentPayment_guid as string,",
				"          sliced as string,",
				"          reservation_guid as string,",
				"          group_guid as string,",
				"          group_label as string,",
				"          group_email as string,",
				"          paymentCode as string,",
				"          paymentCondition as string,",
				"          reservation_amount as string,",
				"          reservation_amountTax as string,",
				"          status as string,",
				"          status_text as string,",
				"          stamp as string,",
				"          notes as string,",
				"          transactionType as string,",
				"          transactionType_text as string,",
				"          paymentLimitDate as string,",
				"          paymentDate as string,",
				"          refund as string,",
				"          refunded as string,",
				"          convention_label as string,",
				"          receiptCode as string,",
				"          insertTimestamp as string,",
				"          updateTimestamp as string,",
				"          owner as string,",
				"          owner_text as string,",
				"          sessionId as string,",
				"          terminal_label as string,",
				"          terminalGroup_label as string,",
				"          gateway_guid as string,",
				"          gateway_label as string,",
				"          transactionID as string,",
				"          bankAccount_guid as string,",
				"          bankAccount_label as string,",
				"          channel_guid as string,",
				"          channel_label as string,",
				"          channelType as string,",
				"          detail_guid as string,",
				"          extra_guid as string,",
				"          priceList as string,",
				"          event as string,",
				"          detailType as string,",
				"          detail_text as string,",
				"          detail_label as string,",
				"          detail_count as string,",
				"          paymentDetail_guid as string,",
				"          detail_payingPartecipants as string,",
				"          detail_quantity as string,",
				"          tickets_quantity as string,",
				"          pax_quantity as string,",
				"          costCenter_guid as string,",
				"          costCenter_label as string,",
				"          object_receipt as string,",
				"          object_taxCode as string,",
				"          object_taxNotes as string,",
				"          object_amount as string,",
				"          object_taxPercentage as string,",
				"          amount as string,",
				"          amountNet as string,",
				"          amountPresale as string,",
				"          amountSold as string,",
				"          amountPayed as string,",
				"          amountPending as string,",
				"          amountCanceled as string,",
				"          externalId as string,",
				"          amountRefunded as string,",
				"          invoiceSummary as string,",
				"          eventCalendar_guid as string,",
				"          passDetail_guid as string,",
				"          paymentCostCenter_guid as string,",
				"          organization_guid as string,",
				"          venue_guid as string,",
				"          olapUpdateTimestamp as string,",
				"          row_id as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> SourceNewRecord",
				"source(output(",
				"          guid_pk as string,",
				"          reservation_progressiveCode as string,",
				"          reservation_code as string,",
				"          reservation_status as integer,",
				"          invoiceRequired as string,",
				"          customer as decimal(10,2),",
				"          visitDate as date,",
				"          reservationPayment_guid as string,",
				"          parentPayment_guid as string,",
				"          sliced as string,",
				"          reservation_guid as string,",
				"          group_guid as string,",
				"          group_label as string,",
				"          group_email as string,",
				"          paymentCode as string,",
				"          paymentCondition as decimal(10,2),",
				"          reservation_amount as decimal(10,2),",
				"          reservation_amountTax as decimal(10,2),",
				"          status as integer,",
				"          status_text as string,",
				"          stamp as string,",
				"          notes as decimal(10,2),",
				"          transactionType as string,",
				"          transactionType_text as string,",
				"          paymentLimitDate as date,",
				"          paymentDate as date,",
				"          refund as string,",
				"          refunded as string,",
				"          convention_label as string,",
				"          receiptCode as decimal(10,2),",
				"          insertTimestamp as date,",
				"          updateTimestamp as date,",
				"          owner as string,",
				"          owner_text as string,",
				"          sessionId as string,",
				"          terminal_label as decimal(10,2),",
				"          terminalGroup_label as decimal(10,2),",
				"          gateway_guid as string,",
				"          gateway_label as string,",
				"          transactionID as string,",
				"          bankAccount_guid as decimal(10,2),",
				"          bankAccount_label as decimal(10,2),",
				"          channel_guid as string,",
				"          channel_label as string,",
				"          channelType as string,",
				"          detail_guid as string,",
				"          extra_guid as decimal(10,2),",
				"          priceList as string,",
				"          event as string,",
				"          detailType as string,",
				"          detail_text as string,",
				"          detail_label as string,",
				"          detail_count as integer,",
				"          paymentDetail_guid as string,",
				"          detail_payingPartecipants as integer,",
				"          detail_quantity as integer,",
				"          tickets_quantity as integer,",
				"          pax_quantity as integer,",
				"          costCenter_guid as string,",
				"          costCenter_label as string,",
				"          object_receipt as integer,",
				"          object_taxCode as string,",
				"          object_taxNotes as string,",
				"          object_amount as decimal(10,2),",
				"          object_taxPercentage as decimal(10,2),",
				"          amount as decimal(10,2),",
				"          amountNet as decimal(10,2),",
				"          amountPresale as decimal(10,2),",
				"          amountSold as decimal(10,2),",
				"          amountPayed as decimal(10,2),",
				"          amountPending as decimal(10,2),",
				"          amountCanceled as decimal(10,2),",
				"          externalId as string,",
				"          amountRefunded as decimal(10,2),",
				"          invoiceSummary as decimal(10,2),",
				"          eventCalendar_guid as string,",
				"          passDetail_guid as decimal(10,2),",
				"          paymentCostCenter_guid as decimal(10,2),",
				"          organization_guid as string,",
				"          venue_guid as string,",
				"          olapUpdateTimestamp as date,",
				"          row_id as string,",
				"          operationType as string,",
				"          operationTimestamp as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> SourceExistingHistorical",
				"SourceNewRecord filter(reservation_code == $reservationCode) ~> FilterNewRecord",
				"FilterNewRecord derive(operationType = $operationType,",
				"          operationTimestamp = currentTimestamp()) ~> AddAuditFields",
				"AddAuditFields, SourceExistingHistorical union(byName: true)~> UnionByName",
				"UnionByName sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:['temp_append_historical.parquet'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> SinkTemp"
			]
		}
	}
}