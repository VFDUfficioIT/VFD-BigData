{
	"name": "VFD_DFL_Mida2_Atomic_INSERT_Booking_Complete",
	"properties": {
		"folder": {
			"name": "Mida2/Bookings/Atomic"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "VFD_Big_Data_DL",
						"type": "LinkedServiceReference"
					},
					"name": "DummySource"
				},
				{
					"dataset": {
						"referenceName": "VFD_DS_Curated_Mida_Bookings_Complete_Parquet",
						"type": "DatasetReference"
					},
					"name": "SourceExistingContent"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "VFD_DS_Curated_Mida_Temp_Parquet",
						"type": "DatasetReference"
					},
					"name": "SinkTemp"
				}
			],
			"transformations": [
				{
					"name": "iif"
				}
			],
			"scriptLines": [
				"parameters{",
				"     guid_pk as string,",
				"     reservation_progressiveCode as string,",
				"     reservation_code as string,",
				"     reservation_status as integer,",
				"     invoiceRequired as string,",
				"     customer as decimal(10,2),",
				"     visitDate as string,",
				"     reservationPayment_guid as string,",
				"     parentPayment_guid as string,",
				"     sliced as string,",
				"     reservation_guid as string,",
				"     group_guid as string,",
				"     group_label as string,",
				"     group_email as string,",
				"     paymentCode as string,",
				"     paymentCondition as decimal(10,2),",
				"     reservation_amount as decimal(10,2),",
				"     reservation_amountTax as decimal(10,2),",
				"     status as integer,",
				"     status_text as string,",
				"     stamp as string,",
				"     notes as string,",
				"     transactionType as string,",
				"     transactionType_text as string,",
				"     paymentLimitDate as string,",
				"     paymentDate as string,",
				"     refund as string,",
				"     refunded as string,",
				"     convention_label as string,",
				"     receiptCode as string,",
				"     insertTimestamp as string,",
				"     updateTimestamp as string,",
				"     owner as string,",
				"     owner_text as string,",
				"     sessionId as string,",
				"     terminal_label as string,",
				"     terminalGroup_label as string,",
				"     gateway_guid as string,",
				"     gateway_label as string,",
				"     transactionID as string,",
				"     bankAccount_guid as decimal(10,2),",
				"     bankAccount_label as decimal(10,2),",
				"     channel_guid as string,",
				"     channel_label as string,",
				"     channelType as string,",
				"     detail_guid as string,",
				"     extra_guid as decimal(10,2),",
				"     priceList as string,",
				"     event as string,",
				"     detailType as string,",
				"     detail_text as string,",
				"     detail_label as string,",
				"     detail_count as integer,",
				"     paymentDetail_guid as string,",
				"     detail_payingPartecipants as integer,",
				"     detail_quantity as integer,",
				"     tickets_quantity as integer,",
				"     pax_quantity as integer,",
				"     costCenter_guid as string,",
				"     costCenter_label as string,",
				"     object_receipt as integer,",
				"     object_taxCode as string,",
				"     object_taxNotes as string,",
				"     object_amount as decimal(10,2),",
				"     object_taxPercentage as decimal(10,2),",
				"     amount as decimal(10,2),",
				"     amountNet as decimal(10,2),",
				"     amountPresale as decimal(10,2),",
				"     amountSold as decimal(10,2),",
				"     amountPayed as decimal(10,2),",
				"     amountPending as decimal(10,2),",
				"     amountCanceled as decimal(10,2),",
				"     externalId as string,",
				"     amountRefunded as decimal(10,2),",
				"     invoiceSummary as string,",
				"     eventCalendar_guid as string,",
				"     passDetail_guid as string,",
				"     paymentCostCenter_guid as string,",
				"     organization_guid as string,",
				"     venue_guid as string,",
				"     olapUpdateTimestamp as string,",
				"     row_id as string",
				"}",
				"source(output(",
				"          dummy as integer",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'dummy',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true,",
				"     data: 'dummy\\n1') ~> DummySource",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> SourceExistingContent",
				"DummySource derive(guid_pk = $guid_pk,",
				"          reservation_progressiveCode = $reservation_progressiveCode,",
				"          reservation_code = $reservation_code,",
				"          reservation_status = toInteger($reservation_status),",
				"          invoiceRequired = $invoiceRequired,",
				"          customer = toDecimal($customer, 10, 2),",
				"          visitDate = iif(isNull($visitDate) || $visitDate == '', null(), toDate($visitDate, 'yyyy-MM-dd')),",
				"          reservationPayment_guid = $reservationPayment_guid,",
				"          parentPayment_guid = $parentPayment_guid,",
				"          sliced = $sliced,",
				"          reservation_guid = $reservation_guid,",
				"          group_guid = $group_guid,",
				"          group_label = $group_label,",
				"          group_email = $group_email,",
				"          paymentCode = $paymentCode,",
				"          paymentCondition = toDecimal($paymentCondition, 10, 2),",
				"          reservation_amount = toDecimal($reservation_amount, 10, 2),",
				"          reservation_amountTax = toDecimal($reservation_amountTax, 10, 2),",
				"          status = toInteger($status),",
				"          status_text = $status_text,",
				"          stamp = $stamp,",
				"          notes = iif(isNull($notes) || $notes == '', null(), $notes),",
				"          transactionType = $transactionType,",
				"          transactionType_text = $transactionType_text,",
				"          paymentLimitDate = ERROR_FUNCTION('')) ~> iif",
				" sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SinkTemp"
			]
		}
	}
}