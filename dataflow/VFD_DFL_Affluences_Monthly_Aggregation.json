{
	"name": "VFD_DFL_Affluences_Monthly_Aggregation",
	"properties": {
		"folder": {
			"name": "Affluences"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "VFD_DS_Processed_Affluences_Parquet",
						"type": "DatasetReference"
					},
					"name": "SourceNewData"
				},
				{
					"dataset": {
						"referenceName": "VFD_DS_Curated_Affluences_Monthly_Parquet",
						"type": "DatasetReference"
					},
					"name": "SourceExistingMonthly"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "VFD_DS_Curated_Affluences_Monthly_Parquet",
						"type": "DatasetReference"
					},
					"name": "SinkMonthly"
				}
			],
			"transformations": [
				{
					"name": "FilterEntryPoints"
				},
				{
					"name": "CleanSiteNames"
				},
				{
					"name": "AggregateByDate"
				},
				{
					"name": "FilterTerrazze"
				},
				{
					"name": "MaxOccupancyByDate"
				},
				{
					"name": "PivotEntries"
				},
				{
					"name": "CalculateTotals"
				},
				{
					"name": "JoinAggregations"
				},
				{
					"name": "FilterExistingData"
				},
				{
					"name": "UnionWithExisting"
				}
			],
			"scriptLines": [
				"parameters{",
				"     currentDate as string",
				"}",
				"source(output(",
				"          site_id as string,",
				"          site_name as string,",
				"          date as date,",
				"          hour as string,",
				"          occupancy as integer,",
				"          entries as integer,",
				"          exits as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> SourceNewData",
				"source(output(",
				"          date as date,",
				"          total_entries as integer,",
				"          ascensore_nord_entries as integer,",
				"          ascensore_sud_entries as integer,",
				"          salita_piedi_entries as integer,",
				"          discesa_piedi_entries as integer,",
				"          max_occupancy as integer,",
				"          max_occupancy_hour as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: true,",
				"     format: 'parquet') ~> SourceExistingMonthly",
				"SourceNewData filter(site_name == 'Ascensore Nord' || site_name == 'Ascensore Sud' || site_name == 'Salita a piedi' || site_name == 'Discesa a piedi') ~> FilterEntryPoints",
				"FilterEntryPoints derive(site_name_clean = case(",
				"     site_name == 'Ascensore Nord', 'AscensoreNord',",
				"     site_name == 'Ascensore Sud', 'AscensoreSud',",
				"     site_name == 'Salita a piedi', 'SalitaPiedi',",
				"     site_name == 'Discesa a piedi', 'DiscesaPiedi',",
				"     site_name",
				")) ~> CleanSiteNames",
				"CleanSiteNames aggregate(groupBy(date,",
				"          site_name_clean),",
				"     entries_sum = sum(entries)) ~> AggregateByDate",
				"SourceNewData filter(site_name == 'Terrazze') ~> FilterTerrazze",
				"FilterTerrazze aggregate(groupBy(date),",
				"     max_occupancy = max(occupancy),",
				"          max_occupancy_hour = first(case(occupancy == max(occupancy), hour))) ~> MaxOccupancyByDate",
				"AggregateByDate pivot(groupBy(date),",
				"     pivotBy(site_name_clean, ['AscensoreNord', 'AscensoreSud', 'SalitaPiedi', 'DiscesaPiedi']),",
				"     entries_sum = sum(entries_sum),",
				"     columnNaming: '$N$V',",
				"     lateral: true) ~> PivotEntries",
				"PivotEntries derive(ascensore_nord_entries = coalesce(AscensoreNord_entries_sum, 0),",
				"          ascensore_sud_entries = coalesce(AscensoreSud_entries_sum, 0),",
				"          salita_piedi_entries = coalesce(SalitaPiedi_entries_sum, 0),",
				"          discesa_piedi_entries = coalesce(DiscesaPiedi_entries_sum, 0),",
				"          total_entries = coalesce(AscensoreNord_entries_sum, 0) + coalesce(AscensoreSud_entries_sum, 0) + coalesce(SalitaPiedi_entries_sum, 0) + coalesce(DiscesaPiedi_entries_sum, 0)) ~> CalculateTotals",
				"CalculateTotals, MaxOccupancyByDate join(PivotEntries@date == MaxOccupancyByDate@date,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinAggregations",
				"SourceExistingMonthly filter(toString(date) != $currentDate) ~> FilterExistingData",
				"FilterExistingData, JoinAggregations union(byName: true)~> UnionWithExisting",
				"UnionWithExisting sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          date as date,",
				"          total_entries as integer,",
				"          ascensore_nord_entries as integer,",
				"          ascensore_sud_entries as integer,",
				"          salita_piedi_entries as integer,",
				"          discesa_piedi_entries as integer,",
				"          max_occupancy as integer,",
				"          max_occupancy_hour as string",
				"     ),",
				"     format: 'parquet',",
				"     partitionFileNames:['VFD_DFL_Affluences_Monthly_Aggregation_output.parquet'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          date = {PivotEntries@date},",
				"          total_entries,",
				"          ascensore_nord_entries,",
				"          ascensore_sud_entries,",
				"          salita_piedi_entries,",
				"          discesa_piedi_entries,",
				"          max_occupancy,",
				"          max_occupancy_hour",
				"     ),",
				"     partitionBy('hash', 1),",
				"     compressionCodec: 'snappy') ~> SinkMonthly"
			]
		}
	}
}